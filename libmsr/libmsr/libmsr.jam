### Support for building libmsr library
### Targets:
###     /ext/libmsr//libmsr

import os ;
import modules ;
import common ;
import path ;
import feature ;
import extension ;
import property ;
import project ;
import feature ;
import common ;

extension.declare libmsr ;

if [ modules.peek : NT ]
{
    feature.feature mfc : on off : propagated composite link-incompatible ;
    feature.compose <mfc>on : <define>LIBMSR_HAS_MFC <define>LIBMSR_HAS_THERMO_XCALIBUR <define>LIBMSR_HAS_ABI_ANALYST <define>LIBMSR_HAS_BRUKER_COMPASSXPORT ;
    #ECHO "Building LibMSR with support for reading Thermo, ABI, and Bruker files." ;
} else
{
    feature.feature mfc : on off : propagated incidental ;
    #ECHO "Building LibMSR without support for reading Thermo, ABI, and Bruker files." ;
}

rule libmsr-tag ( name : type ? : property-set )
{
    if "on" in [ $(property-set).get <mfc> ]
    {
        return [ common.format-name <base> <toolset> <threading> <runtime> <version:libmsr-version> : $(name) : $(type) : $(property-set) ] ;
    } else
    {
        return [ common.format-name <base> <toolset> <threading> <runtime> -no_mfc <version:libmsr-version> : $(name) : $(type) : $(property-set) ] ;
    }
}

rule init ( version ? : location : options * )
{
    version ?= default ;
    local requirements = [ extension.define libmsr $(version) : $(location) : $(options) ] ;

    local LIBMSR_PROJECT_PATH_STR = \\\"$(location:T)\\\" ;
    local build-sources = [ glob $(location)/*.cpp ] [ glob $(location)/common/*.cpp ] [ glob $(location)/xml/*.cpp ] [ glob $(location)/text/*.cpp ] ;
    #ECHO $(build-sources) ;
    local build-headers = [ glob $(location)/*.h ] [ glob $(location)/common/*.h ] [ glob $(location)/xml/*.h ] [ glob $(location)/text/*.h ] ;
    local source-includes = <include>$(location) <include>$(location)/common <include>$(location)/xml <include>$(location)/text ;
    source-includes = $(source-includes) <include>$(location)/thermo <include>$(location)/abi <include>$(location)/bruker ;

    using expat : 2.0.0 : $(EXPAT_SOURCE) ;
    using zlib : 1.2.3 : $(ZLIB_SOURCE) ;
    using boost : 1.34.1 : $(BOOST_SOURCE) ;

    requirements =
            [ extension.refine libmsr $(version) : <tag>@libmsr-tag ]
            #<warnings-as-errors>on
            <libmsr-version>$(version)
            <libmsr-location>$(location)
            <location-prefix>libmsr

            # special msvc hacks
            <toolset>msvc:<define>WIN32
            <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
            <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
            <toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS
            <toolset>msvc:<define>_CRT_NONSTDC_NO_WARNINGS
            <toolset>msvc:<define>_SECURE_SCL_THROWS=1
            <toolset>msvc:<define>LIBMSR_PROJECT_PATH=\"$(LIBMSR_PROJECT_PATH_STR)\"
            <link>shared,<toolset>msvc:<define>LIBMSR_NEEDS_FILESYSTEM_WORKAROUND
            <toolset>msvc-8.0~nm:<variant>profile
   <toolset>msvc-8.0~nm:<profiling>on
   <toolset>msvc-8.0~nm:<inlining>full
   <toolset>msvc-8.0~nm:<debug-symbols>on
   <toolset>msvc-8.0~nm:<debug-store>database
   <toolset>msvc-8.0~nm:<cxxflags>"/NMtxInlines /NMtxOn"

            $(source-includes)

            <library>/ext/zlib//z/<mfc>off
            <library>/ext/expat//expat/<mfc>off/<define>XML_LARGE_SIZE
            <library>/ext/boost//boost/<mfc>off
            <library>/ext/boost//regex/<mfc>off
            <library>/ext/boost//filesystem/<mfc>off
        ;

    if [ modules.peek : NT ]
    {
        lib libmsr : $(build-sources)
                   : $(requirements) <link>shared:<define>LIBMSR_DYN_LINK
                   : <variant>release <link>static
                   : $(source-includes)
                   ;
        lib libmsr : $(build-sources) [ glob $(location)/thermo/*.cpp ] [ glob $(location)/abi/*.cpp ] [ glob $(location)/bruker/*.cpp ]
                   : <mfc>on $(requirements) <runtime-link>shared:<define>_AFXDLL <runtime-link>static:<define>_ATL_STATIC_REGISTRY
                     <link>shared:<define>LIBMSR_DYN_LINK
                   : <variant>release <link>static
                   : $(source-includes) <runtime-link>shared:<define>_AFXDLL <runtime-link>static:<define>_ATL_STATIC_REGISTRY
                   ;
    } else
    {
        lib pthread : : <name>pthread ;

        lib libmsr : $(build-sources)
                   : $(requirements)
                   : <variant>release <link>static
                   : $(source-includes) <runtime-link>static,<toolset>gcc:<library>pthread
                   ;
    }
}
