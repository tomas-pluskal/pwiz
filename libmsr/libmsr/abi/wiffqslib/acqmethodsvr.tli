// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (5a4863c9).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wiffqslib\acqmethodsvr.tli
//
// Wrapper implementations for Win32 type library ..\\libs\\analystqs\\AcqMethodSvr.dll
// compiler-generated file created 07/24/07 at 22:35:44 - DO NOT EDIT!

#pragma once

//
// interface IAcqMethod wrapper method implementations
//

inline HRESULT IAcqMethod::SaveAcqMethodToFile ( _bstr_t fileName, long bOverwrite ) {
    HRESULT _hr = raw_SaveAcqMethodToFile(fileName, bOverwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAcqMethod::LoadAcqMethodFromFile ( _bstr_t fileName ) {
    HRESULT _hr = raw_LoadAcqMethodFromFile(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IAcqMethod::GetMethodDuration ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMethodDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IAcqMethod::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IAcqMethod::IsAcqMethodValid ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsAcqMethodValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAcqMethod::GetAutoEquilibrate ( ) {
    long _result = 0;
    HRESULT _hr = get_AutoEquilibrate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAcqMethod::PutAutoEquilibrate ( long pVal ) {
    HRESULT _hr = put_AutoEquilibrate(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IAcqMethod::GetAutoEquilibrationTime ( ) {
    double _result = 0;
    HRESULT _hr = get_AutoEquilibrationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAcqMethod::PutAutoEquilibrationTime ( double pVal ) {
    HRESULT _hr = put_AutoEquilibrationTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IAcqMethod::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IAcqMethod::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IAcqMethod::LoadAcqMethodFromFileAsIs ( _bstr_t fileName ) {
    HRESULT _hr = raw_LoadAcqMethodFromFileAsIs(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IAcqMethod::GetSyncMode ( ) {
    short _result = 0;
    HRESULT _hr = get_SyncMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAcqMethod::PutSyncMode ( short pVal ) {
    HRESULT _hr = put_SyncMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDAMethodInit wrapper method implementations
//

inline HRESULT IDAMethodInit::InitTargetConfig ( unsigned long ulSize, struct tagDEVICEDESCRIPTOR * aDeviceList ) {
    HRESULT _hr = raw_InitTargetConfig(ulSize, aDeviceList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMethodInit::InitNewAcqMethod ( ) {
    HRESULT _hr = raw_InitNewAcqMethod();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDAMethodInit::ValidateAcqMethod ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateAcqMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IDAMethodInit::GetReadOnly ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDAMethodInit::PutReadOnly ( long pVal ) {
    HRESULT _hr = put_ReadOnly(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDAMConfig wrapper method implementations
//

inline IUnknownPtr IDAMConfig::AddDeviceMethod ( long devType, long devModel, long devID ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_AddDeviceMethod(devType, devModel, devID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IDAMConfig::AddDeviceMethodQuickly ( long devType, long devModel, long devID, _bstr_t devMethCLSID ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_AddDeviceMethodQuickly(devType, devModel, devID, devMethCLSID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IDAMConfig::DeleteDeviceMethod ( long devTypeID, long devModelID, long devID ) {
    HRESULT _hr = raw_DeleteDeviceMethod(devTypeID, devModelID, devID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IDAMConfig::GetDeviceMethod ( long devTypeID, long devModelID, long devID ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetDeviceMethod(devTypeID, devModelID, devID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short IDAMConfig::GetDeviceMethodCount ( ) {
    short _result = 0;
    HRESULT _hr = raw_GetDeviceMethodCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDAMConfig::DeleteAllDeviceMethods ( ) {
    HRESULT _hr = raw_DeleteAllDeviceMethods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDAMConfig::Empty ( ) {
    long _result = 0;
    HRESULT _hr = raw_Empty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDAMConfig::GetDeviceMethodByIdx ( long idx, long * pType, long * pModel, long * pId, IUnknown * * ppUnk ) {
    HRESULT _hr = raw_GetDeviceMethodByIdx(idx, pType, pModel, pId, ppUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMConfig::DeleteDeviceMethodByIdx ( long idx ) {
    HRESULT _hr = raw_DeleteDeviceMethodByIdx(idx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDAMTransfer wrapper method implementations
//

inline HRESULT IDAMTransfer::TransferFromFileToStorage ( _bstr_t fileName, struct IStorage * pStg ) {
    HRESULT _hr = raw_TransferFromFileToStorage(fileName, pStg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMTransfer::LoadFromStorage ( struct IStorage * pStg ) {
    HRESULT _hr = raw_LoadFromStorage(pStg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEnumDeviceMethods wrapper method implementations
//

inline HRESULT IEnumDeviceMethods::Next ( IUnknown * * ppUnkDevMeth, long * pType, long * pModel, long * pInst ) {
    HRESULT _hr = raw_Next(ppUnkDevMeth, pType, pModel, pInst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEnumDeviceMethods::Skip ( unsigned long cDevMeth ) {
    HRESULT _hr = raw_Skip(cDevMeth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEnumDeviceMethods::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEnumDeviceMethodsPtr IEnumDeviceMethods::Clone ( ) {
    struct IEnumDeviceMethods * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumDeviceMethodsPtr(_result, false);
}

//
// interface IDAMOriginalConfig wrapper method implementations
//

inline HRESULT IDAMOriginalConfig::UpdateConfig ( ) {
    HRESULT _hr = raw_UpdateConfig();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMOriginalConfig::GetNextDevice ( long * devType, long * devModel, long * devID, BSTR * devName ) {
    HRESULT _hr = raw_GetNextDevice(devType, devModel, devID, devName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMOriginalConfig::ResetDeviceList ( ) {
    HRESULT _hr = raw_ResetDeviceList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMOriginalConfig::GetInstrumentSignature ( BSTR * pSignature ) {
    HRESULT _hr = raw_GetInstrumentSignature(pSignature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDAMOriginalConfig::GetIonSource ( BSTR * ionSourceName, int * ionSource ) {
    HRESULT _hr = raw_GetIonSource(ionSourceName, ionSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDevMethodEvents wrapper method implementations
//

inline HRESULT IDevMethodEvents::OnSyncModeChanged ( short sSyncMode ) {
    HRESULT _hr = raw_OnSyncModeChanged(sSyncMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethodEvents::OnMSDurationChanged ( double dDuration ) {
    HRESULT _hr = raw_OnMSDurationChanged(dDuration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethodEvents::OnUseChanged ( long bUse, long devType, long devModel, long devID ) {
    HRESULT _hr = raw_OnUseChanged(bUse, devType, devModel, devID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethodEvents::OnAddRemoveChanged ( long bAdd, long devType, long devModel, long devID ) {
    HRESULT _hr = raw_OnAddRemoveChanged(bAdd, devType, devModel, devID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
