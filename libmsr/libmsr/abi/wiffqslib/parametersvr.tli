// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (041c2459).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wiffqslib\parametersvr.tli
//
// Wrapper implementations for Win32 type library ..\\libs\\analystqs\\ParameterSvr.dll
// compiler-generated file created 08/29/07 at 18:52:42 - DO NOT EDIT!

#pragma once

//
// interface IParameterData wrapper method implementations
//

inline _bstr_t IParameterData::GetparamId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_paramId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IParameterData::PutparamId ( _bstr_t pVal ) {
    HRESULT _hr = put_paramId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IParameterData::GetstartVal ( ) {
    float _result = 0;
    HRESULT _hr = get_startVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IParameterData::PutstartVal ( float pVal ) {
    HRESULT _hr = put_startVal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IParameterData::GetstopVal ( ) {
    float _result = 0;
    HRESULT _hr = get_stopVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IParameterData::PutstopVal ( float pVal ) {
    HRESULT _hr = put_stopVal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float IParameterData::GetstepVal ( ) {
    float _result = 0;
    HRESULT _hr = get_stepVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IParameterData::PutstepVal ( float pVal ) {
    HRESULT _hr = put_stepVal(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IParameterData::SetParameter ( _bstr_t paramId, float start, float stop, float step ) {
    HRESULT _hr = raw_SetParameter(paramId, start, stop, step);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IParameterData::GetParameter ( BSTR * pParamId, float * pStart, float * pStop, float * pStep ) {
    HRESULT _hr = raw_GetParameter(pParamId, pStart, pStop, pStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IParameterData::SetParameterLimits ( float fMin, float fMax ) {
    HRESULT _hr = raw_SetParameterLimits(fMin, fMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IParameterData::GetParameterLimits ( float * fMin, float * fMax ) {
    HRESULT _hr = raw_GetParameterLimits(fMin, fMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICheckParameterData wrapper method implementations
//

inline long ICheckParameterData::IsRange ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICheckParameterData::IsValue ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICheckParameterData::IsValid ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICheckParameterData::IsThis ( _bstr_t bstrName ) {
    long _result = 0;
    HRESULT _hr = raw_IsThis(bstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICheckParameterData::IsWithinLimits ( float fMin, float fMax ) {
    long _result = 0;
    HRESULT _hr = raw_IsWithinLimits(fMin, fMax, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPersistWIFFStg2 wrapper method implementations
//

inline HRESULT IPersistWIFFStg2::SaveToWIFF2 ( struct IStorage * pSaveStg, short sIdx, enum tagACQMETHODSTGTYPE stgType ) {
    HRESULT _hr = raw_SaveToWIFF2(pSaveStg, sIdx, stgType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPersistWIFFStg2::LoadFromWIFF2 ( struct IStorage * pStg, short sIdx, enum tagACQMETHODSTGTYPE stgType ) {
    HRESULT _hr = raw_LoadFromWIFF2(pStg, sIdx, stgType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IParamDataColl wrapper method implementations
//

inline short IParamDataColl::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IParamDataColl::GetParameter ( short sItem ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetParameter(sItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IParamDataColl::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline short IParamDataColl::AddParameter ( ) {
    short _result = 0;
    HRESULT _hr = raw_AddParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IParamDataColl::RemoveParameter ( short sItem ) {
    HRESULT _hr = raw_RemoveParameter(sItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IParamDataColl::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IParamDataColl::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IParamDataColl::IsEmpty ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsEmpty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IParamDataColl::CopyFrom ( IUnknown * pUnkParamData ) {
    HRESULT _hr = raw_CopyFrom(pUnkParamData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IParamDataColl::RemoveAllParameters ( ) {
    HRESULT _hr = raw_RemoveAllParameters();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IParamDataColl::FindParameter ( _bstr_t bstrName, short * sIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_FindParameter(bstrName, sIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IParamDataColl::AddSetParameter ( _bstr_t id, float start, float stop, float step, short * index ) {
    HRESULT _hr = raw_AddSetParameter(id, start, stop, step, index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
