// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (8beaec85).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wiffqslib\msmethodsvr.tli
//
// Wrapper implementations for Win32 type library ..\\libs\\analystqs\\MSMethodSvr.dll
// compiler-generated file created 07/24/07 at 22:35:42 - DO NOT EDIT!

#pragma once

//
// interface IMassSpecMethod wrapper method implementations
//

inline IUnknownPtr IMassSpecMethod::GetPeriod ( long periodIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPeriod(periodIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _bstr_t IMassSpecMethod::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMassSpecMethod::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMassSpecMethod::DeletePeriod ( long lPeriodIdx ) {
    HRESULT _hr = raw_DeletePeriod(lPeriodIdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMassSpecMethod::GetPeriodCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PeriodCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IMassSpecMethod::GetSyncMode ( ) {
    short _result = 0;
    HRESULT _hr = get_SyncMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassSpecMethod::PutSyncMode ( short pVal ) {
    HRESULT _hr = put_SyncMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMassSpecMethod::SetMaxNumOfPeriods ( long lMax ) {
    HRESULT _hr = raw_SetMaxNumOfPeriods(lMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassSpecMethod::GetMassSpecConfigInfo ( long * pNumQuads, long * pModel, BSTR * configVer ) {
    HRESULT _hr = raw_GetMassSpecConfigInfo(pNumQuads, pModel, configVer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecMethod::GetMinMassStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_MinMassStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMinPauseBetweenMassRanges ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPauseBetweenMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMinSettlingTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinSettlingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMinCADGasInjectTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinCADGasInjectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMinCADGasEvacuateTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinCADGasEvacuateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IMassSpecMethod::CreatePeriod ( long * pPeriodIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CreatePeriod(pPeriodIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IMassSpecMethod::GetInternalValveMethod ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetInternalValveMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IMassSpecMethod::GetEmbeddedValveEnabled ( ) {
    long _result = 0;
    HRESULT _hr = get_EmbeddedValveEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassSpecMethod::PutEmbeddedValveEnabled ( long pVal ) {
    HRESULT _hr = put_EmbeddedValveEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IMassSpecMethod::GetPrevPeriod ( IUnknown * lpunkCurrentPer ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPrevPeriod(lpunkCurrentPer, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IMassSpecMethod::GetNextPeriod ( IUnknown * lpunkCurPeriod ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetNextPeriod(lpunkCurPeriod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IMassSpecMethod::UpdateSettlingTime ( IUnknown * lpunkPeriod ) {
    HRESULT _hr = raw_UpdateSettlingTime(lpunkPeriod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecMethod::GetMinDwellTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MinDwellTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMaxDwellTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxDwellTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMaxPeriodDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPeriodDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMaxPeriodDelay ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPeriodDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMaxSettlingTime ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxSettlingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMaxPauseBetweenMassRanges ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxPauseBetweenMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecMethod::GetMaxIntensityThreshold ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxIntensityThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IMassSpecMethod::GetParamSettingsSvr ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetParamSettingsSvr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMassSpecMethod2 wrapper method implementations
//

inline IUnknownPtr IMassSpecMethod2::InsertPeriod ( long periodLocation, long * pPeriodIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_InsertPeriod(periodLocation, pPeriodIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IMassSpecMethod2::GetMassSpecConfig ( IUnknown * * pUnkMSConfig ) {
    HRESULT _hr = raw_GetMassSpecConfig(pUnkMSConfig);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMassSpecMethod2::GetDataDependent ( ) {
    long _result = 0;
    HRESULT _hr = get_DataDependent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassSpecMethod2::PutDataDependent ( long pVal ) {
    HRESULT _hr = put_DataDependent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMassSpecMethod2::GetDataDependSvr ( IUnknown * * ppUnk ) {
    HRESULT _hr = raw_GetDataDependSvr(ppUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassSpecMethod2::IsIDAMethodValid ( long * pVal ) {
    HRESULT _hr = raw_IsIDAMethodValid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassSpecMethod2::get_IDAMethodValid ( long * pVal ) {
    HRESULT _hr = raw_get_IDAMethodValid(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassSpecMethod2::put_IDAMethodValid ( long newVal ) {
    HRESULT _hr = raw_put_IDAMethodValid(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDevMethod wrapper method implementations
//

inline HRESULT IDevMethod::SaveDevMethod ( struct IStorage * pSaveStg ) {
    HRESULT _hr = raw_SaveDevMethod(pSaveStg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::LoadDevMethod ( struct IStorage * pStg ) {
    HRESULT _hr = raw_LoadDevMethod(pStg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::InitDeviceMethod ( long type, long devmodel, long devid ) {
    HRESULT _hr = raw_InitDeviceMethod(type, devmodel, devid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDevMethod::ValidateDeviceMethod ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateDeviceMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IDevMethod::GetDeviceMethodDuration ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetDeviceMethodDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IDevMethod::InitData ( _bstr_t dataTypeId, long datasize, unsigned char * pData ) {
    HRESULT _hr = raw_InitData(dataTypeId, datasize, pData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::InitDone ( ) {
    HRESULT _hr = raw_InitDone();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::OnMethodClose ( ) {
    HRESULT _hr = raw_OnMethodClose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::SetUse ( long bUse ) {
    HRESULT _hr = raw_SetUse(bUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::GetUse ( long * bUse ) {
    HRESULT _hr = raw_GetUse(bUse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDevMethod::GetDeviceInfo ( long * devtype, long * devmodel, long * devid ) {
    HRESULT _hr = raw_GetDeviceInfo(devtype, devmodel, devid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPersistWIFFStg wrapper method implementations
//

inline HRESULT IPersistWIFFStg::SaveToWIFF ( struct IStorage * pSaveStg, enum tagACQMETHODSTGTYPE stgType ) {
    HRESULT _hr = raw_SaveToWIFF(pSaveStg, stgType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPersistWIFFStg::LoadFromWIFF ( struct IStorage * pStg, enum tagACQMETHODSTGTYPE stgType ) {
    HRESULT _hr = raw_LoadFromWIFF(pStg, stgType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAccessIonSourceInfo wrapper method implementations
//

inline HRESULT IAccessIonSourceInfo::GetSourceType ( int * pIonSrc ) {
    HRESULT _hr = raw_GetSourceType(pIonSrc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAccessIonSourceInfo::SetTargetIonSource ( long IonSource, short ISValid, short NCValid, short TEMValid ) {
    HRESULT _hr = raw_SetTargetIonSource(IonSource, ISValid, NCValid, TEMValid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAccessIonSourceInfo::GetSourceParametersMask ( long * pbISvalid, long * pbNCvalid, long * pbTEMvalid ) {
    HRESULT _hr = raw_GetSourceParametersMask(pbISvalid, pbNCvalid, pbTEMvalid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IAccessIonSourceInfo::IsIonSourceTypeValid ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsIonSourceTypeValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAccessIonSourceInfo::ResetIonSourceTypeToTarget ( ) {
    HRESULT _hr = raw_ResetIonSourceTypeToTarget();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAccessIonSourceInfo::GetOriginSourceType ( int * pIonSource ) {
    HRESULT _hr = raw_GetOriginSourceType(pIonSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITimingEvents wrapper method implementations
//

inline HRESULT ITimingEvents::InvalidateTiming ( ) {
    HRESULT _hr = raw_InvalidateTiming();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConnection wrapper method implementations
//

inline HRESULT IConnection::BelongsTo ( IUnknown * pUnkParent ) {
    HRESULT _hr = raw_BelongsTo(pUnkParent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConnection::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IEnableTuneMode wrapper method implementations
//

inline HRESULT IEnableTuneMode::EnableTuneMode ( long bTuneModeOn ) {
    HRESULT _hr = raw_EnableTuneMode(bTuneModeOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISupportEmbeddedDevices wrapper method implementations
//

inline long ISupportEmbeddedDevices::SupportEmbeddedDevice ( ) {
    long _result = 0;
    HRESULT _hr = raw_SupportEmbeddedDevice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISupportEmbeddedDevices::GetEmbeddedDeviceMethodCount ( long * plCount ) {
    HRESULT _hr = raw_GetEmbeddedDeviceMethodCount(plCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISupportEmbeddedDevices::GetEmbeddedDeviceMethod ( long lIdx, IUnknown * * ppUnk, long * plType, long * plModel ) {
    HRESULT _hr = raw_GetEmbeddedDeviceMethod(lIdx, ppUnk, plType, plModel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IValidateMSObject wrapper method implementations
//

inline HRESULT IValidateMSObject::InitMSConfig ( IUnknown * pUnkMSConfig ) {
    HRESULT _hr = raw_InitMSConfig(pUnkMSConfig);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IValidateMSObject::InitParamSettingsServer ( IUnknown * pUnkParamSettingsServer ) {
    HRESULT _hr = raw_InitParamSettingsServer(pUnkParamSettingsServer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IValidateMSObject::ResetDefaultSettings ( ) {
    HRESULT _hr = raw_ResetDefaultSettings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IValidateMSObject::Validate ( ) {
    long _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IValidateMSObject::ValidateMassAndCompDepParams ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateMassAndCompDepParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IValidateMSObject::ResetInvalidCompAndMassDepParamsToDefaults ( ) {
    HRESULT _hr = raw_ResetInvalidCompAndMassDepParamsToDefaults();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IValidateMSObject::ValidateIonSourceParams ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateIonSourceParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IValidateMSObject::ResetInvalidIonSourceParamsToDefaults ( ) {
    HRESULT _hr = raw_ResetInvalidIonSourceParamsToDefaults();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMSValidation wrapper method implementations
//

inline HRESULT IMSValidation::SetValidation ( long lMask ) {
    HRESULT _hr = raw_SetValidation(lMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IClone wrapper method implementations
//

inline HRESULT IClone::CopyDataFrom ( IUnknown * pUnk ) {
    HRESULT _hr = raw_CopyDataFrom(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMiscDAMCalls wrapper method implementations
//

inline HRESULT IMiscDAMCalls::SetIsDirty ( long bNewFlagValue ) {
    HRESULT _hr = raw_SetIsDirty(bNewFlagValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMinPulsarFrequency wrapper method implementations
//

inline HRESULT IMinPulsarFrequency::CalculateMinPulsarFreq ( double * dMinPFreq, double * dExpPDur ) {
    HRESULT _hr = raw_CalculateMinPulsarFreq(dMinPFreq, dExpPDur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPeriod wrapper method implementations
//

inline IUnknownPtr IPeriod::GetExperiment ( long experimIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetExperiment(experimIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IPeriod::GetNumCycles ( ) {
    long _result = 0;
    HRESULT _hr = get_NumCycles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPeriod::PutNumCycles ( long pVal ) {
    HRESULT _hr = put_NumCycles(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPeriod::DeleteExperiment ( long experimIdx ) {
    HRESULT _hr = raw_DeleteExperiment(experimIdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IPeriod::GetDuration ( ) {
    double _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPeriod::PutDuration ( double pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPeriod::GetExperimCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ExperimCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPeriod::GetCycleTime ( ) {
    double _result = 0;
    HRESULT _hr = get_CycleTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IPeriod::GetCycleDepParamsTbl ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetCycleDepParamsTbl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IPeriod::UpdateNumOfCycles ( long * pNumCycles, double * pPeriodPad ) {
    HRESULT _hr = raw_UpdateNumOfCycles(pNumCycles, pPeriodPad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IPeriod::UpdateDuration ( ) {
    double _result = 0;
    HRESULT _hr = raw_UpdateDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IPeriod::GetPause ( ) {
    double _result = 0;
    HRESULT _hr = get_Pause(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPeriod::PutPause ( double pVal ) {
    HRESULT _hr = put_Pause(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IPeriod::GetPeriodPad ( ) {
    double _result = 0;
    HRESULT _hr = get_PeriodPad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IPeriod::CreateExperiment ( long * pIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CreateExperiment(pIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IPeriod::GetPrevExperimentGlobal ( IUnknown * lpunkCurExp ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPrevExperimentGlobal(lpunkCurExp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IPeriod::GetMassSpecUnknown ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetMassSpecUnknown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IPeriod::CopyISParamsFromPrevExp ( IUnknown * punkCurExp ) {
    HRESULT _hr = raw_CopyISParamsFromPrevExp(punkCurExp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IPeriod::GetPrevExperimentLocal ( IUnknown * lpunkCurrentExp ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPrevExperimentLocal(lpunkCurrentExp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IPeriod::GetNextExperimentLocal ( IUnknown * lpunkCurExperiment ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetNextExperimentLocal(lpunkCurExperiment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IPeriod::UpdateSettlingTime ( IUnknown * lpunkExperiment ) {
    HRESULT _hr = raw_UpdateSettlingTime(lpunkExperiment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICycledParameters wrapper method implementations
//

inline HRESULT ICycledParameters::GetCycledParamCount ( long * pCycParamCount ) {
    HRESULT _hr = raw_GetCycledParamCount(pCycParamCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICycledParameters::GetFirstCycledParam ( BSTR * pParamID, float * pStart, float * pStop, float * pStep ) {
    HRESULT _hr = raw_GetFirstCycledParam(pParamID, pStart, pStop, pStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICycledParameters::GetNextCycledParam ( BSTR * pParamID, float * pStart, float * pStop, float * pStep ) {
    HRESULT _hr = raw_GetNextCycledParam(pParamID, pStart, pStop, pStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICycledParameters::GetCycledParam ( _bstr_t strParamID, float * pStart, float * pStop, float * pStep ) {
    HRESULT _hr = raw_GetCycledParam(strParamID, pStart, pStop, pStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICycledParameters::EditCycledParam ( _bstr_t strParamID, float start, float stop ) {
    HRESULT _hr = raw_EditCycledParam(strParamID, start, stop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICycledParameters::GetCyclableParams ( long * count, BSTR * * astrCycParamID ) {
    HRESULT _hr = raw_GetCyclableParams(count, astrCycParamID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICycledParameters::DeleteAllCycleParameters ( ) {
    HRESULT _hr = raw_DeleteAllCycleParameters();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExperiment wrapper method implementations
//

inline short IExperiment::GetScanType ( ) {
    short _result = 0;
    HRESULT _hr = get_ScanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutScanType ( short pVal ) {
    HRESULT _hr = put_ScanType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IExperiment::GetScanMode ( ) {
    short _result = 0;
    HRESULT _hr = get_ScanMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutScanMode ( short pVal ) {
    HRESULT _hr = put_ScanMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IExperiment::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IExperiment::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IExperiment::GetMassRange ( long massIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetMassRange(massIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IExperiment::GetPolarity ( ) {
    long _result = 0;
    HRESULT _hr = get_Polarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutPolarity ( long pVal ) {
    HRESULT _hr = put_Polarity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IExperiment::CreateMassRange ( long * plIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CreateMassRange(plIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IExperiment::GetMassRangesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MassRangesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExperiment::GetSmartQ2SettlingOn ( ) {
    long _result = 0;
    HRESULT _hr = get_SmartQ2SettlingOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutSmartQ2SettlingOn ( long pVal ) {
    HRESULT _hr = put_SmartQ2SettlingOn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IExperiment::GetSettlingTime ( ) {
    double _result = 0;
    HRESULT _hr = get_SettlingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutSettlingTime ( double pVal ) {
    HRESULT _hr = put_SettlingTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IExperiment::GetSourceParamsTbl ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_SourceParamsTbl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IExperiment::DeleteMassRange ( long massIdx ) {
    HRESULT _hr = raw_DeleteMassRange(massIdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExperiment::GetIntensityThreshold ( ) {
    double _result = 0;
    HRESULT _hr = get_IntensityThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutIntensityThreshold ( double pVal ) {
    HRESULT _hr = put_IntensityThreshold(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IExperiment::GetPauseBetweenMassRanges ( ) {
    double _result = 0;
    HRESULT _hr = get_PauseBetweenMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutPauseBetweenMassRanges ( double pVal ) {
    HRESULT _hr = put_PauseBetweenMassRanges(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IExperiment::GetQ1ResolutionFlag ( ) {
    short _result = 0;
    HRESULT _hr = get_Q1ResolutionFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutQ1ResolutionFlag ( short pVal ) {
    HRESULT _hr = put_Q1ResolutionFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IExperiment::ValidateExperiment ( long * bIsValid ) {
    HRESULT _hr = raw_ValidateExperiment(bIsValid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExperiment::InitExperiment ( ) {
    HRESULT _hr = raw_InitExperiment();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExperiment::GetFixedMass ( ) {
    double _result = 0;
    HRESULT _hr = get_FixedMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutFixedMass ( double pVal ) {
    HRESULT _hr = put_FixedMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IExperiment::GetMinPeakWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPeakWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutMinPeakWidth ( double pVal ) {
    HRESULT _hr = put_MinPeakWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IExperiment::GetMinPeakSeparation ( ) {
    double _result = 0;
    HRESULT _hr = get_MinPeakSeparation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutMinPeakSeparation ( double pVal ) {
    HRESULT _hr = put_MinPeakSeparation(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IExperiment::GetQ3ResolutionFlag ( ) {
    short _result = 0;
    HRESULT _hr = get_Q3ResolutionFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutQ3ResolutionFlag ( short pVal ) {
    HRESULT _hr = put_Q3ResolutionFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IExperiment::GetUseMCAScans ( ) {
    long _result = 0;
    HRESULT _hr = get_UseMCAScans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutUseMCAScans ( long pVal ) {
    HRESULT _hr = put_UseMCAScans(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IExperiment::GetNumOfMCAScans ( ) {
    short _result = 0;
    HRESULT _hr = get_NumOfMCAScans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutNumOfMCAScans ( short pVal ) {
    HRESULT _hr = put_NumOfMCAScans(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IExperiment::DeleteAllMasses ( ) {
    HRESULT _hr = raw_DeleteAllMasses();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExperiment::CalculateDuration ( ) {
    double _result = 0;
    HRESULT _hr = raw_CalculateDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IExperiment::GetMassDefect ( ) {
    double _result = 0;
    HRESULT _hr = get_MassDefect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IExperiment::PutMassDefect ( double pVal ) {
    HRESULT _hr = put_MassDefect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IExperiment::GetCADValue ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetCADValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IExperiment::GetSettlingMask ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetSettlingMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExperiment::SetDefaultScanType ( short ScanType, long flag ) {
    HRESULT _hr = raw_SetDefaultScanType(ScanType, flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IExperiment::SetDefaultPolarity ( long bPolarity, long flag ) {
    HRESULT _hr = raw_SetDefaultPolarity(bPolarity, flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IExperiment::GetMinSettlingTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinSettlingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IExperiment::IsCompOrMassParamTheSame ( _bstr_t AccessID, long * pRes ) {
    HRESULT _hr = raw_IsCompOrMassParamTheSame(AccessID, pRes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExperiment2 wrapper method implementations
//

inline HRESULT IExperiment2::FindMassRange ( double startMass, double stopMass, short * indexFound ) {
    HRESULT _hr = raw_FindMassRange(startMass, stopMass, indexFound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IExperiment3 wrapper method implementations
//

inline IUnknownPtr IExperiment3::GetMassSpecMethod ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetMassSpecMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IIonSourceParams wrapper method implementations
//

inline HRESULT IIonSourceParams::InitIonSourceParamsWithDefaults ( short sScanType, long bPolarity ) {
    HRESULT _hr = raw_InitIonSourceParamsWithDefaults(sScanType, bPolarity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIonSourceParams::CopyISParamsFromExperiment ( IUnknown * lpunkExp ) {
    HRESULT _hr = raw_CopyISParamsFromExperiment(lpunkExp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAccessScanDefaultsAndLimits wrapper method implementations
//

inline IUnknownPtr IAccessScanDefaultsAndLimits::GetCompoundAndMassDependentGroup ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetCompoundAndMassDependentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IAccessScanDefaultsAndLimits::GetSourceAndGasDependentGroup ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetSourceAndGasDependentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISmartSettling wrapper method implementations
//

inline long ISmartSettling::GetSmartSettlingFlag ( ) {
    long _result = 0;
    HRESULT _hr = get_SmartSettlingFlag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmartSettling::PutSmartSettlingFlag ( long pVal ) {
    HRESULT _hr = put_SmartSettlingFlag(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITOFProperties wrapper method implementations
//

inline double ITOFProperties::GetAccumTime ( ) {
    double _result = 0;
    HRESULT _hr = get_AccumTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutAccumTime ( double pVal ) {
    HRESULT _hr = put_AccumTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFProperties::GetCenterWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_CenterWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutCenterWidth ( long pVal ) {
    HRESULT _hr = put_CenterWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFProperties::GetUseHistogram ( ) {
    long _result = 0;
    HRESULT _hr = get_UseHistogram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutUseHistogram ( long pVal ) {
    HRESULT _hr = put_UseHistogram(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFProperties::GetTOFMassMin ( ) {
    double _result = 0;
    HRESULT _hr = get_TOFMassMin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutTOFMassMin ( double pVal ) {
    HRESULT _hr = put_TOFMassMin(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFProperties::GetTOFMassMax ( ) {
    double _result = 0;
    HRESULT _hr = get_TOFMassMax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutTOFMassMax ( double pVal ) {
    HRESULT _hr = put_TOFMassMax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFProperties::GetUseQ1TranDefault ( ) {
    long _result = 0;
    HRESULT _hr = get_UseQ1TranDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutUseQ1TranDefault ( long pVal ) {
    HRESULT _hr = put_UseQ1TranDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short ITOFProperties::GetTimeBins ( ) {
    short _result = 0;
    HRESULT _hr = get_TimeBins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutTimeBins ( short pVal ) {
    HRESULT _hr = put_TimeBins(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFProperties::GetUseTOFExtrDefault ( ) {
    long _result = 0;
    HRESULT _hr = get_UseTOFExtrDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutUseTOFExtrDefault ( long pVal ) {
    HRESULT _hr = put_UseTOFExtrDefault(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short ITOFProperties::GetChannels ( ) {
    short _result = 0;
    HRESULT _hr = get_Channels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutChannels ( short pVal ) {
    HRESULT _hr = put_Channels(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFProperties::GetDisplayMass ( ) {
    long _result = 0;
    HRESULT _hr = get_DisplayMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutDisplayMass ( long pVal ) {
    HRESULT _hr = put_DisplayMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFProperties::GetPulserFreq ( ) {
    double _result = 0;
    HRESULT _hr = get_PulserFreq(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutPulserFreq ( double pVal ) {
    HRESULT _hr = put_PulserFreq(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short ITOFProperties::GetStore ( ) {
    short _result = 0;
    HRESULT _hr = get_Store(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutStore ( short pVal ) {
    HRESULT _hr = put_Store(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFProperties::GetPulseDur ( ) {
    double _result = 0;
    HRESULT _hr = get_PulseDur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutPulseDur ( double pVal ) {
    HRESULT _hr = put_PulseDur(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFProperties::GetEnhanceAll ( ) {
    long _result = 0;
    HRESULT _hr = get_EnhanceAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFProperties::PutEnhanceAll ( long pVal ) {
    HRESULT _hr = put_EnhanceAll(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITOFProperties::put_TOFMasses ( double newTOFMin, double newTOFMax ) {
    HRESULT _hr = raw_put_TOFMasses(newTOFMin, newTOFMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::CreateTOFMassRange ( long * lIndex, IUnknown * * pUnkMassRange ) {
    HRESULT _hr = raw_CreateTOFMassRange(lIndex, pUnkMassRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::DeleteTOFMassRange ( long massIdx ) {
    HRESULT _hr = raw_DeleteTOFMassRange(massIdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::SetTOFMassRange ( long massIdx, double newCenter, double newWidth, long newEnhance ) {
    HRESULT _hr = raw_SetTOFMassRange(massIdx, newCenter, newWidth, newEnhance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr ITOFProperties::GetTOFMassRange ( long massIdx ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetTOFMassRange(massIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long ITOFProperties::GetTOFMassRangesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TOFMassRangesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITOFProperties::RecalculateDelayAndWidth ( ) {
    HRESULT _hr = raw_RecalculateDelayAndWidth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::GetTOFEnhance ( double * mass, double * width, long * enhance ) {
    HRESULT _hr = raw_GetTOFEnhance(mass, width, enhance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::GetQuadCyclesPerAccumulation ( short * pCycles ) {
    HRESULT _hr = raw_GetQuadCyclesPerAccumulation(pCycles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::SetTOFEnhance ( double mass, double width, long enhance ) {
    HRESULT _hr = raw_SetTOFEnhance(mass, width, enhance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFProperties::CreateTOFMassRange2 ( double mass, double width, long enhance, long * index ) {
    HRESULT _hr = raw_CreateTOFMassRange2(mass, width, enhance, index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ITOFProperties::AdjustTimeForTOF ( double time ) {
    double _result = 0;
    HRESULT _hr = raw_AdjustTimeForTOF(time, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ITOFProperties::GetPulsesPerStep ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPulsesPerStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ITOFProperties::ExportToText ( _bstr_t delimiter, long bTuneMode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ExportToText(delimiter, bTuneMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMassRange wrapper method implementations
//

inline long IMassRange::GetMassDepParamCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MassDepParamCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassRange::GetQstartMass ( ) {
    double _result = 0;
    HRESULT _hr = get_QstartMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassRange::PutQstartMass ( double pVal ) {
    HRESULT _hr = put_QstartMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IMassRange::GetQstopMass ( ) {
    double _result = 0;
    HRESULT _hr = get_QstopMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassRange::PutQstopMass ( double pVal ) {
    HRESULT _hr = put_QstopMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IMassRange::GetQstepMass ( ) {
    double _result = 0;
    HRESULT _hr = get_QstepMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassRange::PutQstepMass ( double pVal ) {
    HRESULT _hr = put_QstepMass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IMassRange::GetDwellTime ( ) {
    double _result = 0;
    HRESULT _hr = get_DwellTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassRange::PutDwellTime ( double pVal ) {
    HRESULT _hr = put_DwellTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMassRange::GetIsDummy ( ) {
    long _result = 0;
    HRESULT _hr = get_IsDummy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMassRange::PutIsDummy ( long pVal ) {
    HRESULT _hr = put_IsDummy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IMassRange::GetMassDepParamTbl ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MassDepParamTbl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IMassRange::SetMassRange ( double dStart, double dStop, double dStep ) {
    HRESULT _hr = raw_SetMassRange(dStart, dStop, dStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassRange::GetMassRange ( double * pdStart, double * pdStop, double * pdStep ) {
    HRESULT _hr = raw_GetMassRange(pdStart, pdStop, pdStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMassRange::GetNumOfMassPoints ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumOfMassPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICompoundDependentParams wrapper method implementations
//

inline HRESULT ICompoundDependentParams::InitCompoundDepParamsList ( IUnknown * pUnkSettings ) {
    HRESULT _hr = raw_InitCompoundDepParamsList(pUnkSettings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::InitCompoundDepParamsWithDefaults ( short sScanType, double dFixedMass ) {
    HRESULT _hr = raw_InitCompoundDepParamsWithDefaults(sScanType, dFixedMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::InitMassDepParamsWithDefaults ( short sScanType, double dFixedMass, short mask, long bAnalysingQuad ) {
    HRESULT _hr = raw_InitMassDepParamsWithDefaults(sScanType, dFixedMass, mask, bAnalysingQuad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ICompoundDependentParams::ValidateCompoundAndMassDepParams ( ) {
    long _result = 0;
    HRESULT _hr = raw_ValidateCompoundAndMassDepParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICompoundDependentParams::SetMassDepParam ( short sScanType, _bstr_t bstrParamID, float fStart, float fStop ) {
    HRESULT _hr = raw_SetMassDepParam(sScanType, bstrParamID, fStart, fStop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::GetMassDepParam ( _bstr_t bstrParamID, float * pfStart, float * pfStop, float * pfStep ) {
    HRESULT _hr = raw_GetMassDepParam(bstrParamID, pfStart, pfStop, pfStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::GetFirstMassDepParam ( BSTR * pbstrParamID, float * pfStart, float * pfStop, float * pfStep ) {
    HRESULT _hr = raw_GetFirstMassDepParam(pbstrParamID, pfStart, pfStop, pfStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::GetNextMassDepParam ( BSTR * pbstrParamID, float * pfStart, float * pfStop, float * pfStep ) {
    HRESULT _hr = raw_GetNextMassDepParam(pbstrParamID, pfStart, pfStop, pfStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::IsParamMassDep ( _bstr_t bstrParamID, long * pbMassDep ) {
    HRESULT _hr = raw_IsParamMassDep(bstrParamID, pbMassDep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICompoundDependentParams::CopyCompatibleParameters ( IUnknown * punkIPDC ) {
    HRESULT _hr = raw_CopyCompatibleParameters(punkIPDC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICompoundDependentParams2 wrapper method implementations
//

inline HRESULT ICompoundDependentParams2::RevertPolarity ( short sScanType, double dFixedMass ) {
    HRESULT _hr = raw_RevertPolarity(sScanType, dFixedMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMassSpecConfigSpec wrapper method implementations
//

inline HRESULT IMassSpecConfigSpec::SetNumOfQuads ( short numQuads ) {
    HRESULT _hr = raw_SetNumOfQuads(numQuads);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassSpecConfigSpec::SetMassSpecModel ( long model ) {
    HRESULT _hr = raw_SetMassSpecModel(model);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMassSpecConfigSpec::SetConfigTableVersion ( _bstr_t configVer ) {
    HRESULT _hr = raw_SetConfigTableVersion(configVer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IMassSpecConfigSpec::GetNumOfQuads ( ) {
    short _result = 0;
    HRESULT _hr = raw_GetNumOfQuads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMassSpecConfigSpec::GetMassSpecModel ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetMassSpecModel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMassSpecConfigSpec::GetConfigTableVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetConfigTableVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMassSpecConfigSpec::SetMinQ1Mass ( double dMinQ1Mass ) {
    HRESULT _hr = raw_SetMinQ1Mass(dMinQ1Mass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinQ1Mass ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinQ1Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMaxQ1Mass ( double dMaxQ1Mass ) {
    HRESULT _hr = raw_SetMaxQ1Mass(dMaxQ1Mass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMaxQ1Mass ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxQ1Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinQ3Mass ( double dMinQ3Mass ) {
    HRESULT _hr = raw_SetMinQ3Mass(dMinQ3Mass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinQ3Mass ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinQ3Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMaxQ3Mass ( double dMaxQ3Mass ) {
    HRESULT _hr = raw_SetMaxQ3Mass(dMaxQ3Mass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMaxQ3Mass ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxQ3Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinMassStep ( double dMinMassStep ) {
    HRESULT _hr = raw_SetMinMassStep(dMinMassStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinMassStep ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinMassStep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinCADGasEvacTime ( double dMinCADGasEvacTime ) {
    HRESULT _hr = raw_SetMinCADGasEvacTime(dMinCADGasEvacTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinCADGasEvacTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinCADGasEvacTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinCADGasInjectTime ( double dMinCADGasInjectTime ) {
    HRESULT _hr = raw_SetMinCADGasInjectTime(dMinCADGasInjectTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinCADGasInjectTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinCADGasInjectTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinPolReversalTime ( double dMinPolReversalTime ) {
    HRESULT _hr = raw_SetMinPolReversalTime(dMinPolReversalTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinPolReversalTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinPolReversalTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinPauseBtwnMassRanges ( double dMinPauseBtwnMassRanges ) {
    HRESULT _hr = raw_SetMinPauseBtwnMassRanges(dMinPauseBtwnMassRanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMinPauseBtwnMassRanges ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinPauseBtwnMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMinDwellTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMinDwellTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMassSpecConfigSpec::SetMinDwellTime ( double MinDwellTime ) {
    HRESULT _hr = raw_SetMinDwellTime(MinDwellTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IMassSpecConfigSpec::GetMaxPeriodDelay ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxPeriodDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxPeriodDuration ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxPeriodDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxDwellTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxDwellTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxSettlingTime ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxSettlingTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxIntensityThreshold ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxIntensityThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxPauseBetweenMassRanges ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxPauseBetweenMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxStepSize ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxStepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IMassSpecConfigSpec::GetMaxMassDefect ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetMaxMassDefect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IIonSourceTypeSpec wrapper method implementations
//

inline HRESULT IIonSourceTypeSpec::SetSourceType ( int ionSrc ) {
    HRESULT _hr = raw_SetSourceType(ionSrc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIonSourceTypeSpec::SetIonSprayVoltageValid ( long bValid ) {
    HRESULT _hr = raw_SetIonSprayVoltageValid(bValid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIonSourceTypeSpec::SetTemperatureValid ( long bValid ) {
    HRESULT _hr = raw_SetTemperatureValid(bValid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIonSourceTypeSpec::SetNebCurrentValid ( long bValid ) {
    HRESULT _hr = raw_SetNebCurrentValid(bValid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIonSourceTypeSpec::GetSourceType ( int * pIonSrc ) {
    HRESULT _hr = raw_GetSourceType(pIonSrc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IIonSourceTypeSpec::IsIonSprayVoltageValid ( long * pValid ) {
    HRESULT _hr = raw_IsIonSprayVoltageValid(pValid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IIonSourceTypeSpec::IsNebTemperatureValid ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsNebTemperatureValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IIonSourceTypeSpec::IsNebCurrentValid ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsNebCurrentValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICloneSpecs wrapper method implementations
//

inline HRESULT ICloneSpecs::CloneSpec ( IUnknown * * ppUnkSpecObj ) {
    HRESULT _hr = raw_CloneSpec(ppUnkSpecObj);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICloneSpecs::CopySpec ( IUnknown * pUnkSpecObj ) {
    HRESULT _hr = raw_CopySpec(pUnkSpecObj);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICompareMSConfigInfo wrapper method implementations
//

inline long ICompareMSConfigInfo::IsMSConfigIdentical ( IUnknown * pUnkMSConfig ) {
    long _result = 0;
    HRESULT _hr = raw_IsMSConfigIdentical(pUnkMSConfig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICompareMSConfigInfo::IsMSConfigDifferent ( IUnknown * pUnkMSConfig ) {
    long _result = 0;
    HRESULT _hr = raw_IsMSConfigDifferent(pUnkMSConfig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICompareMSConfigInfo::IsMSConfigEquivalent ( IUnknown * pUnkMSConfig ) {
    long _result = 0;
    HRESULT _hr = raw_IsMSConfigEquivalent(pUnkMSConfig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICompareMSConfigInfo::IsMSConfigIncompatible ( IUnknown * pUnkMSConfig ) {
    long _result = 0;
    HRESULT _hr = raw_IsMSConfigIncompatible(pUnkMSConfig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITOFMassRange wrapper method implementations
//

inline long ITOFMassRange::GetEnhanced ( ) {
    long _result = 0;
    HRESULT _hr = get_Enhanced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFMassRange::PutEnhanced ( long pVal ) {
    HRESULT _hr = put_Enhanced(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITOFMassRange::GetMassRange ( double * center, double * width, long * pEnhanced ) {
    HRESULT _hr = raw_GetMassRange(center, width, pEnhanced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFMassRange::SetMassRange ( double center, double width, long Enhanced ) {
    HRESULT _hr = raw_SetMassRange(center, width, Enhanced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ITOFMassRange::GetstartMass ( ) {
    double _result = 0;
    HRESULT _hr = get_startMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITOFMassRange::GetstopMass ( ) {
    double _result = 0;
    HRESULT _hr = get_stopMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITOFMassRange::GetcenterMass ( ) {
    double _result = 0;
    HRESULT _hr = get_centerMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITOFMassRange::Getwidth ( ) {
    double _result = 0;
    HRESULT _hr = get_width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITOFMassRange::InitMSConfig ( IUnknown * lpUnkConfig ) {
    HRESULT _hr = raw_InitMSConfig(lpUnkConfig);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
