// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (85bc2c35).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wiffqslib\filemanager.tlh
//
// C++ source equivalent of Win32 type library ..\\libs\\analystqs\\FileManager.dll
// compiler-generated file created 07/24/07 at 22:35:44 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AnalystQS {

//
// Forward references and typedefs
//

struct __declspec(uuid("03fc8cf3-9f02-11d1-aff7-00a024942d77"))
/* LIBID */ __FileManagerLib;
struct /* coclass */ FMCore;
struct __declspec(uuid("03fc8d00-9f02-11d1-aff7-00a024942d77"))
/* interface */ IFMCore;
enum EFmanOpenWIFF;
struct __declspec(uuid("7a87a240-a169-11d1-aff7-00a024942d77"))
/* interface */ IFMDae;
enum EFmanFloatFormat;
enum EFmanSampleEnd;
enum EFmanDataFormat;
struct __declspec(uuid("7a87a241-a169-11d1-aff7-00a024942d77"))
/* interface */ IFMProcessing;
struct SFManXICTable;
struct SFManXYFloatFloat;
struct __declspec(uuid("0b463a90-1815-11d2-b008-00a024942d77"))
/* interface */ IFMDev;
struct __declspec(uuid("e8c694d0-27dc-11d2-bff5-00805f290256"))
/* interface */ IFMProcDev;
enum EFmanDevData;
struct __declspec(uuid("2375f790-aa44-11d2-bffe-00805f290256"))
/* interface */ IFMSecurity;
struct __declspec(uuid("2477f790-aa44-11d2-b87e-00815f260256"))
/* interface */ IFMWIFF;
struct /* coclass */ Remote;
struct __declspec(uuid("f5425a71-cb15-11d1-affb-00a024942d77"))
/* interface */ IRemote;
struct __declspec(uuid("91ee6420-cf07-11d1-affb-00a024942d77"))
/* interface */ IFMCallerNotify;
struct /* coclass */ BundlerTsk;
struct __declspec(uuid("9ff45e11-0cfa-11d2-b008-00a024942d77"))
/* interface */ IBundlerTsk;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IFMCore, __uuidof(IFMCore));
_COM_SMARTPTR_TYPEDEF(IFMDae, __uuidof(IFMDae));
_COM_SMARTPTR_TYPEDEF(IFMProcessing, __uuidof(IFMProcessing));
_COM_SMARTPTR_TYPEDEF(IFMDev, __uuidof(IFMDev));
_COM_SMARTPTR_TYPEDEF(IFMProcDev, __uuidof(IFMProcDev));
_COM_SMARTPTR_TYPEDEF(IFMSecurity, __uuidof(IFMSecurity));
_COM_SMARTPTR_TYPEDEF(IFMWIFF, __uuidof(IFMWIFF));
_COM_SMARTPTR_TYPEDEF(IRemote, __uuidof(IRemote));
_COM_SMARTPTR_TYPEDEF(IFMCallerNotify, __uuidof(IFMCallerNotify));
_COM_SMARTPTR_TYPEDEF(IBundlerTsk, __uuidof(IBundlerTsk));

//
// Type library items
//

struct __declspec(uuid("03fc8d01-9f02-11d1-aff7-00a024942d77"))
FMCore;
    // [ default ] interface IFMCore
    // interface IFMDae
    // interface IFMProcessing
    // interface IFMDev
    // interface IFMProcDev
    // interface IFMSecurity
    // interface IFMWIFF

enum EFmanOpenWIFF
{
    FMAN_OPEN_RDONLY = 1,
    FMAN_OPEN_RDWR = 2,
    FMAN_OPEN_EXCLUSIVE = 256,
    FMAN_OPEN_ADMINEXCLUSIVE = 512,
    FMAN_OPEN_ADMINRDONLY = 1025,
    FMAN_OPEN_CREATEIFNEXISTS = 4096
};

struct __declspec(uuid("03fc8d00-9f02-11d1-aff7-00a024942d77"))
IFMCore : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMANCreateWIFF ( );
    HRESULT FMANCloseWIFF ( );
    HRESULT FMANSampleAdd (
        short __MIDL_0015,
        struct IStorage * * __MIDL_0016,
        short * __MIDL_0017,
        IUnknown * * __MIDL_0018 );
    HRESULT FMANNewRec (
        LPWSTR __MIDL_0019,
        long __MIDL_0020,
        LPWSTR __MIDL_0021,
        LPWSTR __MIDL_0022 );
    HRESULT FMANCreateNodataWIFF (
        struct IStorage * * ppStgRoot );
    HRESULT FMANGetRoot (
        struct IStorage * * ppStgRoot );
    HRESULT FMANMethodAdd (
        struct IStorage * * ppStgMethod,
        short * psMethodID );
    HRESULT FMANOpenWiff (
        enum EFmanOpenWIFF eOpenFlags,
        struct IStorage * * ppStgRoot );
    HRESULT FMANReadSample (
        short sSampleID,
        IUnknown * * ppUnk );
    HRESULT FMANValidSamplesCount (
        short * sSamplesCount,
        short * psSamplesCountRT );
    HRESULT FMANCloseNodataWIFF ( );
    HRESULT FMANSampleDelete (
        short sSampleID );
    HRESULT FMANOpenNodataWIFF (
        enum EFmanOpenWIFF eOpenFlags,
        struct IStorage * * ppStgRoot );
    HRESULT FMANCloseSample (
        short sSampleID );
    HRESULT FMANBatchHeaderAdd (
        struct IStorage * * ppStgBatchHeader,
        short * psBatchHeaderID );
    HRESULT FMANBundleFile (
        LPWSTR fileNameSrc,
        LPWSTR fileNameDest,
        long bFailIfExists );
    HRESULT FMANSetDabsInfo2 (
        short sSampleTableID,
        LPWSTR achName,
        LPWSTR achID,
        LPWSTR achVialID,
        short sRackNo,
        LPWSTR achRackID,
        long lDabsExtraSz );
    HRESULT FMANSampleRemove (
        short sSampleTableID );
    HRESULT FMANSetFileCustomProps (
        LPWSTR lptPropName1,
        LPWSTR lptPropVal1,
        LPWSTR lptPropName2,
        LPWSTR lptPropVal2 );
    HRESULT FMANGetFileVersion (
        long * plVersion,
        long * plVersionStored );
    HRESULT FMANGetFiletypeDesciption (
        long lFiletypeID,
        LPWSTR * plpStr );
    HRESULT FMANGetFiletypeExt (
        long lFiletypeID,
        LPWSTR * plpStr );
    HRESULT FMLogString (
        short sSampleTableID,
        LPWSTR pLogStr,
        long lLogType );
    HRESULT FMANDefragmentFile (
        LPWSTR lpFileName );
    HRESULT FMANDeleteWIFF (
        LPWSTR lpFileName,
        long bDeleteRawFiles );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMANCreateWIFF ( ) = 0;
      virtual HRESULT __stdcall raw_FMANCloseWIFF ( ) = 0;
      virtual HRESULT __stdcall raw_FMANSampleAdd (
        short __MIDL_0015,
        struct IStorage * * __MIDL_0016,
        short * __MIDL_0017,
        IUnknown * * __MIDL_0018 ) = 0;
      virtual HRESULT __stdcall raw_FMANNewRec (
        LPWSTR __MIDL_0019,
        long __MIDL_0020,
        LPWSTR __MIDL_0021,
        LPWSTR __MIDL_0022 ) = 0;
      virtual HRESULT __stdcall raw_FMANCreateNodataWIFF (
        struct IStorage * * ppStgRoot ) = 0;
      virtual HRESULT __stdcall raw_FMANGetRoot (
        struct IStorage * * ppStgRoot ) = 0;
      virtual HRESULT __stdcall raw_FMANMethodAdd (
        struct IStorage * * ppStgMethod,
        short * psMethodID ) = 0;
      virtual HRESULT __stdcall raw_FMANOpenWiff (
        enum EFmanOpenWIFF eOpenFlags,
        struct IStorage * * ppStgRoot ) = 0;
      virtual HRESULT __stdcall raw_FMANReadSample (
        short sSampleID,
        IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_FMANValidSamplesCount (
        short * sSamplesCount,
        short * psSamplesCountRT ) = 0;
      virtual HRESULT __stdcall raw_FMANCloseNodataWIFF ( ) = 0;
      virtual HRESULT __stdcall raw_FMANSampleDelete (
        short sSampleID ) = 0;
      virtual HRESULT __stdcall raw_FMANOpenNodataWIFF (
        enum EFmanOpenWIFF eOpenFlags,
        struct IStorage * * ppStgRoot ) = 0;
      virtual HRESULT __stdcall raw_FMANCloseSample (
        short sSampleID ) = 0;
      virtual HRESULT __stdcall raw_FMANBatchHeaderAdd (
        struct IStorage * * ppStgBatchHeader,
        short * psBatchHeaderID ) = 0;
      virtual HRESULT __stdcall raw_FMANBundleFile (
        LPWSTR fileNameSrc,
        LPWSTR fileNameDest,
        long bFailIfExists ) = 0;
      virtual HRESULT __stdcall raw_FMANSetDabsInfo2 (
        short sSampleTableID,
        LPWSTR achName,
        LPWSTR achID,
        LPWSTR achVialID,
        short sRackNo,
        LPWSTR achRackID,
        long lDabsExtraSz ) = 0;
      virtual HRESULT __stdcall raw_FMANSampleRemove (
        short sSampleTableID ) = 0;
      virtual HRESULT __stdcall raw_FMANSetFileCustomProps (
        LPWSTR lptPropName1,
        LPWSTR lptPropVal1,
        LPWSTR lptPropName2,
        LPWSTR lptPropVal2 ) = 0;
      virtual HRESULT __stdcall raw_FMANGetFileVersion (
        long * plVersion,
        long * plVersionStored ) = 0;
      virtual HRESULT __stdcall raw_FMANGetFiletypeDesciption (
        long lFiletypeID,
        LPWSTR * plpStr ) = 0;
      virtual HRESULT __stdcall raw_FMANGetFiletypeExt (
        long lFiletypeID,
        LPWSTR * plpStr ) = 0;
      virtual HRESULT __stdcall raw_FMLogString (
        short sSampleTableID,
        LPWSTR pLogStr,
        long lLogType ) = 0;
      virtual HRESULT __stdcall raw_FMANDefragmentFile (
        LPWSTR lpFileName ) = 0;
      virtual HRESULT __stdcall raw_FMANDeleteWIFF (
        LPWSTR lpFileName,
        long bDeleteRawFiles ) = 0;
};

enum EFmanFloatFormat
{
    FMAN_FLOAT_FORMAT_NONE = 0,
    FMAN_FLOAT_FORMAT_FLOAT = 4,
    FMAN_FLOAT_FORMAT_DOUBLE = 8
};

enum EFmanSampleEnd
{
    FMAN_SAMPLE_END_NORMAL = 1,
    FMAN_SAMPLE_END_ABORT = 2
};

enum EFmanDataFormat
{
    FMAN_DATA_FORMAT_Y = 0,
    FMAN_DATA_FORMAT_XY = 1,
    FMAN_DATA_FORMAT_XYY = 2,
    FMAN_DATA_FORMAT_CG = 3,
    FMAN_DATA_FORMAT_FW = 4,
    FMAN_DATA_FORMAT_XY_LONG = 5,
    FMAN_DATA_FORMAT_XY_LONG_BYTE_FLIP = 6
};

struct __declspec(uuid("7a87a240-a169-11d1-aff7-00a024942d77"))
IFMDae : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMDaeSampleStart (
        short sSampleID,
        enum EFmanFloatFormat eMassFormat,
        enum EFmanFloatFormat eIntesFormat );
    HRESULT FMDaeSampleEnd (
        enum EFmanSampleEnd eReason );
    HRESULT FMDaeAddData (
        double dX,
        double dY,
        double dY2 );
    HRESULT FMDaeAddScanIndex (
        double dTime,
        double dTic );
    HRESULT FMDaeAddPeriod ( );
    HRESULT FMDaeAddUserRange (
        unsigned char * pData,
        long lLength );
    HRESULT FMDaeTableCreate (
        short sSampleID,
        long * plTableID );
    HRESULT FMDaeChangeDataFormat (
        enum EFmanDataFormat eDataFormat );
    HRESULT FMDaeGetRemote (
        IUnknown * * ppRem );
    HRESULT FMDaeTableAddString (
        long lTableID,
        long lTableType,
        LPWSTR lpStr,
        long * plStrIdx );
    HRESULT FMDaeTableClose (
        long lTableID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMDaeSampleStart (
        short sSampleID,
        enum EFmanFloatFormat eMassFormat,
        enum EFmanFloatFormat eIntesFormat ) = 0;
      virtual HRESULT __stdcall raw_FMDaeSampleEnd (
        enum EFmanSampleEnd eReason ) = 0;
      virtual HRESULT __stdcall raw_FMDaeAddData (
        double dX,
        double dY,
        double dY2 ) = 0;
      virtual HRESULT __stdcall raw_FMDaeAddScanIndex (
        double dTime,
        double dTic ) = 0;
      virtual HRESULT __stdcall raw_FMDaeAddPeriod ( ) = 0;
      virtual HRESULT __stdcall raw_FMDaeAddUserRange (
        unsigned char * pData,
        long lLength ) = 0;
      virtual HRESULT __stdcall raw_FMDaeTableCreate (
        short sSampleID,
        long * plTableID ) = 0;
      virtual HRESULT __stdcall raw_FMDaeChangeDataFormat (
        enum EFmanDataFormat eDataFormat ) = 0;
      virtual HRESULT __stdcall raw_FMDaeGetRemote (
        /*[out]*/ IUnknown * * ppRem ) = 0;
      virtual HRESULT __stdcall raw_FMDaeTableAddString (
        long lTableID,
        long lTableType,
        LPWSTR lpStr,
        long * plStrIdx ) = 0;
      virtual HRESULT __stdcall raw_FMDaeTableClose (
        long lTableID ) = 0;
};

#pragma pack(push, 8)

struct SFManXICTable
{
    double fullScanStartMass;
    double fullScanEndMass;
    short simIndex;
    float * intensities;
};

#pragma pack(pop)

#pragma pack(push, 4)

struct SFManXYFloatFloat
{
    float x;
    float y;
};

#pragma pack(pop)

struct __declspec(uuid("7a87a241-a169-11d1-aff7-00a024942d77"))
IFMProcessing : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMProcGetTIC (
        short sSampleID,
        short periodNum,
        short sExperIndex,
        short paramNum,
        unsigned char * * ppData,
        long * plDataElements );
    HRESULT FMProcGetScan (
        short sSampleID,
        short periodNum,
        short sExper,
        long lCycleNum,
        enum EFmanDataFormat eFormatRq,
        unsigned char * * ppScanOut,
        long * plScanLength );
    HRESULT FMProcGetMethodOA (
        short sSampleID,
        IUnknown * * ppUnk );
    HRESULT FMProcGetNumPeriodsAct (
        short sSampleID,
        short * psNumPeriodsAct );
    HRESULT FMProcGetNumCyclesPerPeriodAct (
        short sSampleID,
        short sPeriod,
        long * plNumCyclesAct );
    HRESULT FMProcGetPeriodAndCycleByTime (
        short sSampleID,
        float fTime,
        short * psPeriod,
        long * plCycle );
    HRESULT FMProcGetTimeForPeriodAndCycle (
        short sSampleID,
        short sPeriod,
        short sExperiment,
        long lCycle,
        float * pfTime );
    HRESULT GetManyXIC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        struct SFManXICTable * xicTable,
        short numXIC,
        float * * times,
        long * numPoints );
    HRESULT GetOneFullScanXIC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        double startMass,
        double endMass,
        float * * times,
        float * * intensities,
        long * numPoints );
    HRESULT GetOneSingleIonXIC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        short simIndex,
        float * * times,
        float * * intensities,
        long * numPoints );
    HRESULT GetDefaultBPC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        struct SFManXYFloatFloat * * chro,
        float * * masses,
        long * numPoints );
    HRESULT GetBPC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        double startMass,
        double endMass,
        struct SFManXYFloatFloat * * chro,
        float * * masses,
        long * numPoints );
    HRESULT GetSIMBPC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        struct SFManXYFloatFloat * * chro,
        short * * indices,
        long * numPoints );
    HRESULT FMProcGetDabsInfoCFStream (
        short sSampleID,
        IUnknown * * ppcfStr,
        long * plQuantInfoSz );
    HRESULT FMProcGetDabsInfo2 (
        short sSampleID,
        short * psMethodID,
        LPWSTR * pSampleName,
        LPWSTR * pSampleID,
        LPWSTR * pVialID,
        short * psRackNo,
        LPWSTR * pRackID,
        long * pAcqTime );
    HRESULT FMProcEnumLogInit (
        short sSampleID,
        long lKeyTypes );
    HRESULT FMProcGetDabsOA (
        short sSampleID,
        IUnknown * * ppUnk );
    HRESULT FMProcReleaseDabsInfoCFStream (
        short sSampleID );
    HRESULT FMProcGetDAMethodOA (
        short sSampleID,
        IUnknown * * ppUnk );
    HRESULT FMProcEnumLogNext (
        short sSampleID,
        LPWSTR * plpStr,
        long * plKeyType,
        long * plTimeOff );
    HRESULT FMProcEnumLogReset (
        short sSampleID );
    HRESULT FMProcGLPTablesLoad (
        short sSampleID,
        long * plTableID );
    HRESULT FMProcGLPTablesFree (
        short sSampleID,
        long lTableID );
    HRESULT FMProcGLPTablesEnumInit (
        short sSampleID,
        long lKeyTypes );
    HRESULT FMProcGLPTablesEnumNext (
        short sSampleID,
        LPWSTR * plpStr,
        long * plKeyType );
    HRESULT FMProcGLPTablesEnumReset (
        short sSampleID );
    HRESULT FMProcTestParamMarshalling (
        IUnknown * pUnkIn,
        long lParam,
        LPWSTR lpParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMProcGetTIC (
        short sSampleID,
        short periodNum,
        short sExperIndex,
        short paramNum,
        unsigned char * * ppData,
        long * plDataElements ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetScan (
        short sSampleID,
        short periodNum,
        short sExper,
        long lCycleNum,
        enum EFmanDataFormat eFormatRq,
        unsigned char * * ppScanOut,
        long * plScanLength ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetMethodOA (
        short sSampleID,
        IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetNumPeriodsAct (
        short sSampleID,
        short * psNumPeriodsAct ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetNumCyclesPerPeriodAct (
        short sSampleID,
        short sPeriod,
        long * plNumCyclesAct ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetPeriodAndCycleByTime (
        short sSampleID,
        float fTime,
        short * psPeriod,
        long * plCycle ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetTimeForPeriodAndCycle (
        short sSampleID,
        short sPeriod,
        short sExperiment,
        long lCycle,
        float * pfTime ) = 0;
      virtual HRESULT __stdcall raw_GetManyXIC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        struct SFManXICTable * xicTable,
        short numXIC,
        float * * times,
        long * numPoints ) = 0;
      virtual HRESULT __stdcall raw_GetOneFullScanXIC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        double startMass,
        double endMass,
        float * * times,
        float * * intensities,
        long * numPoints ) = 0;
      virtual HRESULT __stdcall raw_GetOneSingleIonXIC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        short simIndex,
        float * * times,
        float * * intensities,
        long * numPoints ) = 0;
      virtual HRESULT __stdcall raw_GetDefaultBPC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        struct SFManXYFloatFloat * * chro,
        float * * masses,
        long * numPoints ) = 0;
      virtual HRESULT __stdcall raw_GetBPC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        double startMass,
        double endMass,
        struct SFManXYFloatFloat * * chro,
        float * * masses,
        long * numPoints ) = 0;
      virtual HRESULT __stdcall raw_GetSIMBPC (
        short sampleID,
        short periodNum,
        short exptIndex,
        long startCycle,
        long endCycle,
        struct SFManXYFloatFloat * * chro,
        short * * indices,
        long * numPoints ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetDabsInfoCFStream (
        short sSampleID,
        IUnknown * * ppcfStr,
        long * plQuantInfoSz ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetDabsInfo2 (
        short sSampleID,
        short * psMethodID,
        LPWSTR * pSampleName,
        LPWSTR * pSampleID,
        LPWSTR * pVialID,
        short * psRackNo,
        LPWSTR * pRackID,
        long * pAcqTime ) = 0;
      virtual HRESULT __stdcall raw_FMProcEnumLogInit (
        short sSampleID,
        long lKeyTypes ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetDabsOA (
        short sSampleID,
        IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_FMProcReleaseDabsInfoCFStream (
        short sSampleID ) = 0;
      virtual HRESULT __stdcall raw_FMProcGetDAMethodOA (
        short sSampleID,
        IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_FMProcEnumLogNext (
        short sSampleID,
        LPWSTR * plpStr,
        long * plKeyType,
        long * plTimeOff ) = 0;
      virtual HRESULT __stdcall raw_FMProcEnumLogReset (
        short sSampleID ) = 0;
      virtual HRESULT __stdcall raw_FMProcGLPTablesLoad (
        short sSampleID,
        long * plTableID ) = 0;
      virtual HRESULT __stdcall raw_FMProcGLPTablesFree (
        short sSampleID,
        long lTableID ) = 0;
      virtual HRESULT __stdcall raw_FMProcGLPTablesEnumInit (
        short sSampleID,
        long lKeyTypes ) = 0;
      virtual HRESULT __stdcall raw_FMProcGLPTablesEnumNext (
        short sSampleID,
        LPWSTR * plpStr,
        long * plKeyType ) = 0;
      virtual HRESULT __stdcall raw_FMProcGLPTablesEnumReset (
        short sSampleID ) = 0;
      virtual HRESULT __stdcall raw_FMProcTestParamMarshalling (
        IUnknown * pUnkIn,
        long lParam,
        LPWSTR lpParam ) = 0;
};

struct __declspec(uuid("0b463a90-1815-11d2-b008-00a024942d77"))
IFMDev : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMDevDeviceInit (
        short sSampleID,
        long bIsMSDependent,
        enum EFmanDataFormat eDataFormat,
        LPWSTR lpName,
        LPWSTR lpModel,
        long lType,
        short sNumChannels,
        long * plDevID );
    HRESULT FMDevDeviceExit (
        long devID );
    HRESULT FMDevChannelSet (
        long devID,
        short sChannel,
        LPWSTR lpName,
        LPWSTR lpUnits,
        double dSampleRate,
        float fUserFullScale,
        float fActFullScale,
        long lExpNumScans );
    HRESULT FMDevAcqStart (
        long devID );
    HRESULT FMDevAcqEnd (
        long devID,
        enum EFmanSampleEnd eReason );
    HRESULT FMDevDataAdd (
        long devID,
        double dX,
        double dY,
        long bScanDone );
    HRESULT FMDevFullScanAdd (
        long devID,
        double * pScan,
        long lScanSz );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMDevDeviceInit (
        short sSampleID,
        long bIsMSDependent,
        enum EFmanDataFormat eDataFormat,
        LPWSTR lpName,
        LPWSTR lpModel,
        long lType,
        short sNumChannels,
        /*[out]*/ long * plDevID ) = 0;
      virtual HRESULT __stdcall raw_FMDevDeviceExit (
        long devID ) = 0;
      virtual HRESULT __stdcall raw_FMDevChannelSet (
        long devID,
        short sChannel,
        LPWSTR lpName,
        LPWSTR lpUnits,
        double dSampleRate,
        float fUserFullScale,
        float fActFullScale,
        long lExpNumScans ) = 0;
      virtual HRESULT __stdcall raw_FMDevAcqStart (
        long devID ) = 0;
      virtual HRESULT __stdcall raw_FMDevAcqEnd (
        long devID,
        enum EFmanSampleEnd eReason ) = 0;
      virtual HRESULT __stdcall raw_FMDevDataAdd (
        long devID,
        double dX,
        double dY,
        long bScanDone ) = 0;
      virtual HRESULT __stdcall raw_FMDevFullScanAdd (
        long devID,
        double * pScan,
        long lScanSz ) = 0;
};

enum EFmanDevData
{
    FMAN_CHANNELTIME_NOTIME = 1,
    FMAN_CHANNELTIME_INDEX = 2,
    FMAN_CHANNELTIME_INTERVAL = 3,
    FMAN_CHANNELTIME_STORED = 4
};

struct __declspec(uuid("e8c694d0-27dc-11d2-bff5-00805f290256"))
IFMProcDev : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMProcDevReadDevice (
        short sSampleTableID,
        short sDevID,
        IUnknown * * ppRemDev );
    HRESULT FMProcDevGetDeviceInfo (
        short sSampleTableID,
        short sDevID,
        short * psNumChannels,
        LPWSTR * plpDevName,
        LPWSTR * plpDevModel,
        long * plType );
    HRESULT FMProcDevGetChannelInfo (
        short sSampleTableID,
        short sDevID,
        short sChannel,
        LPWSTR * plpChannelName );
    HRESULT FMProcDevGetChannelData (
        short sSampleTableID,
        short sDevID,
        short sChannel,
        enum EFmanDevData eTimeFormat,
        double * * ppData,
        long * plDataElements,
        double * * ppTime,
        long * plTimeElements );
    HRESULT FMProcDevCloseDevice (
        short sSampleTableID,
        short sDevID );
    HRESULT FMProcDevGetNumDevices (
        short sSampleTableID,
        short * psDevID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMProcDevReadDevice (
        short sSampleTableID,
        short sDevID,
        IUnknown * * ppRemDev ) = 0;
      virtual HRESULT __stdcall raw_FMProcDevGetDeviceInfo (
        short sSampleTableID,
        short sDevID,
        short * psNumChannels,
        LPWSTR * plpDevName,
        LPWSTR * plpDevModel,
        long * plType ) = 0;
      virtual HRESULT __stdcall raw_FMProcDevGetChannelInfo (
        short sSampleTableID,
        short sDevID,
        short sChannel,
        LPWSTR * plpChannelName ) = 0;
      virtual HRESULT __stdcall raw_FMProcDevGetChannelData (
        short sSampleTableID,
        short sDevID,
        short sChannel,
        enum EFmanDevData eTimeFormat,
        double * * ppData,
        long * plDataElements,
        double * * ppTime,
        long * plTimeElements ) = 0;
      virtual HRESULT __stdcall raw_FMProcDevCloseDevice (
        short sSampleTableID,
        short sDevID ) = 0;
      virtual HRESULT __stdcall raw_FMProcDevGetNumDevices (
        short sSampleTableID,
        short * psDevID ) = 0;
};

struct __declspec(uuid("2375f790-aa44-11d2-bffe-00805f290256"))
IFMSecurity : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMSecurityExportFlagGet (
        LPWSTR fileName,
        long * plExportFlag );
    HRESULT FMSecurityExportFlagChange (
        LPWSTR fileNameSrc,
        long lExportFlag,
        LPWSTR lpAdminKey );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMSecurityExportFlagGet (
        LPWSTR fileName,
        long * plExportFlag ) = 0;
      virtual HRESULT __stdcall raw_FMSecurityExportFlagChange (
        LPWSTR fileNameSrc,
        long lExportFlag,
        LPWSTR lpAdminKey ) = 0;
};

struct __declspec(uuid("2477f790-aa44-11d2-b87e-00815f260256"))
IFMWIFF : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT FMANGetWIFFDriverFileHandle (
        unsigned long * pdwFileHandle );
    HRESULT FMANWIFFMethodAdd (
        IUnknown * pPersistStg,
        short * psMethodID );
    HRESULT FMANWIFFSampleAdd (
        short MethodID,
        short * pdSampleID );
    HRESULT FMANWIFFGetWTS (
        IUnknown * * ppUnk );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FMANGetWIFFDriverFileHandle (
        unsigned long * pdwFileHandle ) = 0;
      virtual HRESULT __stdcall raw_FMANWIFFMethodAdd (
        IUnknown * pPersistStg,
        short * psMethodID ) = 0;
      virtual HRESULT __stdcall raw_FMANWIFFSampleAdd (
        short MethodID,
        short * pdSampleID ) = 0;
      virtual HRESULT __stdcall raw_FMANWIFFGetWTS (
        /*[out]*/ IUnknown * * ppUnk ) = 0;
};

struct __declspec(uuid("f5425a72-cb15-11d1-affb-00a024942d77"))
Remote;
    // [ default ] interface IRemote
    // [ default, source ] interface IFMCallerNotify

struct __declspec(uuid("f5425a71-cb15-11d1-affb-00a024942d77"))
IRemote : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT UpdateSet (
        long lScanNum,
        long lSize,
        char * pData,
        long lParam );
    HRESULT UpdateCancel ( );
    HRESULT Init (
        unsigned char * pDaq,
        long bIsProcessing,
        long lParam );
    HRESULT RqUpdateProcessing (
        long lParam );
    HRESULT GetData (
        short sVal,
        long * plParam );
    HRESULT DevInit (
        unsigned char * pDaq,
        long bIsProcessing,
        long lParam );
    HRESULT DevRqUpdateProcessing (
        long lParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UpdateSet (
        /*[in]*/ long lScanNum,
        /*[in]*/ long lSize,
        /*[in]*/ char * pData,
        /*[in]*/ long lParam ) = 0;
      virtual HRESULT __stdcall raw_UpdateCancel ( ) = 0;
      virtual HRESULT __stdcall raw_Init (
        unsigned char * pDaq,
        long bIsProcessing,
        long lParam ) = 0;
      virtual HRESULT __stdcall raw_RqUpdateProcessing (
        long lParam ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in]*/ short sVal,
        /*[out]*/ long * plParam ) = 0;
      virtual HRESULT __stdcall raw_DevInit (
        unsigned char * pDaq,
        long bIsProcessing,
        long lParam ) = 0;
      virtual HRESULT __stdcall raw_DevRqUpdateProcessing (
        long lParam ) = 0;
};

struct __declspec(uuid("91ee6420-cf07-11d1-affb-00a024942d77"))
IFMCallerNotify : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT RemoteSendData (
        long size,
        unsigned char * data );
    HRESULT RemoteNotify (
        long lParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RemoteSendData (
        /*[in]*/ long size,
        /*[in]*/ unsigned char * data ) = 0;
      virtual HRESULT __stdcall raw_RemoteNotify (
        /*[in]*/ long lParam ) = 0;
};

struct __declspec(uuid("9ff45e12-0cfa-11d2-b008-00a024942d77"))
BundlerTsk;
    // [ default ] interface IBundlerTsk

struct __declspec(uuid("9ff45e11-0cfa-11d2-b008-00a024942d77"))
IBundlerTsk : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BundleFile (
        LPWSTR fName );
    HRESULT AddFile (
        LPWSTR fName );
    HRESULT RemoveFile (
        LPWSTR fName );
    HRESULT InitBundler (
        long lTimeRetry,
        long bForceBundle,
        LPWSTR srcDir,
        LPWSTR dstDir,
        IUnknown * pQSUnk );
    HRESULT ExitBundler (
        long lParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BundleFile (
        LPWSTR fName ) = 0;
      virtual HRESULT __stdcall raw_AddFile (
        LPWSTR fName ) = 0;
      virtual HRESULT __stdcall raw_RemoveFile (
        LPWSTR fName ) = 0;
      virtual HRESULT __stdcall raw_InitBundler (
        long lTimeRetry,
        long bForceBundle,
        LPWSTR srcDir,
        LPWSTR dstDir,
        IUnknown * pQSUnk ) = 0;
      virtual HRESULT __stdcall raw_ExitBundler (
        long lParam ) = 0;
};

//
// Wrapper method implementations
//

#include "wiffqslib\filemanager.tli"

} // namespace AnalystQS

#pragma pack(pop)
