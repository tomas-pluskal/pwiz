// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (be69e9c8).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wiffqslib\exploredataobjects.tli
//
// Wrapper implementations for Win32 type library ..\\libs\\analystqs\\ExploreDataObjects.dll
// compiler-generated file created 07/24/07 at 22:35:43 - DO NOT EDIT!

#pragma once

//
// dispinterface _DataEvents wrapper method implementations
//

inline HRESULT _DataEvents::DataChanged ( long firstPoint, long lastPoint ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", firstPoint, lastPoint);
}

inline HRESULT _DataEvents::NewData ( long firstPoint, long lastPoint ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", firstPoint, lastPoint);
}

inline HRESULT _DataEvents::DataTitleChanged ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _DataEvents::XAxisRangeChanged ( ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _DataEvents::AllDataHasBeenRemoved ( ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT _DataEvents::DataHasBeenSorted ( ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface _DualDataEvents wrapper method implementations
//

inline HRESULT _DualDataEvents::DataChanged ( long firstPoint, long lastPoint ) {
    HRESULT _hr = raw_DataChanged(firstPoint, lastPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DualDataEvents::NewData ( long firstPoint, long lastPoint ) {
    HRESULT _hr = raw_NewData(firstPoint, lastPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DualDataEvents::DataTitleChanged ( ) {
    HRESULT _hr = raw_DataTitleChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DualDataEvents::XAxisRangeChanged ( ) {
    HRESULT _hr = raw_XAxisRangeChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DualDataEvents::AllDataHasBeenRemoved ( ) {
    HRESULT _hr = raw_AllDataHasBeenRemoved();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _DualDataEvents::DataHasBeenSorted ( ) {
    HRESULT _hr = raw_DataHasBeenSorted();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _FMANChromDataEvents wrapper method implementations
//

inline HRESULT _FMANChromDataEvents::PeriodEnded ( long period, long lastPointInPeriod ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", period, lastPointInPeriod);
}

//
// interface _FMANWiffFileEvents wrapper method implementations
//

inline HRESULT _FMANWiffFileEvents::NewData ( long sample, long period, long cycle ) {
    HRESULT _hr = raw_NewData(sample, period, cycle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _FMANWiffFileEvents::AcquisitionComplete ( long sample ) {
    HRESULT _hr = raw_AcquisitionComplete(sample);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _FMANWiffFileEvents::WiffFileChanged ( ) {
    HRESULT _hr = raw_WiffFileChanged();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IXYData wrapper method implementations
//

inline HRESULT IXYData::ReadFromTextFile ( _bstr_t fileName ) {
    HRESULT _hr = raw_ReadFromTextFile(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IXYData::GetDataPointXValue ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetDataPointXValue(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IXYData::GetDataPointYValue ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetDataPointYValue(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXYData::GetNumberOfDataPoints ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfDataPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IXYData::SaveToTextFile ( _bstr_t fileName ) {
    HRESULT _hr = raw_SaveToTextFile(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IXYData::GetXAxisUnits ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XAxisUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXYData::PutXAxisUnits ( _bstr_t pVal ) {
    HRESULT _hr = put_XAxisUnits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXYData::GetYAxisUnits ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YAxisUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXYData::PutYAxisUnits ( _bstr_t pVal ) {
    HRESULT _hr = put_YAxisUnits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXYData::GetXAxisTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XAxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXYData::PutXAxisTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_XAxisTitle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXYData::GetYAxisTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YAxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXYData::PutYAxisTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_YAxisTitle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IXYData::GetDataTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IXYData::PutDataTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_DataTitle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXYData::SetDataPoint ( long pointNumber, double xValue, double yValue ) {
    HRESULT _hr = raw_SetDataPoint(pointNumber, xValue, yValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::AppendDataPoint ( double xValue, double yValue ) {
    HRESULT _hr = raw_AppendDataPoint(xValue, yValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IXYData::GetClosestXValue ( double requestedXValue, enum WhichClosestPointType whichClosestPoint ) {
    double _result = 0;
    HRESULT _hr = raw_GetClosestXValue(requestedXValue, whichClosestPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IXYData::GetYValueForXValue ( double xValue, enum WhichClosestPointType whichClosestPoint ) {
    double _result = 0;
    HRESULT _hr = raw_GetYValueForXValue(xValue, whichClosestPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IXYData::GetDataPoint ( long pointNumber, double * xValue, double * yValue ) {
    HRESULT _hr = raw_GetDataPoint(pointNumber, xValue, yValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::GetXValueRange ( double * minimumXValue, double * maximumXValue ) {
    HRESULT _hr = raw_GetXValueRange(minimumXValue, maximumXValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::GetYValueRange ( double * minimumYValue, double * maximumYValue ) {
    HRESULT _hr = raw_GetYValueRange(minimumYValue, maximumYValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::GetYValueRangeForXValueRange ( double minimumXValue, double maximumXValue, long * pointWithMinimumYValue, long * pointWithMaximumYValue ) {
    HRESULT _hr = raw_GetYValueRangeForXValueRange(minimumXValue, maximumXValue, pointWithMinimumYValue, pointWithMaximumYValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::AppendToTitle ( _bstr_t stringToAppend ) {
    HRESULT _hr = raw_AppendToTitle(stringToAppend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::GetClosestPointNumberForXValue ( double xValue, enum WhichClosestPointType whichClosestPoint, long * pointNumber ) {
    HRESULT _hr = raw_GetClosestPointNumberForXValue(xValue, whichClosestPoint, pointNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::RemoveAllDataPoints ( ) {
    HRESULT _hr = raw_RemoveAllDataPoints();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IXYData::GetStepSize ( ) {
    double _result = 0;
    HRESULT _hr = get_StepSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXYData::PutStepSize ( double pVal ) {
    HRESULT _hr = put_StepSize(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXYData::Add ( IUnknown * pOtherIUnknown, double toleranceForXValues ) {
    HRESULT _hr = raw_Add(pOtherIUnknown, toleranceForXValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::SetDataEventsStatus ( VARIANT_BOOL generateEvents ) {
    HRESULT _hr = raw_SetDataEventsStatus(generateEvents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::SetNumberOfDataPoints ( long numberOfDataPoints ) {
    HRESULT _hr = raw_SetNumberOfDataPoints(numberOfDataPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IXYData::GetXValuesAreSorted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_XValuesAreSorted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXYData::PutXValuesAreSorted ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_XValuesAreSorted(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXYData::SetDataPointXValue ( long pointNumber, double xValue ) {
    HRESULT _hr = raw_SetDataPointXValue(pointNumber, xValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::SetDataPointYValue ( long pointNumber, double yValue ) {
    HRESULT _hr = raw_SetDataPointYValue(pointNumber, yValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::Threshold ( double minimumYValue ) {
    HRESULT _hr = raw_Threshold(minimumYValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IXYData::Copy ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IXYData::Subtract ( IUnknown * pOtherIUnknown, double toleranceForXValues, long keepNegativeValues ) {
    HRESULT _hr = raw_Subtract(pOtherIUnknown, toleranceForXValues, keepNegativeValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::GetXAxisRange ( double * minimumXValue, double * maximumXValue ) {
    HRESULT _hr = raw_GetXAxisRange(minimumXValue, maximumXValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::GetStepSize ( long pointNumber, double * StepSize, long * pointWhereItChanges ) {
    HRESULT _hr = raw_GetStepSize(pointNumber, StepSize, pointWhereItChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXYData::GetSortDataPointsWhenAppended ( ) {
    long _result = 0;
    HRESULT _hr = get_SortDataPointsWhenAppended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXYData::PutSortDataPointsWhenAppended ( long pVal ) {
    HRESULT _hr = put_SortDataPointsWhenAppended(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXYData::SortData ( long sortXValues, long sortAscending ) {
    HRESULT _hr = raw_SortData(sortXValues, sortAscending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::UpdateInternalStateAfterCopy ( ) {
    HRESULT _hr = raw_UpdateInternalStateAfterCopy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::SetUserValue ( long pointNumber, long userValue ) {
    HRESULT _hr = raw_SetUserValue(pointNumber, userValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXYData::GetUserValue ( long pointNumber ) {
    long _result = 0;
    HRESULT _hr = raw_GetUserValue(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IXYData::UserValuesHaveBeenSet ( ) {
    long _result = 0;
    HRESULT _hr = raw_UserValuesHaveBeenSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IXYData::SetXAxisOffset ( double offsetValue ) {
    HRESULT _hr = raw_SetXAxisOffset(offsetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::AddHistoryString ( _bstr_t historyString ) {
    HRESULT _hr = raw_AddHistoryString(historyString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXYData::GetNumberOfHistoryStrings ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfHistoryStrings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXYData::GetHistoryString ( long stringNumber ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHistoryString(stringNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IXYData::GetXAxisOffset ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetXAxisOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IXYData::GetObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IXYData::_LookupFieldValue ( long fieldID ) {
    BSTR _result = 0;
    HRESULT _hr = raw__LookupFieldValue(fieldID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IXYData::SetExpectedNumberOfDataPoints ( long numberOfDataPoints ) {
    HRESULT _hr = raw_SetExpectedNumberOfDataPoints(numberOfDataPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::FindPeakWidthAtSpecifiedHeight ( double xValueOfPeakTop, double peakHeightAsPercent, double * xValueOfLeftSide, double * xValueOfRightSide ) {
    HRESULT _hr = raw_FindPeakWidthAtSpecifiedHeight(xValueOfPeakTop, peakHeightAsPercent, xValueOfLeftSide, xValueOfRightSide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IXYData::SetGraphType ( long newVal ) {
    HRESULT _hr = raw_SetGraphType(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IXYData::GetGraphType ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetGraphType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISpecData wrapper method implementations
//

inline enum SpectrumType ISpecData::GetSpectrumType ( ) {
    enum SpectrumType _result;
    HRESULT _hr = get_SpectrumType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpecData::PutSpectrumType ( enum SpectrumType pVal ) {
    HRESULT _hr = put_SpectrumType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr ISpecData::GetContainedObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ContainedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline void ISpecData::PutContainedObject ( IUnknown * pVal ) {
    HRESULT _hr = put_ContainedObject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISpecData::GetIsCentroided ( ) {
    long _result = 0;
    HRESULT _hr = get_IsCentroided(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISpecData::PutIsCentroided ( long pVal ) {
    HRESULT _hr = put_IsCentroided(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ISpecData::GetDataPointWidth ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetDataPointWidth(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISpecData::SetDataPointWidth ( long pointNumber, double width ) {
    HRESULT _hr = raw_SetDataPointWidth(pointNumber, width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecData::GetXYDataObject ( struct IXYData * * pIXYData ) {
    HRESULT _hr = raw_GetXYDataObject(pIXYData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFMANSpecData wrapper method implementations
//

inline HRESULT IFMANSpecData::SetSpectrum ( long sample, long period, long experiment, float startTime, float endTime ) {
    HRESULT _hr = raw_SetSpectrum(sample, period, experiment, startTime, endTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IFMANSpecData::GetStartMass ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetStartMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IFMANSpecData::GetStopMass ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetStopMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANSpecData::GetQ1Mass ( long pointNumber, double * theMass ) {
    HRESULT _hr = raw_GetQ1Mass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::GetQ3Mass ( long pointNumber, double * theMass ) {
    HRESULT _hr = raw_GetQ3Mass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFMANSpecData::GetWiffFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WiffFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IFMANSpecData::PutWiffFileName ( _bstr_t pVal ) {
    HRESULT _hr = put_WiffFileName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IFMANSpecData::GetSampleNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetSampleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANSpecData::SetSampleNumber ( long sampleNumber ) {
    HRESULT _hr = raw_SetSampleNumber(sampleNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::GetSIMMass ( long pointNumber, double * theMass ) {
    HRESULT _hr = raw_GetSIMMass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::SetQ1Mass ( long pointNumber, double theMass ) {
    HRESULT _hr = raw_SetQ1Mass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::SetQ3Mass ( long pointNumber, double theMass ) {
    HRESULT _hr = raw_SetQ3Mass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::SetSIMMass ( long pointNumber, double theMass ) {
    HRESULT _hr = raw_SetSIMMass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::MoveSpectrum ( IDispatch * chromatogramGeneratedFrom, float startTime, float endTime, long onlyIfSingleCycle, IUnknown * pIUnknownBackgroundSubtractDataObject ) {
    HRESULT _hr = raw_MoveSpectrum(chromatogramGeneratedFrom, startTime, endTime, onlyIfSingleCycle, pIUnknownBackgroundSubtractDataObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANSpecData::GetExperimentNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetExperimentNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANSpecData::GetPeriodNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPeriodNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANSpecData::SetPeriodNumber ( long periodNumber ) {
    HRESULT _hr = raw_SetPeriodNumber(periodNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::SetExperimentNumber ( long experimentNumber ) {
    HRESULT _hr = raw_SetExperimentNumber(experimentNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IFMANSpecData::GetWiffFileObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetWiffFileObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IFMANSpecData::GetScanInfo ( short * scanType, short * scanMode, long * isNegativePolarity, short * q1Resolution, short * q3Resolution ) {
    HRESULT _hr = raw_GetScanInfo(scanType, scanMode, isNegativePolarity, q1Resolution, q3Resolution);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFMANSpecData::GetStartTime ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFMANSpecData::GetEndTime ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetEndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANSpecData::GetShowLastScan ( ) {
    long _result = 0;
    HRESULT _hr = get_ShowLastScan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IFMANSpecData::PutShowLastScan ( long pVal ) {
    HRESULT _hr = put_ShowLastScan(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IFMANSpecData::SetCycleDependentSpectrum ( long sample, long startCycle, long endCycle ) {
    HRESULT _hr = raw_SetCycleDependentSpectrum(sample, startCycle, endCycle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANSpecData::GetNumberOfMassRanges ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANSpecData::GetNumberOfScans ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfScans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANSpecData::_SetStartAndEndTime ( float startTime, float endTime ) {
    HRESULT _hr = raw__SetStartAndEndTime(startTime, endTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::SetDADSpectrum ( long sample, float startTime, float endTime ) {
    HRESULT _hr = raw_SetDADSpectrum(sample, startTime, endTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFMANSpecData::GetDADSpectrumStartTime ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetDADSpectrumStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float IFMANSpecData::GetDADSpectrumStopTime ( ) {
    float _result = 0;
    HRESULT _hr = raw_GetDADSpectrumStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANSpecData::GetDADNumberOfScans ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDADNumberOfScans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANSpecData::GetWaveLengthRange ( float * startWaveLength, float * endWaveLength, float * stepWaveLength ) {
    HRESULT _hr = raw_GetWaveLengthRange(startWaveLength, endWaveLength, stepWaveLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANSpecData::GetDADOperatingMode ( short * operatingMode ) {
    HRESULT _hr = raw_GetDADOperatingMode(operatingMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChromData wrapper method implementations
//

inline enum ChromatogramType IChromData::GetChromatogramType ( ) {
    enum ChromatogramType _result;
    HRESULT _hr = get_ChromatogramType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChromData::PutChromatogramType ( enum ChromatogramType pVal ) {
    HRESULT _hr = put_ChromatogramType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TimeAxisUnitsType IChromData::GetTimeAxisUnits ( ) {
    enum TimeAxisUnitsType _result;
    HRESULT _hr = get_TimeAxisUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChromData::PutTimeAxisUnits ( enum TimeAxisUnitsType pVal ) {
    HRESULT _hr = put_TimeAxisUnits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IChromData::GetXValueInMS ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetXValueInMS(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IChromData::GetXValueInSec ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetXValueInSec(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IChromData::GetXValueInMin ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetXValueInMin(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IChromData::GetXValueInHours ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetXValueInHours(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IChromData::GetContainedObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ContainedObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline void IChromData::PutContainedObject ( IUnknown * pVal ) {
    HRESULT _hr = put_ContainedObject(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IChromData::GetXYDataObject ( struct IXYData * * pIXYData ) {
    HRESULT _hr = raw_GetXYDataObject(pIXYData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IChromData::GetPeakList ( double backgroundStartTime, double backgroundEndTime ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPeakList(backgroundStartTime, backgroundEndTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFMANChromData wrapper method implementations
//

inline HRESULT IFMANChromData::SetToTIC ( long sample, long period, long experiment ) {
    HRESULT _hr = raw_SetToTIC(sample, period, experiment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetToXIC ( long sample, long period, long experiment, double startMass, double stopMass ) {
    HRESULT _hr = raw_SetToXIC(sample, period, experiment, startMass, stopMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetToBPC ( long sample, long period, long experiment, double startTime, double endTime, double startMass, double stopMass, double massTolerance ) {
    HRESULT _hr = raw_SetToBPC(sample, period, experiment, startTime, endTime, startMass, stopMass, massTolerance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetToADC ( long sample, long deviceID, long channel ) {
    HRESULT _hr = raw_SetToADC(sample, deviceID, channel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANChromData::GetNumberOfPeriods ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfPeriods(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANChromData::GetNumberOfExperiments ( long period ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfExperiments(period, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFMANChromData::GetWiffFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WiffFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IFMANChromData::PutWiffFileName ( _bstr_t pVal ) {
    HRESULT _hr = put_WiffFileName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IFMANChromData::GetSampleNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetSampleNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANChromData::SetSampleNumber ( long sampleNumber ) {
    HRESULT _hr = raw_SetSampleNumber(sampleNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::GetPeriodRange ( long periodNumber, long * startOfPeriodPointNumber, long * endOfPeriodPointNumber ) {
    HRESULT _hr = raw_GetPeriodRange(periodNumber, startOfPeriodPointNumber, endOfPeriodPointNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANChromData::GetDataIsBeingAcquired ( ) {
    long _result = 0;
    HRESULT _hr = get_DataIsBeingAcquired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IFMANChromData::PutDataIsBeingAcquired ( long pVal ) {
    HRESULT _hr = put_DataIsBeingAcquired(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IFMANChromData::GetColour ( long pointNumber, long * colour, long * pointWhereItChanges ) {
    HRESULT _hr = raw_GetColour(pointNumber, colour, pointWhereItChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANChromData::GetPeriodNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPeriodNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANChromData::SetPeriodNumber ( long periodNumber ) {
    HRESULT _hr = raw_SetPeriodNumber(periodNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANChromData::GetExperimentNumber ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetExperimentNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANChromData::SetExperimentNumber ( long experimentNumber ) {
    HRESULT _hr = raw_SetExperimentNumber(experimentNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IFMANChromData::GetBasePeakMass ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_GetBasePeakMass(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANChromData::SetBasePeakMass ( long pointNumber, double theMass ) {
    HRESULT _hr = raw_SetBasePeakMass(pointNumber, theMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetToXICZeroWidth ( long sample, long period, long experiment, short simIndex ) {
    HRESULT _hr = raw_SetToXICZeroWidth(sample, period, experiment, simIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IFMANChromData::GetWiffFileObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetWiffFileObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IFMANChromData::GetMassRange ( double * startMass, double * stopMass ) {
    HRESULT _hr = raw_GetMassRange(startMass, stopMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetBasePeakMassTolerance ( double massTolerance ) {
    HRESULT _hr = raw_SetBasePeakMassTolerance(massTolerance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IFMANChromData::GetBasePeakMassTolerance ( ) {
    double _result = 0;
    HRESULT _hr = raw_GetBasePeakMassTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANChromData::SetNumberOfPeriods ( long numberOfPeriods ) {
    HRESULT _hr = raw_SetNumberOfPeriods(numberOfPeriods);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetDeviceID ( long deviceID ) {
    HRESULT _hr = raw_SetDeviceID(deviceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetChannelNumber ( long channelNumber ) {
    HRESULT _hr = raw_SetChannelNumber(channelNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::DisplayCycleDepParamOnXAxis ( long displayFirstOne, _bstr_t paramId ) {
    HRESULT _hr = raw_DisplayCycleDepParamOnXAxis(displayFirstOne, paramId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::_SetStartAndStopMass ( double startMass, double stopMass ) {
    HRESULT _hr = raw__SetStartAndStopMass(startMass, stopMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::_SetSIMIndex ( long simIndex ) {
    HRESULT _hr = raw__SetSIMIndex(simIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::_SetCycleDependentStartAndStep ( double startValue, double stepValue ) {
    HRESULT _hr = raw__SetCycleDependentStartAndStep(startValue, stepValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::GetDeviceAndChannelID ( long * deviceID, long * channelNumber ) {
    HRESULT _hr = raw_GetDeviceAndChannelID(deviceID, channelNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetToDADTWC ( long sample, long deviceID ) {
    HRESULT _hr = raw_SetToDADTWC(sample, deviceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetToDADXWC ( long sample, long devID, double startWaveLength, double stopWaveLength ) {
    HRESULT _hr = raw_SetToDADXWC(sample, devID, startWaveLength, stopWaveLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::GetDADDeviceID ( long sample, long * deviceID ) {
    HRESULT _hr = raw_GetDADDeviceID(sample, deviceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::GetStartAndStopWaveLengths ( float * startWaveLength, float * stopWaveLength ) {
    HRESULT _hr = raw_GetStartAndStopWaveLengths(startWaveLength, stopWaveLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANChromData::SetStartAndStopWaveLengths ( float startWaveLength, float stopWaveLength ) {
    HRESULT _hr = raw_SetStartAndStopWaveLengths(startWaveLength, stopWaveLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IContourData wrapper method implementations
//

inline long IContourData::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IContourData::GetItem ( long n ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(n, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IContourData::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _bstr_t IContourData::GetWiffFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WiffFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IContourData::PutWiffFileName ( _bstr_t pVal ) {
    HRESULT _hr = put_WiffFileName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IContourData::SetContour ( double dStartTime, double dEndTime, long nSample, long lPeriod, long lExperiment ) {
    HRESULT _hr = raw_SetContour(dStartTime, dEndTime, nSample, lPeriod, lExperiment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IContourData::GetActualStartTime ( ) {
    double _result = 0;
    HRESULT _hr = get_ActualStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IContourData::GetActualStopTime ( ) {
    double _result = 0;
    HRESULT _hr = get_ActualStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IContourData::GetActualStartCycle ( ) {
    long _result = 0;
    HRESULT _hr = get_ActualStartCycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IContourData::GetActualStopCycle ( ) {
    long _result = 0;
    HRESULT _hr = get_ActualStopCycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IFMANSpecDataPtr IContourData::GetIFMANSpecData ( ) {
    struct IFMANSpecData * _result = 0;
    HRESULT _hr = get_IFMANSpecData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFMANSpecDataPtr(_result, false);
}

inline IFMANChromDataPtr IContourData::GetIFMANChromData ( ) {
    struct IFMANChromData * _result = 0;
    HRESULT _hr = get_IFMANChromData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFMANChromDataPtr(_result, false);
}

inline double IContourData::GetMaxIntensity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourData::ReBinRange ( double dStartMass, double dStopMass ) {
    HRESULT _hr = raw_ReBinRange(dStartMass, dStopMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IContourData::Getsample ( ) {
    long _result = 0;
    HRESULT _hr = get_sample(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourData::GetTitle ( BSTR * pVal ) {
    HRESULT _hr = raw_GetTitle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_DataTitle ( _bstr_t newVal ) {
    HRESULT _hr = raw_put_DataTitle(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::Copy ( IUnknown * * ppCopy ) {
    HRESULT _hr = raw_Copy(ppCopy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_Sample ( long lVal ) {
    HRESULT _hr = raw_put_Sample(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_MaxIntensity ( double dVal ) {
    HRESULT _hr = raw_put_MaxIntensity(dVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_ActualStopCycle ( long lVal ) {
    HRESULT _hr = raw_put_ActualStopCycle(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_ActualStartCycle ( long lVal ) {
    HRESULT _hr = raw_put_ActualStartCycle(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_ActualStartTime ( double dVal ) {
    HRESULT _hr = raw_put_ActualStartTime(dVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_ActualStopTime ( double dVal ) {
    HRESULT _hr = raw_put_ActualStopTime(dVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_Experiment ( long lVal ) {
    HRESULT _hr = raw_put_Experiment(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_Period ( long lVal ) {
    HRESULT _hr = raw_put_Period(lVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_DataYAxisTitle ( _bstr_t newVal ) {
    HRESULT _hr = raw_put_DataYAxisTitle(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_DataXAxisTitle ( _bstr_t newVal ) {
    HRESULT _hr = raw_put_DataXAxisTitle(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetXAxisTitle ( BSTR * pVal ) {
    HRESULT _hr = raw_GetXAxisTitle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetYAxisTitle ( BSTR * pVal ) {
    HRESULT _hr = raw_GetYAxisTitle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::SetDADContour ( double dStartTime, double dStopTime, long nSample, long lPeriod, long lExperiment ) {
    HRESULT _hr = raw_SetDADContour(dStartTime, dStopTime, nSample, lPeriod, lExperiment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_DataXAxisUnits ( _bstr_t newVal ) {
    HRESULT _hr = raw_put_DataXAxisUnits(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_DataYAxisUnits ( _bstr_t newVal ) {
    HRESULT _hr = raw_put_DataYAxisUnits(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetXAxisUnits ( BSTR * pVal ) {
    HRESULT _hr = raw_GetXAxisUnits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetYAxisUnits ( BSTR * pVal ) {
    HRESULT _hr = raw_GetYAxisUnits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetYAxisRange ( double * dMinVal, double * dMaxVal ) {
    HRESULT _hr = raw_GetYAxisRange(dMinVal, dMaxVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetStepSize ( double * dVal ) {
    HRESULT _hr = raw_GetStepSize(dVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::get_ChromatogramType ( enum ChromatogramType * pVal ) {
    HRESULT _hr = raw_get_ChromatogramType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::put_ChromatogramType ( enum ChromatogramType Val ) {
    HRESULT _hr = raw_put_ChromatogramType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IContourData::GetMinIntensity ( ) {
    double _result = 0;
    HRESULT _hr = get_MinIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourData::put_MinIntensity ( double Val ) {
    HRESULT _hr = raw_put_MinIntensity(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IContourData::GetIsNoData ( ) {
    long _result = 0;
    HRESULT _hr = get_IsNoData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourData::put_DataZAxisUnits ( _bstr_t newVal ) {
    HRESULT _hr = raw_put_DataZAxisUnits(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourData::GetZAxisUnits ( BSTR * pVal ) {
    HRESULT _hr = raw_GetZAxisUnits(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IContourData::GetObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline double IContourData::GetRequestedStartTime ( ) {
    double _result = 0;
    HRESULT _hr = get_RequestedStartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IContourData::PutRequestedStartTime ( double pVal ) {
    HRESULT _hr = put_RequestedStartTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IContourData::GetRequestedStopTime ( ) {
    double _result = 0;
    HRESULT _hr = get_RequestedStopTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IContourData::PutRequestedStopTime ( double pVal ) {
    HRESULT _hr = put_RequestedStopTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBinData wrapper method implementations
//

inline HRESULT IBinData::BinAll ( ) {
    HRESULT _hr = raw_BinAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinRange ( double StrMass, double EndMass ) {
    HRESULT _hr = raw_BinRange(StrMass, EndMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinGetDataPoint ( long cPnt, double * xVal, double * yVal ) {
    HRESULT _hr = raw_BinGetDataPoint(cPnt, xVal, yVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IBinData::BinGetNumberOfDataPoints ( ) {
    long _result = 0;
    HRESULT _hr = raw_BinGetNumberOfDataPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IBinData::GetBinDeviceWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_BinDeviceWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBinData::PutBinDeviceWidth ( short pVal ) {
    HRESULT _hr = put_BinDeviceWidth(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IBinData::BinRangeOffset ( long StrPos, long EndPos ) {
    HRESULT _hr = raw_BinRangeOffset(StrPos, EndPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinGetClosestPointNumberForXValue ( double xValue, enum WhichClosestPointType whichClosetPoint, long * pointNumber ) {
    HRESULT _hr = raw_BinGetClosestPointNumberForXValue(xValue, whichClosetPoint, pointNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinGetStepSize ( long pointNumber, double * StepSize, long * pointWhereItChanges ) {
    HRESULT _hr = raw_BinGetStepSize(pointNumber, StepSize, pointWhereItChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinGetYValueRange ( double * minimumYValue, double * maximumYValue ) {
    HRESULT _hr = raw_BinGetYValueRange(minimumYValue, maximumYValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinGetYValueRangeForXValueRange ( double minimumXValue, double maximumXValue, long * pointWithMinimumYValue, long * pointWithMaximumYValue ) {
    HRESULT _hr = raw_BinGetYValueRangeForXValueRange(minimumXValue, maximumXValue, pointWithMinimumYValue, pointWithMaximumYValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::BinGetXAxisRange ( double * minimumXValue, double * maximumXValue ) {
    HRESULT _hr = raw_BinGetXAxisRange(minimumXValue, maximumXValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IBinData::BinConnectNextPoint ( long pos ) {
    short _result = 0;
    HRESULT _hr = raw_BinConnectNextPoint(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBinData::BinGetDataPointXValue ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_BinGetDataPointXValue(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBinData::BinGetDataPointYValue ( long pointNumber ) {
    double _result = 0;
    HRESULT _hr = raw_BinGetDataPointYValue(pointNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IBinData::ReBinRange ( double StrMass, double EndMass ) {
    HRESULT _hr = raw_ReBinRange(StrMass, EndMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBinData::InValidateBin ( ) {
    HRESULT _hr = raw_InValidateBin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IContourCycle wrapper method implementations
//

inline long IContourCycle::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IContourCycle::GetItem ( long n ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(n, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IContourCycle::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IContourCycle::Getcycle ( ) {
    long _result = 0;
    HRESULT _hr = get_cycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IContourCycle::GetTimeInSeconds ( ) {
    double _result = 0;
    HRESULT _hr = get_TimeInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourCycle::AddCycle ( long nCycle, double dTimeInSeconds, long nLengthOfFloatArray, float * pfPoints ) {
    HRESULT _hr = raw_AddCycle(nCycle, dTimeInSeconds, nLengthOfFloatArray, pfPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourCycle::AddCycleFromIBinData ( long nCycle, double dTimeInSeconds, struct IBinData * pIBinData ) {
    HRESULT _hr = raw_AddCycleFromIBinData(nCycle, dTimeInSeconds, pIBinData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IContourCycle::GetMaxIntensity ( ) {
    double _result = 0;
    HRESULT _hr = get_MaxIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourCycle::AddCycleEx ( long nCycle, double dTimeInSeconds, double dStepMass, long nLengthOfFloatArray, float * pfPoints ) {
    HRESULT _hr = raw_AddCycleEx(nCycle, dTimeInSeconds, dStepMass, nLengthOfFloatArray, pfPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourCycle::GetPoints ( float * * pfPoints, short * * pbConnectedPoints, long * nLengtsOfArray ) {
    HRESULT _hr = raw_GetPoints(pfPoints, pbConnectedPoints, nLengtsOfArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IContourCycle::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IContourCycle::AddCycleFromIBinDataEx ( long nCycle, double dTimeInSeconds, struct IBinData * pIBinData ) {
    HRESULT _hr = raw_AddCycleFromIBinDataEx(nCycle, dTimeInSeconds, pIBinData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IContourCycle::AddDADCycle ( long nCycle, double dTimeInSeconds, double dStartWaveLength, double dStopWaveLength, double dStepWaveLength, long lNumberOfDataPoints, float * pfScanData ) {
    HRESULT _hr = raw_AddDADCycle(nCycle, dTimeInSeconds, dStartWaveLength, dStopWaveLength, dStepWaveLength, lNumberOfDataPoints, pfScanData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double IContourCycle::GetMinIntensity ( ) {
    double _result = 0;
    HRESULT _hr = get_MinIntensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IContourCycle::GetIsNoData ( ) {
    long _result = 0;
    HRESULT _hr = get_IsNoData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IContourCyclePoint wrapper method implementations
//

inline double IContourCyclePoint::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IContourCyclePoint::PutMass ( double pVal ) {
    HRESULT _hr = put_Mass(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IContourCyclePoint::GetIntensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Intensity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IContourCyclePoint::PutIntensity ( double pVal ) {
    HRESULT _hr = put_Intensity(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGetRawData wrapper method implementations
//

inline HRESULT IGetRawData::GetRawScanInfo ( long * NumberPnts, VARIANT * dXMass, VARIANT * dYInts, VARIANT * cConPoints ) {
    HRESULT _hr = raw_GetRawScanInfo(NumberPnts, dXMass, dYInts, cConPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGetRawData::GetRawScanXPoints ( long * NumberPnts, VARIANT * dXMass ) {
    HRESULT _hr = raw_GetRawScanXPoints(NumberPnts, dXMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGetRawData::GetRawScanYPoints ( long * NumberPnts, VARIANT * dYInts ) {
    HRESULT _hr = raw_GetRawScanYPoints(NumberPnts, dYInts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGetRawData::GetRawScanXYPoints ( long * NumberPnts, VARIANT * dXMass, VARIANT * dYInts ) {
    HRESULT _hr = raw_GetRawScanXYPoints(NumberPnts, dXMass, dYInts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGetRawData::GetRawScanTOFXYOffset ( long * NumberPnts, VARIANT * dXOffset, VARIANT * dYInts ) {
    HRESULT _hr = raw_GetRawScanTOFXYOffset(NumberPnts, dXOffset, dYInts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGetRawData::GetRawScanTOFXYTime ( long * NumberPnts, VARIANT * dXTime, VARIANT * dYInts ) {
    HRESULT _hr = raw_GetRawScanTOFXYTime(NumberPnts, dXTime, dYInts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGetRawData::GetRawPointer ( long * pCount, double * * ppRawData, long * isLongPointer, double * pCalA, double * pTNt, long * pNumScans ) {
    HRESULT _hr = raw_GetRawPointer(pCount, ppRawData, isLongPointer, pCalA, pTNt, pNumScans);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFastDataAccess wrapper method implementations
//

inline HRESULT IFastDataAccess::GetDataPointFast ( long pointNumber, double * xValue, double * yValue ) {
    HRESULT _hr = raw_GetDataPointFast(pointNumber, xValue, yValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IXYSetDisplay wrapper method implementations
//

inline enum XYDisplayType IXYSetDisplay::GetDisplaySource ( ) {
    enum XYDisplayType _result;
    HRESULT _hr = get_DisplaySource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXYSetDisplay::PutDisplaySource ( enum XYDisplayType pVal ) {
    HRESULT _hr = put_DisplaySource(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IXYSetDisplay::SetTOFData ( IUnknown * ITOFUnknown ) {
    HRESULT _hr = raw_SetTOFData(ITOFUnknown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short IXYSetDisplay::GetIsQuadScan ( ) {
    short _result = 0;
    HRESULT _hr = get_IsQuadScan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IXYSetDisplay::GetIsTOFScan ( ) {
    short _result = 0;
    HRESULT _hr = get_IsTOFScan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IXYSetDisplay::GetIsTOFPreCursor ( ) {
    short _result = 0;
    HRESULT _hr = get_IsTOFPreCursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum ChromDataFormat IXYSetDisplay::GetSavedScanType ( ) {
    enum ChromDataFormat _result;
    HRESULT _hr = get_SavedScanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IXYSetDisplay::PutSavedScanType ( enum ChromDataFormat pVal ) {
    HRESULT _hr = put_SavedScanType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IXYSetDisplay::GetIsTP_TOFScan ( ) {
    short _result = 0;
    HRESULT _hr = get_IsTP_TOFScan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITOFData wrapper method implementations
//

inline HRESULT ITOFData::GetTOFCalibration ( double * CalA, double * TNt ) {
    HRESULT _hr = raw_GetTOFCalibration(CalA, TNt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::ReSetCalibration ( double CalA, double TNt ) {
    HRESULT _hr = raw_ReSetCalibration(CalA, TNt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::SetTOFCalibration ( double CalA, double TNt ) {
    HRESULT _hr = raw_SetTOFCalibration(CalA, TNt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::NumberOfPoints ( long * Size ) {
    HRESULT _hr = raw_NumberOfPoints(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::AddScan ( long nPnts, long * DataPnts, double CalA, double TNt ) {
    HRESULT _hr = raw_AddScan(nPnts, DataPnts, CalA, TNt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::InsertPoint ( long TimePos, long Intensity ) {
    HRESULT _hr = raw_InsertPoint(TimePos, Intensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ITOFData::GetIntensityLimit ( ) {
    long _result = 0;
    HRESULT _hr = get_IntensityLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutIntensityLimit ( long pVal ) {
    HRESULT _hr = put_IntensityLimit(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFData::GetTimeOffset ( long pos ) {
    double _result = 0;
    HRESULT _hr = get_TimeOffset(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TOFDisplayType ITOFData::GetTOFDisplayFormat ( ) {
    enum TOFDisplayType _result;
    HRESULT _hr = get_TOFDisplayFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutTOFDisplayFormat ( enum TOFDisplayType pVal ) {
    HRESULT _hr = put_TOFDisplayFormat(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFData::GetTOFIntensity ( long pos ) {
    double _result = 0;
    HRESULT _hr = get_TOFIntensity(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutTOFIntensity ( long pos, double pVal ) {
    HRESULT _hr = put_TOFIntensity(pos, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITOFData::AppendPoint ( double Time, double Intensity ) {
    HRESULT _hr = raw_AppendPoint(Time, Intensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ITOFData::GetTOFMass ( long pos ) {
    double _result = 0;
    HRESULT _hr = get_TOFMass(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITOFData::GetTOFTime ( long pos ) {
    double _result = 0;
    HRESULT _hr = get_TOFTime(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short ITOFData::GetScansAdded ( ) {
    short _result = 0;
    HRESULT _hr = get_ScansAdded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITOFData::TOF_GetDataPoint ( long pos, double * TimeOffset, double * Intensity ) {
    HRESULT _hr = raw_TOF_GetDataPoint(pos, TimeOffset, Intensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr ITOFData::Copy ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr ITOFData::CopyData ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_CopyData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT ITOFData::SetSize ( long NewSize ) {
    HRESULT _hr = raw_SetSize(NewSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::Trim ( ) {
    HRESULT _hr = raw_Trim();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ITOFData::ConvertMassToOffset ( double Mass ) {
    double _result = 0;
    HRESULT _hr = raw_ConvertMassToOffset(Mass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITOFData::AddScanType ( long nPnts, long * DataPnts, double CalA, double TNt, short eDataFormat ) {
    HRESULT _hr = raw_AddScanType(nPnts, DataPnts, CalA, TNt, eDataFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short ITOFData::GetNumberOfCalibrations ( ) {
    short _result = 0;
    HRESULT _hr = get_NumberOfCalibrations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITOFData::getAveragedTOFIntensity ( long pos, double * averInt ) {
    HRESULT _hr = raw_getAveragedTOFIntensity(pos, averInt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short ITOFData::GetUsePPM ( ) {
    short _result = 0;
    HRESULT _hr = get_UsePPM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutUsePPM ( short pVal ) {
    HRESULT _hr = put_UsePPM(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITOFData::TOFAddOrSubtract ( short addData, IUnknown * pOtherIUnknow, double toleranceForXValues, short keepNegativeValues ) {
    HRESULT _hr = raw_TOFAddOrSubtract(addData, pOtherIUnknow, toleranceForXValues, keepNegativeValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double ITOFData::GetTOFXPoint ( long pos ) {
    double _result = 0;
    HRESULT _hr = get_TOFXPoint(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double ITOFData::GetTOFTimeValue ( long pos ) {
    double _result = 0;
    HRESULT _hr = get_TOFTimeValue(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITOFData::ConvertMassToTimeValue ( double Mass, double * TimValue ) {
    HRESULT _hr = raw_ConvertMassToTimeValue(Mass, TimValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::CopyRawData ( long * lPnts, double * * RawData ) {
    HRESULT _hr = raw_CopyRawData(lPnts, RawData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::SetToOneScan ( ) {
    HRESULT _hr = raw_SetToOneScan();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::SetNumberOfPoints ( long NewSize ) {
    HRESULT _hr = raw_SetNumberOfPoints(NewSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::TOF_SetDataPoint ( long pos, double TimePos, double Intensity ) {
    HRESULT _hr = raw_TOF_SetDataPoint(pos, TimePos, Intensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::TOFSort ( ) {
    HRESULT _hr = raw_TOFSort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ITOFData::GetnumberOfScans ( ) {
    long _result = 0;
    HRESULT _hr = get_numberOfScans(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutnumberOfScans ( long pVal ) {
    HRESULT _hr = put_numberOfScans(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITOFData::AppendMassIntensityPoint ( double MassValue, double Intensity ) {
    HRESULT _hr = raw_AppendMassIntensityPoint(MassValue, Intensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::SetScan ( long nPnts, long * DataPnts, double CalA, double TNt ) {
    HRESULT _hr = raw_SetScan(nPnts, DataPnts, CalA, TNt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::TOFRawData ( long * NumberPnts, VARIANT * dXMass, VARIANT * dYInts, enum TOFXDataFormat Format ) {
    HRESULT _hr = raw_TOFRawData(NumberPnts, dXMass, dYInts, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::TOFConPoints ( long * NumberPnts, VARIANT * cConPoints ) {
    HRESULT _hr = raw_TOFConPoints(NumberPnts, cConPoints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ITOFData::GetIsRecalibrated ( ) {
    long _result = 0;
    HRESULT _hr = get_IsRecalibrated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutIsRecalibrated ( long pVal ) {
    HRESULT _hr = put_IsRecalibrated(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short ITOFData::GetTimeBins ( ) {
    short _result = 0;
    HRESULT _hr = get_TimeBins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutTimeBins ( short pVal ) {
    HRESULT _hr = put_TimeBins(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double ITOFData::GetTDCResolution ( ) {
    double _result = 0;
    HRESULT _hr = get_TDCResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutTDCResolution ( double pVal ) {
    HRESULT _hr = put_TDCResolution(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITOFData::GetIsAgilent ( ) {
    long _result = 0;
    HRESULT _hr = get_IsAgilent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITOFData::PutIsAgilent ( long pVal ) {
    HRESULT _hr = put_IsAgilent(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITOFData::AddScanAGT ( long nPnts, long * DataPnts, IUnknown * pUnkCal ) {
    HRESULT _hr = raw_AddScanAGT(nPnts, DataPnts, pUnkCal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::GetTOFCalibrationAGT ( IUnknown * * pUnkCal ) {
    HRESULT _hr = raw_GetTOFCalibrationAGT(pUnkCal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::ReSetCalibrationAGT ( IUnknown * pUnkCal ) {
    HRESULT _hr = raw_ReSetCalibrationAGT(pUnkCal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::SetTOFCalibrationAGT ( IUnknown * pUnkCal ) {
    HRESULT _hr = raw_SetTOFCalibrationAGT(pUnkCal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITOFData::GetRawDataPointer ( long * * ppRawData, double * CalA, double * TNt ) {
    HRESULT _hr = raw_GetRawDataPointer(ppRawData, CalA, TNt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISpecDataEx wrapper method implementations
//

inline HRESULT ISpecDataEx::SetDaughterMasses ( short sNmbDtr, double * dMass ) {
    HRESULT _hr = raw_SetDaughterMasses(sNmbDtr, dMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetRequestedMasses ( short * numberOfMasses, double * * dMass ) {
    HRESULT _hr = raw_GetRequestedMasses(numberOfMasses, dMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::AppendSpectra ( double dtSMass, double dtEMass, struct ISpecData * pSpecData ) {
    HRESULT _hr = raw_AppendSpectra(dtSMass, dtEMass, pSpecData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetNumberOfSpectra ( short * SavedScanCount ) {
    HRESULT _hr = raw_GetNumberOfSpectra(SavedScanCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetSpectra ( short Offset, struct ISpecData * * ITPCSpecData ) {
    HRESULT _hr = raw_GetSpectra(Offset, ITPCSpecData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetScanDaughterMass ( short Offset, double * Mass ) {
    HRESULT _hr = raw_GetScanDaughterMass(Offset, Mass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::ClearExtraSpectra ( ) {
    HRESULT _hr = raw_ClearExtraSpectra();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::TOFSavedFormat ( enum TOFPreCursorFormat * SavedFormat ) {
    HRESULT _hr = raw_TOFSavedFormat(SavedFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::SetSaveFormat ( enum TOFPreCursorFormat SavedFormat ) {
    HRESULT _hr = raw_SetSaveFormat(SavedFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetQuad1Limits ( float * StrMass, float * EndMass, float * StepSize ) {
    HRESULT _hr = raw_GetQuad1Limits(StrMass, EndMass, StepSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::SetQuad1Limits ( float StrMass, float EndMass, float StepSize ) {
    HRESULT _hr = raw_SetQuad1Limits(StrMass, EndMass, StepSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::SetDisplayTOFData ( short sFlagTOFOnly, double StrMass, double EndMass ) {
    HRESULT _hr = raw_SetDisplayTOFData(sFlagTOFOnly, StrMass, EndMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetDisplayTOFData ( short * sFlagDisplayTOF, double * StrMass, double * EndMass ) {
    HRESULT _hr = raw_GetDisplayTOFData(sFlagDisplayTOF, StrMass, EndMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetTOFObject ( struct ITOFData * * pITOFData ) {
    HRESULT _hr = raw_GetTOFObject(pITOFData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpecDataEx::GetMaxTPCSSpectraAllowed ( short * MaxNumberSpectra ) {
    HRESULT _hr = raw_GetMaxTPCSSpectraAllowed(MaxNumberSpectra);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IChromDataTPCS wrapper method implementations
//

inline HRESULT IChromDataTPCS::IsTOFPreCursor ( short * bIsTPRC ) {
    HRESULT _hr = raw_IsTOFPreCursor(bIsTPRC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChromDataTPCS::SetDaughterMass ( double StrMass, double EndMass ) {
    HRESULT _hr = raw_SetDaughterMass(StrMass, EndMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChromDataTPCS::GetDaughterMass ( double * StrMass, double * EndMass ) {
    HRESULT _hr = raw_GetDaughterMass(StrMass, EndMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChromDataTPCS::SetScanStartTime ( double StrTime, double endTime ) {
    HRESULT _hr = raw_SetScanStartTime(StrTime, endTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChromDataTPCS::GetScanStartTime ( double * StrTime, double * endTime ) {
    HRESULT _hr = raw_GetScanStartTime(StrTime, endTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFMANWiffFile wrapper method implementations
//

inline HRESULT IFMANWiffFile::GetTIC ( long sample, long period, long experiment, long startCycle, long endCycle, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetTIC(sample, period, experiment, startCycle, endCycle, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetSpectrum ( long sample, long period, long experiment, float startTime, float endTime, struct IFMANSpecData * pIFMANSpecData, long * inRealTimeMode, long * numberOfScans, long * actualPeriod, float * ActualStartTime, float * actualEndTime ) {
    HRESULT _hr = raw_GetSpectrum(sample, period, experiment, startTime, endTime, pIFMANSpecData, inRealTimeMode, numberOfScans, actualPeriod, ActualStartTime, actualEndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::OpenWiffFile ( _bstr_t fileName ) {
    HRESULT _hr = raw_OpenWiffFile(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::CloseWiffFile ( ) {
    HRESULT _hr = raw_CloseWiffFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANWiffFile::GetActualNumberOfPeriods ( long sample ) {
    long _result = 0;
    HRESULT _hr = raw_GetActualNumberOfPeriods(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANWiffFile::GetActualNumberOfCycles ( long sample, long period ) {
    long _result = 0;
    HRESULT _hr = raw_GetActualNumberOfCycles(sample, period, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANWiffFile::GetActualPeriodAndCycleFromTime ( long sample, long experiment, float Time, long * period, long * cycle ) {
    HRESULT _hr = raw_GetActualPeriodAndCycleFromTime(sample, experiment, Time, period, cycle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANWiffFile::GetActualNumberOfSamples ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetActualNumberOfSamples(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IFMANWiffFile::GetMassSpecMethod ( long sample ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetMassSpecMethod(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IFMANWiffFile::GetExperimentObject ( long sample, long period, long experiment ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetExperimentObject(sample, period, experiment, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IFMANWiffFile::GetExpectedNumberOfPeriods ( long sample ) {
    long _result = 0;
    HRESULT _hr = raw_GetExpectedNumberOfPeriods(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANWiffFile::GetExpectedNumberOfCycles ( long sample, long period ) {
    long _result = 0;
    HRESULT _hr = raw_GetExpectedNumberOfCycles(sample, period, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IFMANWiffFile::GetNumberOfExperiments ( long sample, long period ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfExperiments(sample, period, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IFMANWiffFile::GetPeriodObject ( long sample, long period ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetPeriodObject(sample, period, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IFMANWiffFile::GetDataIsBeingAcquired ( ) {
    long _result = 0;
    HRESULT _hr = get_DataIsBeingAcquired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IFMANWiffFile::PutDataIsBeingAcquired ( long pVal ) {
    HRESULT _hr = put_DataIsBeingAcquired(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IFMANWiffFile::GetPeriodBeingAcquired ( ) {
    long _result = 0;
    HRESULT _hr = get_PeriodBeingAcquired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IFMANWiffFile::PutPeriodBeingAcquired ( long pVal ) {
    HRESULT _hr = put_PeriodBeingAcquired(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUnknownPtr IFMANWiffFile::GetMassRangeObject ( long sample, long period, long experiment, long massRange ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetMassRangeObject(sample, period, experiment, massRange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IFMANWiffFile::GetOneFullScanXIC ( long sample, long period, long experiment, long startCycle, long endCycle, double startMass, double EndMass, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetOneFullScanXIC(sample, period, experiment, startCycle, endCycle, startMass, EndMass, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDefaultBPC ( long sample, long period, long experiment, long startCycle, long endCycle, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetDefaultBPC(sample, period, experiment, startCycle, endCycle, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetBasePeakChromatogram ( long sample, long period, long experiment, long startCycle, long endCycle, double startMass, double EndMass, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetBasePeakChromatogram(sample, period, experiment, startCycle, endCycle, startMass, EndMass, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetOneSingleIonXIC ( long sample, long period, long experiment, long startCycle, long endCycle, short simIndex, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetOneSingleIonXIC(sample, period, experiment, startCycle, endCycle, simIndex, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFMANWiffFile::GetWiffFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetWiffFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFMANWiffFile::GetScanRange ( long sample, long period, long experiment, double * startMass, double * stepMass, double * stopMass ) {
    HRESULT _hr = raw_GetScanRange(sample, period, experiment, startMass, stepMass, stopMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline float IFMANWiffFile::GetActualTimeFromPeriodAndCycle ( long sample, long period, long experiment, long cycle ) {
    float _result = 0;
    HRESULT _hr = raw_GetActualTimeFromPeriodAndCycle(sample, period, experiment, cycle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANWiffFile::GetSIMBPC ( long sample, long period, long experiment, long startCycle, long endCycle, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetSIMBPC(sample, period, experiment, startCycle, endCycle, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IFMANWiffFile::GetDABSObject ( long sample ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetDABSObject(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IFMANWiffFile::GetDABSInfo ( long sample, short * methodID, BSTR * sampleName, BSTR * sampleID, BSTR * vialNumber, short * rackNumber, BSTR * rackID, long * acquisitionTime ) {
    HRESULT _hr = raw_GetDABSInfo(sample, methodID, sampleName, sampleID, vialNumber, rackNumber, rackID, acquisitionTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IFMANWiffFile::GetSampleName ( long sample ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSampleName(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IFMANWiffFile::GetADC ( long sample, long deviceID, long channel, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetADC(sample, deviceID, channel, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANWiffFile::GetNumberOfADCDevices ( long sample ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfADCDevices(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFMANWiffFile::GetADCDeviceInfo ( long sample, long deviceID, long * numberOfChannels, BSTR * deviceName, BSTR * modelName, long * deviceType ) {
    HRESULT _hr = raw_GetADCDeviceInfo(sample, deviceID, numberOfChannels, deviceName, modelName, deviceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetADCChannelInfo ( long sample, long deviceID, long channel, BSTR * channelName ) {
    HRESULT _hr = raw_GetADCChannelInfo(sample, deviceID, channel, channelName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANWiffFile::GetExperimentsInPeriodAreSameType ( long sample, long period ) {
    long _result = 0;
    HRESULT _hr = raw_GetExperimentsInPeriodAreSameType(sample, period, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IFMANWiffFile::GetAcquisitionMethod ( long sample ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetAcquisitionMethod(sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _bstr_t IFMANWiffFile::_LookupFieldValue ( long sample, long period, long experiment, long fieldID ) {
    BSTR _result = 0;
    HRESULT _hr = raw__LookupFieldValue(sample, period, experiment, fieldID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUnknownPtr IFMANWiffFile::GetFileManagerObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_GetFileManagerObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IFMANWiffFile::ResetEqualTOFCal ( long sample, long period, long experiment, long startCycle, long endCycle, IUnknown * * pUnkITOFData ) {
    HRESULT _hr = raw_ResetEqualTOFCal(sample, period, experiment, startCycle, endCycle, pUnkITOFData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::UpdateTOFCalibrationInfo ( long sample ) {
    HRESULT _hr = raw_UpdateTOFCalibrationInfo(sample);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetNumberOfDADScans ( long sample, long deviceID, long * numberOfDevices ) {
    HRESULT _hr = raw_GetNumberOfDADScans(sample, deviceID, numberOfDevices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDADDeviceInfo ( long sample, long deviceID, BSTR * deviceName, BSTR * modelName, long * deviceType ) {
    HRESULT _hr = raw_GetDADDeviceInfo(sample, deviceID, deviceName, modelName, deviceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDADTWC ( long sample, long deviceID, long startCycle, long endCycle, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetDADTWC(sample, deviceID, startCycle, endCycle, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDADSpectrum ( long sample, float startTime, float endTime, struct IFMANSpecData * pIFMANSpecData, long * inRealTimeMode, long * DADnumberOfScans, float * ActualStartTime, float * actualEndTime ) {
    HRESULT _hr = raw_GetDADSpectrum(sample, startTime, endTime, pIFMANSpecData, inRealTimeMode, DADnumberOfScans, ActualStartTime, actualEndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDADXWC ( long sample, long deviceID, long operatingMode, long startCycle, long endCycle, double startWaveLength, double endWaveLength, double Offset, struct IFMANChromData * pIFMANChromData, long * allDataAvailableNow ) {
    HRESULT _hr = raw_GetDADXWC(sample, deviceID, operatingMode, startCycle, endCycle, startWaveLength, endWaveLength, Offset, pIFMANChromData, allDataAvailableNow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetWaveLengthRange ( long sample, long deviceID, float * startWaveLength, float * endWaveLength, float * stepWaveLength ) {
    HRESULT _hr = raw_GetWaveLengthRange(sample, deviceID, startWaveLength, endWaveLength, stepWaveLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetCenterWaveLengths ( long sample, long deviceID, float * pfCenterWaveLengths ) {
    HRESULT _hr = raw_GetCenterWaveLengths(sample, deviceID, pfCenterWaveLengths);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDADDeviceID ( long sample, long * deviceID ) {
    HRESULT _hr = raw_GetDADDeviceID(sample, deviceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetDADOperatingMode ( long sample, long deviceID, short * operatingMode ) {
    HRESULT _hr = raw_GetDADOperatingMode(sample, deviceID, operatingMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetNumberOfDADChannels ( long sample, long deviceID, short * numberOfChannels ) {
    HRESULT _hr = raw_GetNumberOfDADChannels(sample, deviceID, numberOfChannels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile::GetAllChannelsIDFlag ( long sample, long deviceID, long * allChannelsIDFlag ) {
    HRESULT _hr = raw_GetAllChannelsIDFlag(sample, deviceID, allChannelsIDFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFMANWiffFile::GetIsTuneMode ( ) {
    long _result = 0;
    HRESULT _hr = get_IsTuneMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IFMANWiffFile::PutIsTuneMode ( long pVal ) {
    HRESULT _hr = put_IsTuneMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IFMANWiffFileInternal wrapper method implementations
//

inline HRESULT _IFMANWiffFileInternal::NewDataArrived ( long sampleNumber ) {
    HRESULT _hr = raw_NewDataArrived(sampleNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IFMANWiffFileInternal::AllDataArrived ( long sampleNumber ) {
    HRESULT _hr = raw_AllDataArrived(sampleNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IFMANWiffFileInternal::SetSamplesAssociatedWith ( long firstSample, long lastSample ) {
    HRESULT _hr = raw_SetSamplesAssociatedWith(firstSample, lastSample);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITDCStatistics wrapper method implementations
//

inline HRESULT ITDCStatistics::GetCurrentTDCStatisticsParameters ( long lPeriodNumber, long * llIonsHitDetector1, long * lIonsHitDetector2, long * lIonsHitDetector3, long * lIonsHitDetector4, long * lStartRate ) {
    HRESULT _hr = raw_GetCurrentTDCStatisticsParameters(lPeriodNumber, llIonsHitDetector1, lIonsHitDetector2, lIonsHitDetector3, lIonsHitDetector4, lStartRate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITDCStatistics::TDCArrOpen ( long bTDCRealTime ) {
    HRESULT _hr = raw_TDCArrOpen(bTDCRealTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITDCStatistics::TDCArrClose ( ) {
    HRESULT _hr = raw_TDCArrClose();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFMANWiffFile2 wrapper method implementations
//

inline HRESULT IFMANWiffFile2::GetScanDescription2 ( long sample, long period, long experiment, long cycle, long forChromatogram, BSTR * scanDescription, double * fixedMass ) {
    HRESULT _hr = raw_GetScanDescription2(sample, period, experiment, cycle, forChromatogram, scanDescription, fixedMass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile2::GetDataFormat ( long * nDataFormat ) {
    HRESULT _hr = raw_GetDataFormat(nDataFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile2::IsMCAScan ( long nSample, long * nMCA ) {
    HRESULT _hr = raw_IsMCAScan(nSample, nMCA);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile2::GetScanType ( long nSample, short * nScanType ) {
    HRESULT _hr = raw_GetScanType(nSample, nScanType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFMANWiffFile2::GetActualsValue ( long sample, long period, long experiment, long cycle, long * numOfElements, float * * values ) {
    HRESULT _hr = raw_GetActualsValue(sample, period, experiment, cycle, numOfElements, values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFMANWiffFileControl wrapper method implementations
//

inline IFMANWiffFilePtr IFMANWiffFileControl::GetWiffFileObject ( _bstr_t WiffFileName, long sample ) {
    struct IFMANWiffFile * _result = 0;
    HRESULT _hr = raw_GetWiffFileObject(WiffFileName, sample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFMANWiffFilePtr(_result, false);
}

inline VARIANT_BOOL IFMANWiffFileControl::IsFileOpened ( _bstr_t fileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFileOpened(fileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IFMANWiffFileControlInternal wrapper method implementations
//

inline HRESULT _IFMANWiffFileControlInternal::ReleaseWiffFileReference ( IUnknown * pIUnknownFMANWiffFile ) {
    HRESULT _hr = raw_ReleaseWiffFileReference(pIUnknownFMANWiffFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISpectralPeakList wrapper method implementations
//

inline long ISpectralPeakList::GetNumberOfPeaks ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumberOfPeaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISpectralPeakList::GetPeak ( long peakNumber, double * Mass, double * width, double * Intensity, double * intensityAsPercent ) {
    HRESULT _hr = raw_GetPeak(peakNumber, Mass, width, Intensity, intensityAsPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpectralPeakList::FindPeaksInDataObject ( IUnknown * pDataObject, double peakHeightForWidthCalculation ) {
    HRESULT _hr = raw_FindPeaksInDataObject(pDataObject, peakHeightForWidthCalculation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISpectralPeakList::GetClosestPeak ( double Mass, double massTolerance ) {
    long _result = 0;
    HRESULT _hr = raw_GetClosestPeak(Mass, massTolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISpectralPeakList::Copy ( IUnknown * * ppCopy ) {
    HRESULT _hr = raw_Copy(ppCopy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpectralPeakList::_SetNumberOfPeaks ( long numberOfPeaks ) {
    HRESULT _hr = raw__SetNumberOfPeaks(numberOfPeaks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpectralPeakList::_SetMaximumIntensity ( double maximumIntensity ) {
    HRESULT _hr = raw__SetMaximumIntensity(maximumIntensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISpectralPeakList::_SetPeak ( long peakNumber, double Mass, double width, double Intensity ) {
    HRESULT _hr = raw__SetPeak(peakNumber, Mass, width, Intensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISpectralPeakList::GetLargestPeakInRange ( double lowMass, double highMass ) {
    long _result = 0;
    HRESULT _hr = raw_GetLargestPeakInRange(lowMass, highMass, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISpectralPeakList::GetObjectID ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetObjectID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
