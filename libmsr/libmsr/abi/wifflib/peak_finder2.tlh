// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (d0c88377).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wifflib\peak_finder2.tlh
//
// C++ source equivalent of Win32 type library ..\\libs\\analyst\\Peak_Finder2.dll
// compiler-generated file created 07/24/07 at 22:36:06 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Analyst {

//
// Forward references and typedefs
//

struct __declspec(uuid("eb1c4715-ce91-4c37-a36a-c5181171bae7"))
/* LIBID */ __PEAK_FINDER2Lib;
struct /* coclass */ PeakList2;
struct __declspec(uuid("dbc442f3-1a7a-11d6-8aa1-0060977f5de9"))
/* interface */ IPeakList2;
enum PeakDataEnumTag;
enum SciexDataType;
struct /* coclass */ PeakFinder2;
struct __declspec(uuid("29d39d1d-13f7-11d6-8a9c-0060977f5de9"))
/* interface */ IPeakFinder2;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IPeakList2, __uuidof(IPeakList2));
_COM_SMARTPTR_TYPEDEF(IPeakFinder2, __uuidof(IPeakFinder2));

//
// Type library items
//

struct __declspec(uuid("dbc442f5-1a7a-11d6-8aa1-0060977f5de9"))
PeakList2;
    // [ default ] interface IPeakList2

enum PeakDataEnumTag
{
    PEAK_DATA_CENTROID_VALUE = 0,
    PEAK_DATA_CENTROID_INTENSITY = 1,
    PEAK_DATA_RESOLUTION = 2,
    PEAK_DATA_CHARGE_STATE = 3,
    PEAK_DATA_AREA = 4,
    PEAK_DATA_RELATIVE_INTENSITY = 5,
    PEAK_DATA_MONOISOTOPIC_MASS = 6,
    PEAK_DATA_WIDTH = 7,
    PEAK_DATA_IS_MONOISOTOPIC = 8,
    PEAK_DATA_CENTROID_PERCENTAGE = 9,
    PEAK_DATA_WIDTH_AT_5 = 10,
    PEAK_DATA_CENTROID_PEAK_TOO_WIDE = 11,
    PEAK_DATA_SCAN_NUMBER = 12,
    PEAK_DATA_BASE_PEAK_ION_MASS = 13,
    PEAK_DATA_BASE_PEAK_ION_INTENSITY = 14,
    PEAK_DATA_BASELINE_TYPE = 15
};

enum SciexDataType
{
    CHROMATOGRAM = 0,
    SPECTRUM = 1
};

struct __declspec(uuid("dbc442f3-1a7a-11d6-8aa1-0060977f5de9"))
IPeakList2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long getNumPeaks ( );
    long getEnabled (
        long peakIndex );
    HRESULT getPeakBounds (
        long peakIndex,
        long * pPeakStart,
        long * pPeakEnd );
    HRESULT setEnabled (
        long peakIndex,
        long isEnabled );
    long getApexIndex (
        long peakIndex );
    _variant_t getPeakData (
        long peakIndex,
        enum PeakDataEnumTag whichData );
    HRESULT setPeakData (
        long peakIndex,
        enum PeakDataEnumTag whichData,
        const _variant_t & newData );
    HRESULT addPeak (
        long peakStart,
        double startX,
        double startY,
        long peakEnd,
        double endX,
        double endY,
        long apexIndex,
        double apexX,
        double apexY );
    HRESULT sort ( );
    HRESULT clear ( );
    long getHighestPeakInRange (
        double start,
        double end );
    HRESULT getApexPoint (
        long peakIndex,
        double * apexValue,
        double * apexIntensity );
    HRESULT removePeak (
        long peakIndex );
    long getClosestPeak (
        double refValue,
        double tolerance );
    long getFilteredPeak (
        long filteredIndex );
    HRESULT getStartPoint (
        long peakIndex,
        double * startValue,
        double * startIntensity );
    HRESULT getEndPoint (
        long peakIndex,
        double * endValue,
        double * endIntensity );
    long getNumFilteredPeaks ( );
    HRESULT NotifyOnChange ( );
    HRESULT getPeakDataAsDouble (
        long peakIndex,
        enum PeakDataEnumTag whichData,
        double * pData );
    HRESULT setNewPeakList (
        long * PeakList );
    HRESULT getListDataType (
        enum SciexDataType * pDataType );
    HRESULT insertPeak (
        long peakIndex,
        IUnknown * pPeakList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getNumPeaks (
        /*[out,retval]*/ long * pNumPeaks ) = 0;
      virtual HRESULT __stdcall raw_getEnabled (
        /*[in]*/ long peakIndex,
        /*[out,retval]*/ long * pIsEnabled ) = 0;
      virtual HRESULT __stdcall raw_getPeakBounds (
        /*[in]*/ long peakIndex,
        /*[out]*/ long * pPeakStart,
        /*[out]*/ long * pPeakEnd ) = 0;
      virtual HRESULT __stdcall raw_setEnabled (
        /*[in]*/ long peakIndex,
        /*[in]*/ long isEnabled ) = 0;
      virtual HRESULT __stdcall raw_getApexIndex (
        /*[in]*/ long peakIndex,
        /*[out,retval]*/ long * pApexIndex ) = 0;
      virtual HRESULT __stdcall raw_getPeakData (
        /*[in]*/ long peakIndex,
        /*[in]*/ enum PeakDataEnumTag whichData,
        /*[out,retval]*/ VARIANT * pData ) = 0;
      virtual HRESULT __stdcall raw_setPeakData (
        /*[in]*/ long peakIndex,
        /*[in]*/ enum PeakDataEnumTag whichData,
        /*[in]*/ VARIANT newData ) = 0;
      virtual HRESULT __stdcall raw_addPeak (
        /*[in]*/ long peakStart,
        /*[in]*/ double startX,
        /*[in]*/ double startY,
        /*[in]*/ long peakEnd,
        /*[in]*/ double endX,
        /*[in]*/ double endY,
        /*[in]*/ long apexIndex,
        /*[in]*/ double apexX,
        /*[in]*/ double apexY ) = 0;
      virtual HRESULT __stdcall raw_sort ( ) = 0;
      virtual HRESULT __stdcall raw_clear ( ) = 0;
      virtual HRESULT __stdcall raw_getHighestPeakInRange (
        /*[in]*/ double start,
        /*[in]*/ double end,
        /*[out,retval]*/ long * peakIndex ) = 0;
      virtual HRESULT __stdcall raw_getApexPoint (
        /*[in]*/ long peakIndex,
        /*[out]*/ double * apexValue,
        /*[out]*/ double * apexIntensity ) = 0;
      virtual HRESULT __stdcall raw_removePeak (
        /*[in]*/ long peakIndex ) = 0;
      virtual HRESULT __stdcall raw_getClosestPeak (
        /*[in]*/ double refValue,
        /*[in]*/ double tolerance,
        /*[out,retval]*/ long * peakIndex ) = 0;
      virtual HRESULT __stdcall raw_getFilteredPeak (
        /*[in]*/ long filteredIndex,
        /*[out,retval]*/ long * peakIndex ) = 0;
      virtual HRESULT __stdcall raw_getStartPoint (
        /*[in]*/ long peakIndex,
        /*[out]*/ double * startValue,
        /*[out]*/ double * startIntensity ) = 0;
      virtual HRESULT __stdcall raw_getEndPoint (
        /*[in]*/ long peakIndex,
        /*[out]*/ double * endValue,
        /*[out]*/ double * endIntensity ) = 0;
      virtual HRESULT __stdcall raw_getNumFilteredPeaks (
        /*[out,retval]*/ long * numFiltered ) = 0;
      virtual HRESULT __stdcall raw_NotifyOnChange ( ) = 0;
      virtual HRESULT __stdcall raw_getPeakDataAsDouble (
        /*[in]*/ long peakIndex,
        enum PeakDataEnumTag whichData,
        double * pData ) = 0;
      virtual HRESULT __stdcall raw_setNewPeakList (
        long * PeakList ) = 0;
      virtual HRESULT __stdcall raw_getListDataType (
        enum SciexDataType * pDataType ) = 0;
      virtual HRESULT __stdcall raw_insertPeak (
        long peakIndex,
        IUnknown * pPeakList ) = 0;
};

struct __declspec(uuid("4e0260ce-5f3a-486d-811e-56cfed858c39"))
PeakFinder2;
    // [ default ] interface IPeakFinder2

struct __declspec(uuid("29d39d1d-13f7-11d6-8a9c-0060977f5de9"))
IPeakFinder2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long CanAssignChargeStates ( );
    long GetVersion ( );
    IUnknownPtr FindPeaks (
        enum SciexDataType dataType,
        IUnknown * pRawXYData,
        long assignCharges,
        double threshold,
        _bstr_t params );
    IUnknownPtr EngineFindQuadPeaks (
        double * pRawXYData,
        long NumPoints,
        long assignCharges,
        double threshold );
    IUnknownPtr FindTOFPeaks (
        long * pRawXYData,
        long NumPoints,
        double CalA,
        double TNt,
        long assignCharges,
        double threshold );
    HRESULT CanFindChromatogramPeaks (
        long * pResult );
    HRESULT CanFindSpectrumPeaks (
        long * pResult );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CanAssignChargeStates (
        /*[out,retval]*/ long * pResult ) = 0;
      virtual HRESULT __stdcall raw_GetVersion (
        /*[out,retval]*/ long * pVersion ) = 0;
      virtual HRESULT __stdcall raw_FindPeaks (
        /*[in]*/ enum SciexDataType dataType,
        /*[in]*/ IUnknown * pRawXYData,
        /*[in]*/ long assignCharges,
        /*[in]*/ double threshold,
        /*[in]*/ BSTR params,
        /*[out,retval]*/ IUnknown * * ppPeakList ) = 0;
      virtual HRESULT __stdcall raw_EngineFindQuadPeaks (
        /*[in]*/ double * pRawXYData,
        long NumPoints,
        /*[in]*/ long assignCharges,
        /*[in]*/ double threshold,
        /*[out,retval]*/ IUnknown * * ppPeakList ) = 0;
      virtual HRESULT __stdcall raw_FindTOFPeaks (
        /*[in]*/ long * pRawXYData,
        /*[in]*/ long NumPoints,
        /*[in]*/ double CalA,
        /*[in]*/ double TNt,
        /*[in]*/ long assignCharges,
        /*[in]*/ double threshold,
        /*[out,retval]*/ IUnknown * * ppPeakList ) = 0;
      virtual HRESULT __stdcall raw_CanFindChromatogramPeaks (
        long * pResult ) = 0;
      virtual HRESULT __stdcall raw_CanFindSpectrumPeaks (
        long * pResult ) = 0;
};

//
// Wrapper method implementations
//

#include "wifflib\peak_finder2.tli"

} // namespace Analyst

#pragma pack(pop)
