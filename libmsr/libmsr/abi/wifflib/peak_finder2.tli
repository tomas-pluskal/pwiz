// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (d0c88377).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wifflib\peak_finder2.tli
//
// Wrapper implementations for Win32 type library ..\\libs\\analyst\\Peak_Finder2.dll
// compiler-generated file created 07/24/07 at 22:36:06 - DO NOT EDIT!

#pragma once

//
// interface IPeakList2 wrapper method implementations
//

inline long IPeakList2::getNumPeaks ( ) {
    long _result = 0;
    HRESULT _hr = raw_getNumPeaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPeakList2::getEnabled ( long peakIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getEnabled(peakIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPeakList2::getPeakBounds ( long peakIndex, long * pPeakStart, long * pPeakEnd ) {
    HRESULT _hr = raw_getPeakBounds(peakIndex, pPeakStart, pPeakEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::setEnabled ( long peakIndex, long isEnabled ) {
    HRESULT _hr = raw_setEnabled(peakIndex, isEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPeakList2::getApexIndex ( long peakIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getApexIndex(peakIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IPeakList2::getPeakData ( long peakIndex, enum PeakDataEnumTag whichData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_getPeakData(peakIndex, whichData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IPeakList2::setPeakData ( long peakIndex, enum PeakDataEnumTag whichData, const _variant_t & newData ) {
    HRESULT _hr = raw_setPeakData(peakIndex, whichData, newData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::addPeak ( long peakStart, double startX, double startY, long peakEnd, double endX, double endY, long apexIndex, double apexX, double apexY ) {
    HRESULT _hr = raw_addPeak(peakStart, startX, startY, peakEnd, endX, endY, apexIndex, apexX, apexY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::sort ( ) {
    HRESULT _hr = raw_sort();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::clear ( ) {
    HRESULT _hr = raw_clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPeakList2::getHighestPeakInRange ( double start, double end ) {
    long _result = 0;
    HRESULT _hr = raw_getHighestPeakInRange(start, end, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPeakList2::getApexPoint ( long peakIndex, double * apexValue, double * apexIntensity ) {
    HRESULT _hr = raw_getApexPoint(peakIndex, apexValue, apexIntensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::removePeak ( long peakIndex ) {
    HRESULT _hr = raw_removePeak(peakIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPeakList2::getClosestPeak ( double refValue, double tolerance ) {
    long _result = 0;
    HRESULT _hr = raw_getClosestPeak(refValue, tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPeakList2::getFilteredPeak ( long filteredIndex ) {
    long _result = 0;
    HRESULT _hr = raw_getFilteredPeak(filteredIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPeakList2::getStartPoint ( long peakIndex, double * startValue, double * startIntensity ) {
    HRESULT _hr = raw_getStartPoint(peakIndex, startValue, startIntensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::getEndPoint ( long peakIndex, double * endValue, double * endIntensity ) {
    HRESULT _hr = raw_getEndPoint(peakIndex, endValue, endIntensity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPeakList2::getNumFilteredPeaks ( ) {
    long _result = 0;
    HRESULT _hr = raw_getNumFilteredPeaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPeakList2::NotifyOnChange ( ) {
    HRESULT _hr = raw_NotifyOnChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::getPeakDataAsDouble ( long peakIndex, enum PeakDataEnumTag whichData, double * pData ) {
    HRESULT _hr = raw_getPeakDataAsDouble(peakIndex, whichData, pData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::setNewPeakList ( long * PeakList ) {
    HRESULT _hr = raw_setNewPeakList(PeakList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::getListDataType ( enum SciexDataType * pDataType ) {
    HRESULT _hr = raw_getListDataType(pDataType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakList2::insertPeak ( long peakIndex, IUnknown * pPeakList ) {
    HRESULT _hr = raw_insertPeak(peakIndex, pPeakList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPeakFinder2 wrapper method implementations
//

inline long IPeakFinder2::CanAssignChargeStates ( ) {
    long _result = 0;
    HRESULT _hr = raw_CanAssignChargeStates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPeakFinder2::GetVersion ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IPeakFinder2::FindPeaks ( enum SciexDataType dataType, IUnknown * pRawXYData, long assignCharges, double threshold, _bstr_t params ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_FindPeaks(dataType, pRawXYData, assignCharges, threshold, params, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IPeakFinder2::EngineFindQuadPeaks ( double * pRawXYData, long NumPoints, long assignCharges, double threshold ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_EngineFindQuadPeaks(pRawXYData, NumPoints, assignCharges, threshold, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IUnknownPtr IPeakFinder2::FindTOFPeaks ( long * pRawXYData, long NumPoints, double CalA, double TNt, long assignCharges, double threshold ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw_FindTOFPeaks(pRawXYData, NumPoints, CalA, TNt, assignCharges, threshold, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline HRESULT IPeakFinder2::CanFindChromatogramPeaks ( long * pResult ) {
    HRESULT _hr = raw_CanFindChromatogramPeaks(pResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPeakFinder2::CanFindSpectrumPeaks ( long * pResult ) {
    HRESULT _hr = raw_CanFindSpectrumPeaks(pResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
