// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (7799e4f6).
//
// f:\tmp\sashimi-trunk\trans_proteomic_pipeline\src\mzxml\converters\mzwiff\wifflib\parametersvr.tlh
//
// C++ source equivalent of Win32 type library ..\\libs\\analyst\\ParameterSvr.dll
// compiler-generated file created 08/29/07 at 19:46:08 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Analyst {

//
// Forward references and typedefs
//

struct __declspec(uuid("b7935271-7ba3-11d1-9d59-006097223085"))
/* LIBID */ __ParameterSvrLib;
struct /* coclass */ ParameterData;
struct __declspec(uuid("b793527e-7ba3-11d1-9d59-006097223085"))
/* dual interface */ IParameterData;
struct __declspec(uuid("833e5830-806d-11d1-9d5a-006097223085"))
/* dual interface */ ICheckParameterData;
struct __declspec(uuid("18f4d3c1-aeea-11d2-b920-006097223085"))
/* interface */ IPersistWIFFStg2;
struct /* coclass */ ParamDataColl;
struct __declspec(uuid("c7d68bb1-8b84-11d1-9d5a-006097223085"))
/* dual interface */ IParamDataColl;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IParameterData, __uuidof(IParameterData));
_COM_SMARTPTR_TYPEDEF(ICheckParameterData, __uuidof(ICheckParameterData));
_COM_SMARTPTR_TYPEDEF(IPersistWIFFStg2, __uuidof(IPersistWIFFStg2));
_COM_SMARTPTR_TYPEDEF(IParamDataColl, __uuidof(IParamDataColl));

//
// Type library items
//

struct __declspec(uuid("b793527f-7ba3-11d1-9d59-006097223085"))
ParameterData;
    // [ default ] interface IParameterData
    // interface ICheckParameterData
    // interface IPersistWIFFStg
    // interface IPersistWIFFStg2
    // interface IPersistStorage
    // interface ISupportErrorInfo
    // interface IMiscDAMCalls

struct __declspec(uuid("b793527e-7ba3-11d1-9d59-006097223085"))
IParameterData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetparamId,put=PutparamId))
    _bstr_t paramId;
    __declspec(property(get=GetstartVal,put=PutstartVal))
    float startVal;
    __declspec(property(get=GetstopVal,put=PutstopVal))
    float stopVal;
    __declspec(property(get=GetstepVal,put=PutstepVal))
    float stepVal;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetparamId ( );
    void PutparamId (
        _bstr_t pVal );
    float GetstartVal ( );
    void PutstartVal (
        float pVal );
    float GetstopVal ( );
    void PutstopVal (
        float pVal );
    float GetstepVal ( );
    void PutstepVal (
        float pVal );
    HRESULT SetParameter (
        _bstr_t paramId,
        float start,
        float stop,
        float step );
    HRESULT GetParameter (
        BSTR * pParamId,
        float * pStart,
        float * pStop,
        float * pStep );
    HRESULT SetParameterLimits (
        float fMin,
        float fMax );
    HRESULT GetParameterLimits (
        float * fMin,
        float * fMax );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_paramId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_paramId (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_startVal (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_startVal (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_stopVal (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_stopVal (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_stepVal (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_stepVal (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall raw_SetParameter (
        /*[in]*/ BSTR paramId,
        /*[in]*/ float start,
        /*[in]*/ float stop,
        /*[in]*/ float step ) = 0;
      virtual HRESULT __stdcall raw_GetParameter (
        /*[out]*/ BSTR * pParamId,
        /*[out]*/ float * pStart,
        /*[out]*/ float * pStop,
        /*[out]*/ float * pStep ) = 0;
      virtual HRESULT __stdcall raw_SetParameterLimits (
        /*[in]*/ float fMin,
        /*[in]*/ float fMax ) = 0;
      virtual HRESULT __stdcall raw_GetParameterLimits (
        /*[out]*/ float * fMin,
        /*[out]*/ float * fMax ) = 0;
};

struct __declspec(uuid("833e5830-806d-11d1-9d5a-006097223085"))
ICheckParameterData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long IsRange ( );
    long IsValue ( );
    long IsValid ( );
    long IsThis (
        _bstr_t bstrName );
    long IsWithinLimits (
        float fMin,
        float fMax );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsRange (
        /*[out,retval]*/ long * pbRange ) = 0;
      virtual HRESULT __stdcall raw_IsValue (
        /*[out,retval]*/ long * pbVal ) = 0;
      virtual HRESULT __stdcall raw_IsValid (
        /*[out,retval]*/ long * bValid ) = 0;
      virtual HRESULT __stdcall raw_IsThis (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ long * pbHit ) = 0;
      virtual HRESULT __stdcall raw_IsWithinLimits (
        /*[in]*/ float fMin,
        /*[in]*/ float fMax,
        /*[out,retval]*/ long * pbInRange ) = 0;
};

struct __declspec(uuid("18f4d3c1-aeea-11d2-b920-006097223085"))
IPersistWIFFStg2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SaveToWIFF2 (
        struct IStorage * pSaveStg,
        short sIdx,
        enum tagACQMETHODSTGTYPE stgType );
    HRESULT LoadFromWIFF2 (
        struct IStorage * pStg,
        short sIdx,
        enum tagACQMETHODSTGTYPE stgType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SaveToWIFF2 (
        /*[in]*/ struct IStorage * pSaveStg,
        /*[in]*/ short sIdx,
        /*[in]*/ enum tagACQMETHODSTGTYPE stgType ) = 0;
      virtual HRESULT __stdcall raw_LoadFromWIFF2 (
        /*[in]*/ struct IStorage * pStg,
        /*[in]*/ short sIdx,
        /*[in]*/ enum tagACQMETHODSTGTYPE stgType ) = 0;
};

struct __declspec(uuid("c7d68bb2-8b84-11d1-9d5a-006097223085"))
ParamDataColl;
    // [ default ] interface IParamDataColl
    // interface IPersistWIFFStg
    // interface IPersistStorage
    // interface ISupportErrorInfo
    // interface IMiscDAMCalls

struct __declspec(uuid("c7d68bb1-8b84-11d1-9d5a-006097223085"))
IParamDataColl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    short Count;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    short GetCount ( );
    IUnknownPtr GetParameter (
        short sItem );
    IUnknownPtr _NewEnum ( );
    short AddParameter ( );
    HRESULT RemoveParameter (
        short sItem );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    long IsEmpty ( );
    HRESULT CopyFrom (
        IUnknown * pUnkParamData );
    HRESULT RemoveAllParameters ( );
    IUnknownPtr FindParameter (
        _bstr_t bstrName,
        short * sIdx );
    HRESULT AddSetParameter (
        _bstr_t id,
        float start,
        float stop,
        float step,
        short * index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameter (
        /*[in]*/ short sItem,
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * ppIEnumParameters ) = 0;
      virtual HRESULT __stdcall raw_AddParameter (
        /*[out,retval]*/ short * psItem ) = 0;
      virtual HRESULT __stdcall raw_RemoveParameter (
        /*[in]*/ short sItem ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_IsEmpty (
        /*[out,retval]*/ long * bEmpty ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ IUnknown * pUnkParamData ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllParameters ( ) = 0;
      virtual HRESULT __stdcall raw_FindParameter (
        /*[in]*/ BSTR bstrName,
        /*[out]*/ short * sIdx,
        /*[out,retval]*/ IUnknown * * ppUnkParam ) = 0;
      virtual HRESULT __stdcall raw_AddSetParameter (
        /*[in]*/ BSTR id,
        /*[in]*/ float start,
        /*[in]*/ float stop,
        /*[in]*/ float step,
        /*[out]*/ short * index ) = 0;
};

//
// Wrapper method implementations
//

#include "wifflib\parametersvr.tli"

} // namespace Analyst

#pragma pack(pop)
