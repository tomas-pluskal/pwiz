
import modules ;
import path ;

path-constant CLI_ROOT : . ;

if [ modules.peek : NT ]
{

import path ;
rule vendor-api-requirements ( properties * )
{
    local result ;
    if [ path.exists $(CLI_ROOT)/ABSciex.DataAccess.WiffFileDataReader.dll ]
    {
      result += <dependency>ABSciex.DataAccess.WiffFileDataReader.dll ;
      result += <dependency>Clearcore.dll ;
      result += <dependency>ClearCore.Storage.dll ;
      result += <dependency>rscoree.dll ;
    }
    return $(result) ;
}

lib pwiz_wifffile
    : # sources
        WiffFile.cpp
    : # requirements
        <toolset>msvc

        # - when boost::thread is link=static, the exe header is tweaked to call
        #   thread-local storage initialization routines (before main())
        # - when a /clr object is link=static, the exe header is similarly tweaked
        #   to initialize the CLR
        # - these two tweaks are incompatible: either boost::thread must be link=shared,
        #   or the CLR object must be
        # HACK: not needed when using hacked tss_pe.cpp
        #<link>shared

        <link>shared:<define>WIFFFILE_DYN_LINK
        <using-clr>true # requires hacked msvc.jam
        <cxxflags>"/AI $(CLI_ROOT)"
        <conditional>@vendor-api-requirements
    : # default-build
    : # usage-requirements
        <conditional>@vendor-api-requirements
    ;


path-constant TEST_PATH1 : "c:/test/20061108_CPTAC_1B468.wiff" ;
path-constant TEST_PATH2 : "c:/test/cptac/SRM/TEST_CPTAC_Verification WG manuscript_Addona et al/Study II/Site 52_done/52_Raw Data/Site52_7.2.wiff" ;

# special run target for WiffFileTest, which needs external data 
# use --preserve-test-targets to prevent bjam from deleting the executable
run WiffFileTest.cpp
    : # args
        \"$(TEST_PATH1)\" \"$(TEST_PATH2)\" -v
    : # input-files
    : # requirements
        <library>pwiz_wifffile
    : # target name
        WiffFileTest 
    : # default-build
    ;
explicit WiffFileTest ;

}
