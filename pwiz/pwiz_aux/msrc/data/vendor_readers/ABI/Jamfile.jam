#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2009 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


# ABI support status:
# - DLLs are .NET and thus MSVC only
# - cannot redistribute DLLs and we can't compile the API without them


project
    : requirements 
        <toolset>gcc:<cxxflags>-fno-strict-aliasing
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
    ;

path-constant READER_PATH : . ;
path-constant API_PATH : $(PWIZ_ROOT_PATH)/pwiz_aux/msrc/utility/vendor_api/ABI ;
path-constant TEST_DATA_PATH : ./Reader_ABI_Test.data ;


# decompress test data (on any platform)
SHELL "$(UNTAR_TEST_DATA_SCRIPT) $(READER_PATH) $(PWIZ_ROOT_PATH) $(TEST_DATA_PATH)" : no-output ;


import path ;
rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ path.exists $(API_PATH)/ABSciex.DataAccess.WiffFileDataReader.dll ]
    {
        result += <source>Reader_ABI_Detail.cpp ;
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ project-exists $(API_PATH) ] &&
       [ path.exists $(API_PATH)/ABSciex.DataAccess.WiffFileDataReader.dll ]
    {
        result += <define>PWIZ_READER_ABI ;
        result += <library>$(API_PATH)//pwiz_vendor_api_abi ;
    }
    else if ! $(.warn-once)
    {
        .warn-once = true ;
        if ! <toolset>msvc in $(properties)
        {
            echo "[pwiz_aux/msrc/data/vendor_readers/ABI] Non-MSVC build: Reader_ABI can only identify RAW files, not read them." ;
        }
        else if ! [ project-exists $(API_PATH) ]
        {
            echo "[pwiz_aux/msrc/data/vendor_readers/ABI] Missing ABI API: Reader_ABI can only identify RAW files, not read them." ;
        }
        else if ! [ path.exists $(API_PATH)/ABSciex.DataAccess.WiffFileDataReader.dll ]
        {
            echo "[pwiz_aux/msrc/data/vendor_readers/ABI] Missing WiffFileDataReader DLL: Reader_ABI can only identify WIFF files, not read them." ;
        }
    }
    return $(result) ;
}

lib pwiz_aux_msrc_reader_abi
    : # sources
        Reader_ABI.cpp
        SpectrumList_ABI.cpp
        ChromatogramList_ABI.cpp
    : # requirements
        <conditional>@vendor-api-requirements
        <library>$(PWIZ_ROOT_PATH)/pwiz/data/msdata//pwiz_data_msdata
    : # default-build
    : # usage-requirements
		<conditional>@vendor-api-usage-requirements
        <library>$(PWIZ_ROOT_PATH)/pwiz/data/msdata//pwiz_data_msdata
    ;

local generate-mzML = [ MATCH (--generate-mzML) : [ modules.peek : ARGV ] ] ;

# special run target for Reader_ABI_Test, which needs external data 
# use --preserve-test-targets to prevent bjam from deleting the executable
run Reader_ABI_Test.cpp
    : # args
        \"$(TEST_DATA_PATH)\" $(generate-mzML)
    : # input-files
    : # requirements
        <library>pwiz_aux_msrc_reader_abi
    : # target name
        Reader_ABI_Test 
    : # default-build
    ;

