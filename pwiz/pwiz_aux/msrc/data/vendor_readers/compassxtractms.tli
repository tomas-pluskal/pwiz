// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (621bdc2a).
//
// c:\bumbershoot\src\pwiz-src\build\pwiz_aux\msrc\data\vendor_readers\msvc-9.0\release\link-static\runtime-link-static\threading-multi\compassxtractms.tli
//
// Wrapper implementations for Win32 type library CompassXtractMS.dll
// compiler-generated file created 12/31/08 at 14:23:07 - DO NOT EDIT!

#pragma once

//
// interface IMSSpectrumParameter wrapper method implementations
//

inline _bstr_t IMSSpectrumParameter::GetGroupName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GroupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMSSpectrumParameter::GetParameterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParameterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMSSpectrumParameter::GetParameterUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ParameterUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IMSSpectrumParameter::GetParameterValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ParameterValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IMSSpectrumParameterCollection wrapper method implementations
//

inline long IMSSpectrumParameterCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IMSSpectrumParameterCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IMSSpectrumParameterPtr IMSSpectrumParameterCollection::GetItem ( const _variant_t & index ) {
    struct IMSSpectrumParameter * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMSSpectrumParameterPtr(_result, false);
}

//
// interface IMSSpectrum wrapper method implementations
//

inline long IMSSpectrum::GetMassIntensityValues ( enum SpectrumTypes spectrumType, VARIANT * pMasses, VARIANT * pIntensities ) {
    long _result = 0;
    HRESULT _hr = raw_GetMassIntensityValues(spectrumType, pMasses, pIntensities, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMSSpectrum::GetMSMSStage ( ) {
    long _result = 0;
    HRESULT _hr = get_MSMSStage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IMSSpectrumParameterCollectionPtr IMSSpectrum::GetMSSpectrumParameterCollection ( ) {
    struct IMSSpectrumParameterCollection * _result = 0;
    HRESULT _hr = get_MSSpectrumParameterCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMSSpectrumParameterCollectionPtr(_result, false);
}

inline double IMSSpectrum::GetRetentionTime ( ) {
    double _result = 0;
    HRESULT _hr = get_RetentionTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMSSpectrum::GetIsolationData ( VARIANT * pMasses, SAFEARRAY * * pIsolationModi ) {
    long _result = 0;
    HRESULT _hr = raw_GetIsolationData(pMasses, pIsolationModi, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMSSpectrum::GetFragmentationData ( VARIANT * pMasses, SAFEARRAY * * pFragmentationModi ) {
    long _result = 0;
    HRESULT _hr = raw_GetFragmentationData(pMasses, pFragmentationModi, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum SpectrumPolarity IMSSpectrum::GetPolarity ( ) {
    enum SpectrumPolarity _result;
    HRESULT _hr = get_Polarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMSSpectrumCollection wrapper method implementations
//

inline long IMSSpectrumCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IMSSpectrumCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IMSSpectrumPtr IMSSpectrumCollection::GetItem ( long index ) {
    struct IMSSpectrum * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMSSpectrumPtr(_result, false);
}

//
// interface IMSAnalysis wrapper method implementations
//

inline IMSSpectrumCollectionPtr IMSAnalysis::GetMSSpectrumCollection ( ) {
    struct IMSSpectrumCollection * _result = 0;
    HRESULT _hr = get_MSSpectrumCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMSSpectrumCollectionPtr(_result, false);
}

inline HRESULT IMSAnalysis::Open ( _bstr_t DataFilePath ) {
    HRESULT _hr = raw_Open(DataFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMSAnalysis::GetOperatorName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatorName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMSAnalysis::GetAnalysisName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AnalysisName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IMSAnalysis::GetAnalysisDateTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_AnalysisDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMSAnalysis::GetAnalysisDateTimeIsoString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AnalysisDateTimeIsoString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMSAnalysis::GetSampleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SampleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMSAnalysis::GetMethodName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MethodName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum InstrumentFamily IMSAnalysis::GetInstrumentFamily ( ) {
    enum InstrumentFamily _result;
    HRESULT _hr = get_InstrumentFamily(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMSAnalysis::GetInstrumentDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstrumentDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMSAnalysis::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMSSpectrumEnumerator wrapper method implementations
//

inline HRESULT IMSSpectrumEnumerator::Next ( unsigned long celt, VARIANT * regelt, unsigned long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, regelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSSpectrumEnumerator::Skip ( unsigned long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSSpectrumEnumerator::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEnumVARIANTPtr IMSSpectrumEnumerator::Clone ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

//
// interface IMSSpectrumParameterEnumerator wrapper method implementations
//

inline HRESULT IMSSpectrumParameterEnumerator::Next ( unsigned long celt, VARIANT * regelt, unsigned long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, regelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSSpectrumParameterEnumerator::Skip ( unsigned long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSSpectrumParameterEnumerator::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IEnumVARIANTPtr IMSSpectrumParameterEnumerator::Clone ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}
