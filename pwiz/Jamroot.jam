#
# Jamroot (pwiz) 
#
#
# Original author: Darren Kessner <Darren.Kessner@cshs.org>
#
# Copyright 2008 Spielberg Family Center for Applied Proteomics
#   Cedars-Sinai Medical Center, Los Angeles, California  90048
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import testing ; # needed to enable unit-test rule

path-constant PWIZ_ROOT_PATH : . ;

project pwiz 
    : requirements 
        <include>$(PWIZ_ROOT_PATH)/pwiz
        <include>$(PWIZ_ROOT_PATH)/pwiz_aux
        <include>$(PWIZ_ROOT_PATH)/libraries/boost_1_36_0
        <include>$(PWIZ_ROOT_PATH)/libraries/zlib-1.2.3

        <toolset>gcc,<link>shared:<runtime-link>shared

        # special msvc hacks
        <toolset>msvc:<define>WIN32                     # windows
        <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE  # don't deprecate the standard library 
        <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE  # don't deprecate the standard library 
        <toolset>msvc:<define>_SECURE_SCL_THROWS=1      # checked iterators throw instead of crash  
        <toolset>msvc:<define>_USE_MATH_DEFINES         # for M_PI in <cmath>
        <toolset>msvc:<cxxflags>/wd4100                 # warning: unreferenced formal parameter
        <toolset>msvc:<cxxflags>/wd4512                 # warning: assignment operator could not be generated
        <toolset>msvc:<cxxflags>/wd4127                 # warning: conditional expression is constant (boost::lexical_cast)
        <toolset>msvc:<cxxflags>/wd4701                 # warning: potentially uninitialized local variable 'result' used (boost::lexical_cast, debug)
        <toolset>msvc:<cxxflags>/wd4245                 # warning: conversion from 'type1' to 'type2', signed/unsigned mismatch (boost/filesystem/convenience.hpp)
        <toolset>msvc:<cxxflags>/wd4251                 # warning: class needs to have dll-interface to be used by clients of class
        <toolset>msvc:<cxxflags>/wd4267	                # warning: conversion from 'type1' to 'type2', possible loss of data (boost::lexical_cast)
        <toolset>msvc:<cxxflags>/wd4244                 # warning: conversion from 'int' to 'unsigned short', possible loss of data (boost/date_time/microsec_time_clock.hpp)
        <toolset>msvc:<cxxflags>/wd4275                 # warning: non dll-interface class 'base' used as base for dll-interface class 'derived'

        # special gcc hack - Cygwin gcc 3.4.4, Ubuntu gcc 4.1.2 
        # warning: '__cur' might be used uninitialized in this function 
        <toolset>gcc:<cxxflags>-Wno-uninitialized   

        # special Cygwin gcc-3.4.4 hack
        # linker "multiple definition" error on inclusion of boost-1.34.1 filesystem headers  
        <toolset>gcc-3.4.4:<linkflags>-Wl,--allow-multiple-definition
        <toolset>gcc-mingw-3.4.5:<linkflags>-Wl,--allow-multiple-definition

        # allow "long long" even with -pedantic
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>darwin:<cxxflags>-Wno-long-long

        # don't call 'strip' -- causes 'Bus error' in some cases
        #  e.g. find_if with inline predicate
        <toolset>darwin:<debug-symbols>on
        
        # use of boost::thread requires multithreaded runtime
        <threading>multi

    : build-dir build
    : usage-requirements
        <include>.
    : default-build
        release
        <link>static
        <runtime-link>static
        #<warnings-as-errors>on
        <warnings>all
        <threading>multi
    ;


# external library declarations

lib pthread 
    : # sources
    : # requirements
        <name>pthread  
        <link>shared
        <toolset>gcc:<linkflags>-pthread # sometimes segfault without this -- dk
    : # default-build
    : # usage-requirements
        <toolset>gcc:<linkflags>-pthread # sometimes segfault without this -- dk
    ;

lib jpeg png z : : <threading>multi ;
lib gd : jpeg png z : <name>gd <threading>multi ;
lib gd : : <toolset>msvc <name>bgd <search>$(PWIZ_ROOT_PATH)/libraries : : <include>$(PWIZ_ROOT_PATH)/libraries/gd-2.0.33 ;

lib fftw3 : : <threading>multi ;
lib fftw3 : : <threading>multi <toolset>msvc <name>libfftw3-3 <search>$(PWIZ_ROOT_PATH)/libraries : : <include>$(PWIZ_ROOT_PATH)/libraries/fftw-3.1.2/api ;

local .boost-build-file = [ modules.peek : .boost-build-file ] ;
tmp = [ modules.peek : BOOST_BUILD_PATH ] ;
tmp += $(PWIZ_ROOT_PATH)/pwiz $(PWIZ_ROOT_PATH)/libraries ;
modules.poke : BOOST_BUILD_PATH : $(tmp) ;

if [ modules.peek : NT ]
{
	SHELL "$(PWIZ_ROOT_PATH)/libraries/untar_boost.bat $(PWIZ_ROOT_PATH)" : no-output ;
	SHELL "$(PWIZ_ROOT_PATH)/libraries/untar_zlib.bat $(PWIZ_ROOT_PATH)" : no-output ;
	SHELL "$(PWIZ_ROOT_PATH)/libraries/untar_gd.bat $(PWIZ_ROOT_PATH)" : no-output ;
# TODO: warn about GPL? ... SHELL "$(PWIZ_ROOT_PATH)/libraries/untar_fftw.bat $(PWIZ_ROOT_PATH)" : no-output ;
}
else if [ modules.peek : UNIX ]
{
	SHELL "$(PWIZ_ROOT_PATH)/libraries/untar_boost.sh $(PWIZ_ROOT_PATH)" : no-output ;
	SHELL "$(PWIZ_ROOT_PATH)/libraries/untar_zlib.sh $(PWIZ_ROOT_PATH)" : no-output ;
}

path-constant BOOST_SOURCE : $(PWIZ_ROOT_PATH)/libraries/boost_1_36_0 ;

using ext-boost : 1.36.0 : $(BOOST_SOURCE) ;


# build/install


build-project pwiz ;
build-project pwiz_aux ;
build-project pwiz_tools ;


install executables
    : pwiz_tools/commandline
      pwiz/examples
    : <install-type>EXE
      <toolset>gcc,<variant>release:<location>build/gcc-release
      <toolset>gcc,<variant>debug:<location>build/gcc-debug
      <toolset>msvc,<variant>release:<location>build/msvc-release
      <toolset>msvc,<variant>debug:<location>build/msvc-debug
      <toolset>darwin,<variant>release:<location>build/darwin-release
      <toolset>darwin,<variant>debug:<location>build/darwin-debug
    ;


install libraries 
    : pwiz_tools/commandline
      pwiz/examples
    : <install-type>LIB
      <install-dependencies>on
      <toolset>gcc,<variant>release:<location>build/gcc-release
      <toolset>gcc,<variant>debug:<location>build/gcc-debug
      <toolset>msvc,<variant>release:<location>build/msvc-release
      <toolset>msvc,<variant>debug:<location>build/msvc-debug
      <toolset>darwin,<variant>release:<location>build/darwin-release
      <toolset>darwin,<variant>debug:<location>build/darwin-debug
    ;

explicit libraries ;

