#!/bin/bash

pwiz_root=$(dirname $0)/../..
pushd $pwiz_root > /dev/null
# make it fully qualified
pwiz_root=`pwd`

if [ ! -f "$pwiz_root/Jamroot.jam" ]
then
    echo "expected Jamroot.jam to be found in pwiz root directory: $pwiz_root"
    echo "make sure you run the autobuild script from the pwiz root directory"
    echo "##teamcity[message text='Failed to find pwiz root directory' status='FAILURE']"
    exit 1
fi

source scripts/include/common

toolset=$(get_toolset)
os=$(get_os)
date_tag=$(date +%y%m%d_%H%M)
build=$pwiz_root/build
outdir=$build/autobuild
log=$outdir/log
err=$outdir/err


function copy_files()
{
    if [ "$1" != "" -a -d "$1" ]
    then
        postdir=$1
        echo "Copying files to $1." | tee -a $log $err
        cp -rv $outdir $postdir
        latest_name_base=latest_${os}.zip
        cp $postdir/$outdir_base/$package_name_base $postdir/$latest_name_base
    fi
}

function echo_info()
{
    echo "##teamcity[message text='$*']" | tee -a $log $err
    echo "##teamcity[progressMessage '$*']"
}

function echo_error()
{
    echo "##teamcity[message text='$*' status='ERROR']" | tee -a $log $err
    copy_files $1
    exit 1
}


# clean build directory always?
echo "##teamcity[message text='Cleaning build directory...']"
echo "##teamcity[progressMessage text='Cleaning build directory...']"
rm -Rf $build
mkdir -p $outdir

echo "autobuild" | tee -a $log $err
date | tee -a $log $err
uname -a | tee -a $log $err
echo "toolset: $toolset" | tee -a $log $err
echo "os: $os" | tee -a $log $err
echo "date_tag: $date_tag" | tee -a $log $err
echo "outdir: $outdir" | tee -a $log $err
echo | tee -a $log $err


echo_info "Extracting boost..."
( libraries/untar_boost.sh . >> $log 2> $err )
if [ ! -d $pwiz_root/libraries/boost_1_39_0 ]
then
    echo_error "Failed to extract boost: $pwiz_root/libraries/boost_1_39_0"
fi

# build bjam and add bjam output dir to PATH
bjam_path=`ls -1 -d $pwiz_root/libraries/boost-build/jam_src/bin.* | head -1`
if [ -d "$bjam_path" ]
then
    export BOOST_BUILD_PATH=$pwiz_root/libraries/boost-build
    PATH=$PATH:$bjam_path
else
    echo_info "Extracting boost-build..."
    ( libraries/untar_boost-build.sh . >> $log 2> $err )
    if [ ! -d $pwiz_root/libraries/boost-build ]
    then
        echo_error "Failed to extract boost-build: $pwiz_root/libraries/boost-build"
    fi

    echo_info "Building bjam..."
    pushd libraries/boost-build/jam_src > /dev/null
    rm -Rf bin.* > /dev/null
    if ! ./build.sh >> $log 2>> $err
    then
        echo_error "Error building bjam"
    fi
    popd

    export BOOST_BUILD_PATH=$pwiz_root/libraries/boost-build
    bjam_path=`ls -1 -d $pwiz_root/libraries/boost-build/jam_src/bin.* | head -1`
    PATH=$PATH:$bjam_path
fi

echo bjam_path: $bjam_path | tee -a $log $err
echo BOOST_BUILD_PATH: $BOOST_BUILD_PATH | tee -a $log $err
echo | tee -a $log $err


echo_info "Extracting fftw..."
( libraries/untar_fftw.sh . >> $log 2>> $err )
if [ ! -d $pwiz_root/libraries/fftw-3.1.2 ]
then
    echo_error "Failed to extract fftw: $pwiz_root/libraries/fftw-3.1.2"
fi

pushd $pwiz_root/libraries/fftw-3.1.2 > /dev/null
if [ ! -f Makefile ]
then
    echo_info "Configuring fftw3..."
    ./configure >> $log 2>> $err
fi
# XXX: only compile if necessary
echo_info "Building fftw..."
if ! make >> $log 2>> $err
then
    echo_error "Error compiling fftw"
fi
popd



echo_info "Building pwiz..."
rm -rf build/$toolset-release/*
if ! bjam -a | tee $log $err
then
    echo_error "Error in build."
fi
echo | tee -a $log $err


echo_info "Testing build..."
if ! scripts/test/test_msconvert | tee -a $log $err
then
    echo_error "Error in test_msconvert."
fi
echo | tee -a $log $err


echo_info "Creating package."
package_name_base=${date_tag}_${os}.zip
package_name=$outdir/$package_name_base
if ! zip -j $package_name build/${toolset}-release/* >> $log 2>> $err
then
    echo_error "Error creating package."
fi
echo | tee -a $log $err

copy_files $1

