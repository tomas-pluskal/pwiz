import modules ;

if [ modules.peek : NT ] {

project
    : requirements
        <using-clr>true # requires hacked msvc.jam
        <define>UNICODE
        <define>_UNICODE
    : usage-requirements
        <define>UNICODE
        <define>_UNICODE
    : default-build
        release
	;

local bound_libs =
        <library>../../../data/msdata//pwiz_data_msdata/<link>static/<asynch-exceptions>off
        <library>../../../data/msdata//pwiz_data_msdata_examples/<link>static/<asynch-exceptions>off
        <library>../../../analysis//pwiz_analysis_version/<link>static/<asynch-exceptions>off
        <library>../../../utility/proteome/<link>static/<asynch-exceptions>off
        <library>../../../../pwiz_tools/common//pwiz_tools_common/<link>static/<asynch-exceptions>off
        <library>../../../analysis/spectrum_processing/<link>static/<asynch-exceptions>off
        <library>../../../analysis/chromatogram_processing/<link>static/<asynch-exceptions>off
        # HACK: not needed when using hacked tss_pe.cpp
        #<library>/ext/boost//thread/<link>shared/<asynch-exceptions>off # link=shared required for thread specific storage
        #<library>/ext/boost//thread/<link>static
    ;

path-constant CLI_ROOT : . ;

# build XDC documentation from source files
obj CVParam    : CVParam.cpp    : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/CVParam.xdc" ;
obj Diff       : Diff.cpp       : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/Diff.xdc" ;
obj MSData     : MSData.cpp     : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/MSData.xdc" ;
obj MSDataFile : MSDataFile.cpp : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/MSDataFile.xdc" ;
obj Reader     : Reader.cpp     : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/Reader.xdc" ;
obj proteome   : proteome.cpp   : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/proteome.xdc" ;
obj examples   : examples.cpp   : $(bound_libs) <cxxflags>"/doc$(CLI_ROOT)/examples.xdc" ;

lib pwiz_bindings_cli
    : # sources
        CVParam
        Diff
        MSData
        MSDataFile
        Reader
        proteome
        examples
    : # requirements
        $(bound_libs) 
        <linkflags>"/MACHINE:X86 /FIXED:No" # /KEYFILE:$(CLI_ROOT)/signature.snk"
    : # default-build
    : # usage-requirements
        $(bound_libs)
    ;


actions do_update_embedded_manifest
{
    REM support both MSVC 8 and 9
    IF EXIST "C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat" CALL "C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat" x86 >nul
    IF EXIST "C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" CALL "C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" x86 >nul
    REM echo $(>)
    REM sn.exe /q /Ra $(>[0]) $(CLI_ROOT)/signature.snk
}

import notfile ;
notfile update_embedded_manifest : @do_update_embedded_manifest : pwiz_bindings_cli ;
#notfile update_embedded_manifest_test : @do_update_embedded_manifest : pwiz_bindings_cli/<location>$(CLI_ROOT)/test : <location>$(CLI_ROOT)/test ;

# merge XDC files to create XML documentation alongside the output assembly
actions do_merge_xdc_files
{
    REM support both MSVC 8 and 9
    IF EXIST "C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat" CALL "C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat" x86 >nul
    IF EXIST "C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" CALL "C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" x86 >nul
    xdcmake.exe /nologo $(CLI_ROOT)/*.xdc /out:$(>[0]:D)/pwiz_bindings_cli.xml
    del $(CLI_ROOT)\\*.xdc
}

notfile merge_xdc_files : @do_merge_xdc_files : pwiz_bindings_cli ;


#
# cvgen is a program that generates cv.hpp from .obo files (passed as args)
# usage:
#  bjam cv.hpp (creates cv.hpp in the source directory)
#

exe cvgen_cli
    : # sources
        cvgen_cli.cpp
        ../../../data/msdata//pwiz_data_msdata_obo
    : # requirements
        <library>/ext/boost//filesystem
        <link>static
    ;
explicit cvgen_cli ;


install install_cvgen_cli
    : cvgen_cli
    : <location>.
    ;
explicit install_cvgen_cli ;

actions do_cvgen_cli
{
   echo calling bjam install_cvgen_cli
   $(>[1]:P:T)\\..\\..\\utility\\bindings\\CLI\\cvgen_cli $(>)
}

make cv.hpp : ../../../data/msdata/psi-ms.obo ../../../data/msdata/unit.obo : do_cvgen_cli : <dependency>install_cvgen_cli ;
explicit cv.hpp ;


import package ;
local install-requirements = <install-dependencies>on ;
install-requirements += <install-default-prefix>"C:/Program Files/ProteoWizard/bin" ;

package.install install
    : $(install-requirements) release
    : 
    : pwiz_bindings_cli
    : # no headers
    ;
explicit install ;

alias unit-test-requirements
    : # sources
    : # requirements
        <using-clr>true <dependency>pwiz_bindings_cli <assembly>pwiz_bindings_cli
    : # default-build
    : # usage-requirements
        <using-clr>true <dependency>pwiz_bindings_cli <assembly>pwiz_bindings_cli
    ;

unit-test MSDataTest : MSDataTest.cpp : <use>unit-test-requirements ;
unit-test DiffTest : DiffTest.cpp : <use>unit-test-requirements ;
unit-test MSDataFileTest : MSDataFileTest.cpp : <use>unit-test-requirements ;
explicit MSDataFileTest ;

}
