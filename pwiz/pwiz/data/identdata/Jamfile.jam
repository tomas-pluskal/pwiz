#
# $Id$
#
#
# Original author: Robert Burke <robetr.burke@proteowizard.org>
#
# Copyright 2009 Spielberg Family Center for Applied Proteomics
#   University of Southern California, Los Angeles, California  90033
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 

import path tar ;

project
    : requirements
        <toolset>gcc:<cxxflags>-fno-strict-aliasing
        # hacks to allow building with <warnings>all with MSVC and boost
        <toolset>msvc:<cxxflags>/wd4702 # warning: unreachable code # (boost/numeric/ublas/lu.hpp)
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
;


# -fno-strict-aliasing necessary to avoid warnings from gcc 4.1+
#  with regards to float <-> dword conversions during en/decoding 
# gcc 4.1.2 regression bug: 
# -O2 without -fno-strict-aliasing causes miscompilation in MSRunPeaksEncoder.cpp 

# Add MascotReader if we're in a supported OS & platform
import os ;
import modules ;
import path ;

rule msparser-path ( properties * )
{
    # Assign the most likely msparser library path
    local msparser_path_arg = [ MATCH --msparser-path=(.*) : [ modules.peek : ARGV ] ] ;

    local parser-path ;
    if $(msparser_path_arg)
    {
        lib-location = $(msparser_path_arg) ;
    }
    else if "NT" in [ modules.peek : OS ]
    {
        lib-location = [ mascot-parser-location $(properties) ] ;
    } 
    else if "LINUX" in [ modules.peek : OS ]
    {
        lib-location = "/usr/local/msparser" ;
    }

    # Check for msparser existence.
    if "NT" in [ modules.peek : OS ] && [ path.exists $(lib-location)/lib/msparser.lib ]        
    {
        if ! $(.warn-once)
        {
            .warn-once = true ;
            echo "Using Mascot Parser in $(lib-location)" ;
        }
        return $(lib-location) ;
    }
    else if "LINUX" in [ modules.peek : OS ] && [ path.exists $(lib-location)/lib/libmsparser.a ]
    {
        if ! $(.warn-once)
        {
            .warn-once = true ;
            echo "Using Mascot Parser in $(lib-location)" ;
        }
        return $(lib-location) ;
    }
    else if ! $(.warn-once)
    {
        .warn-once = true ;
        
        if $(lib-location)
        {
            echo "Warning: No Mascot Parser found at $(lib-location)." ;
        }
        else
        {
            echo "Warning: No Mascot Parser found." ;
        }
        echo "         mzIdentML support for Mascot will be disabled." ;
    }
}

rule mascot-api-requirements ( properties * )
{
    local result ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        # CONSIDER: Should this be checking msvc?
        if "NT" in [ modules.peek : OS ]
        {
            result += <include>$(PWIZ_ROOT_PATH)/libraries/msvc_extra ;
        }
        result += <include>$(msparser_path)/include ;
        result += <source>MascotReader.cpp ;
    }
    else
    {
        result += <source>MascotReader_dummy.cpp ;
    }
    return $(result) [ mascot-api-usage-requirements $(properties) ] ;
}

rule mascot-api-usage-requirements ( properties * )
{
    local result ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        if "NT" in [ modules.peek : OS ]
        {
            if <variant>debug in $(properties) ||
                <debug-symbols>on in $(properties)
            {   
                result += <library>$(msparser_path)/lib/msparserD.lib ;
            }
            else
            {
                result += <library>$(msparser_path)/lib/msparser.lib ;
            }
        } 
        else if "LINUX" in [ modules.peek : OS ]
        {
            result += <library>$(msparser_path)/libmsparser.a ;
        }
    }

    return $(result) ;
}


lib pwiz_data_identdata_version : Version.cpp : <link>static <conditional>@static-with-fpic ;


lib pwiz_data_identdata 
    : # sources
        Diff.cpp
        IdentData.cpp
        IdentDataFile.cpp
        Reader.cpp
        DefaultReaderList.cpp
        IO.cpp
        Serializer_mzid.cpp
        Serializer_pepXML.cpp
        Serializer_Text.cpp
        Pep2MzIdent.cpp
        DelimWriter.cpp
        DelimReader.cpp
        References.cpp
        KwCVMap.cpp
    : # requirements
        <library>pwiz_data_identdata_version
        <library>../proteome//pwiz_data_proteome
        <library>../common//pwiz_data_common
        <library>../msdata//pwiz_data_msdata
        <library>../misc//pwiz_data_misc
        <library>../../utility/chemistry//pwiz_utility_chemistry
        <library>/ext/boost//iostreams/<boost-iostreams-zlib>on
        <library>/ext/boost//regex
        <conditional>@mascot-api-requirements
    : # default-build
    : # usage-requirements
        <library>pwiz_data_identdata_version
        <library>../proteome//pwiz_data_proteome
        <library>../common//pwiz_data_common
        <library>../msdata//pwiz_data_msdata
        <library>../misc//pwiz_data_misc
        <library>../../utility/chemistry//pwiz_utility_chemistry
        <library>/ext/boost//iostreams/<boost-iostreams-zlib>on
        <library>/ext/boost//regex
        <conditional>@mascot-api-usage-requirements
    ;


lib pwiz_data_identdata_examples
    :   examples.cpp
    :   <library>pwiz_data_identdata
    :
    :   <library>pwiz_data_identdata
    ;

rule install-requirements ( properties * )
{
    local msparser_path = [ msparser-path $(properties) ] ;
    if "NT" in [ modules.peek : OS ] && $(msparser_path)
    {
        if <variant>debug in $(properties) ||
            <debug-symbols>on in $(properties)
        {   
            return <source>$(msparser_path)/lib/msparserD.dll
                <source>$(msparser_path)/../config/unimod_2.xsd ;
        }
        else
        {
            return <source>$(msparser_path)/lib/msparser.dll
                <source>$(msparser_path)/../config/unimod_2.xsd ;
        }
    }
}

install install_pwiz_identdata
    : : <conditional>@install-requirements
    ;

explicit install_pwiz_identdata ;

#
# testing tools
#

exe ExtendedReaderTest
    : ExtendedReadTest.cpp
      pwiz_data_identdata
    : <include>../..
    ;
explicit ExtendedReaderTest ;


#
# unit tests (ordered by dependency)
#

unit-test-if-exists IdentDataTest : IdentDataTest.cpp pwiz_data_identdata pwiz_data_identdata_examples ; 
unit-test-if-exists DiffTest : DiffTest.cpp pwiz_data_identdata pwiz_data_identdata_examples ;
unit-test-if-exists ReferencesTest : ReferencesTest.cpp pwiz_data_identdata ;
unit-test-if-exists IOTest : IOTest.cpp pwiz_data_identdata pwiz_data_identdata_examples ;
unit-test-if-exists Serializer_mzid_Test : Serializer_mzid_Test.cpp pwiz_data_identdata pwiz_data_identdata_examples ;
unit-test-if-exists Serializer_pepXML_Test : Serializer_pepXML_Test.cpp pwiz_data_identdata pwiz_data_identdata_examples ;
unit-test-if-exists Serializer_Text_Test : Serializer_Text_Test.cpp pwiz_data_identdata pwiz_data_identdata_examples ;
unit-test-if-exists KwCVMapTest : KwCVMapTest.cpp pwiz_data_identdata pwiz_data_identdata_examples ;
#unit-test-if-exists Pep2MzIdent : Pep2MzIdentTest.cpp pwiz_data_identdata ;
#unit-test-if-exists TraDataFileTest : TraDataFileTest.cpp pwiz_data_tradata pwiz_data_tradata_examples /ext/boost//filesystem ;
#unit-test-if-exists ReaderTest : ReaderTest.cpp pwiz_data_tradata ;


