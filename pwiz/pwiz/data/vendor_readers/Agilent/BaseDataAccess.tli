// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (23f7057d).
//
// c:\bumbershoot\src\pwiz-src\build\pwiz\data\vendor_readers\agilent\msvc-9.0\release\link-static\threading-multi\basedataaccess.tli
//
// Wrapper implementations for Win32 type library BaseDataAccess.tlb
// compiler-generated file created 05/19/09 at 09:56:34 - DO NOT EDIT!

#pragma once

//
// interface IBDAAcquisitionData wrapper method implementations
//

inline SAFEARRAY * IBDAAcquisitionData::GetBPMassArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_BPMassArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDAAcquisitionData::GetPointCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PointCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAAcquisitionData::GetRetentionTimeArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_RetentionTimeArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBDAActualData wrapper method implementations
//

inline _bstr_t IBDAActualData::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAActualData::PutCategory ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Category(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBDAActualData::GetDataValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DataValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBDAActualData::PutRefDataValue ( const _variant_t & pRetVal ) {
    HRESULT _hr = putref_DataValue(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum DisplayEffectType IBDAActualData::GetDisplayEffectType ( ) {
    enum DisplayEffectType _result;
    HRESULT _hr = get_DisplayEffectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAActualData::PutDisplayEffectType ( enum DisplayEffectType pRetVal ) {
    HRESULT _hr = put_DisplayEffectType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAActualData::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAActualData::PutDisplayName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_DisplayName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAActualData::GetDisplayValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAActualData::PutDisplayValue ( _bstr_t pRetVal ) {
    HRESULT _hr = put_DisplayValue(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAActualData::GetInternalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InternalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAActualData::PutInternalName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_InternalName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAActualData::GetUnit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Unit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAActualData::PutUnit ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Unit(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBDAMSScanTypeInformation wrapper method implementations
//

inline enum MSScanType IBDAMSScanTypeInformation::GetMSScanType ( ) {
    enum MSScanType _result;
    HRESULT _hr = get_MSScanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonPolarity IBDAMSScanTypeInformation::GetIonPolarities ( ) {
    enum IonPolarity _result;
    HRESULT _hr = get_IonPolarities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAMSScanTypeInformation::GetMzOfInterest ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MzOfInterest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAMSScanTypeInformation::Contains ( double MzOfInterest ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(MzOfInterest, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDAMSScanTypeInformationPtr IBDAMSScanTypeInformation::Clone ( ) {
    struct IBDAMSScanTypeInformation * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAMSScanTypeInformationPtr(_result, false);
}

//
// interface IBDAMSScanFileInformation wrapper method implementations
//

inline VARIANT_BOOL IBDAMSScanFileInformation::GetFileHasMassSpectralData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FileHasMassSpectralData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAMSScanFileInformation::GetMzScanRangeMinimum ( ) {
    double _result = 0;
    HRESULT _hr = get_MzScanRangeMinimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAMSScanFileInformation::GetMzScanRangeMaximum ( ) {
    double _result = 0;
    HRESULT _hr = get_MzScanRangeMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSScanType IBDAMSScanFileInformation::GetScanTypes ( ) {
    enum MSScanType _result;
    HRESULT _hr = get_ScanTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSStorageMode IBDAMSScanFileInformation::GetSpectraFormat ( ) {
    enum MSStorageMode _result;
    HRESULT _hr = get_SpectraFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonizationMode IBDAMSScanFileInformation::GetIonModes ( ) {
    enum IonizationMode _result;
    HRESULT _hr = get_IonModes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum DeviceType IBDAMSScanFileInformation::GetDeviceType ( ) {
    enum DeviceType _result;
    HRESULT _hr = get_DeviceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IRangePtr IBDAMSScanFileInformation::GetMassRange ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_MassRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline enum MSLevel IBDAMSScanFileInformation::GetMSLevel ( ) {
    enum MSLevel _result;
    HRESULT _hr = get_MSLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAMSScanFileInformation::GetFragmentorVoltage ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_FragmentorVoltage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAMSScanFileInformation::GetCollisionEnergy ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_CollisionEnergy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonPolarity IBDAMSScanFileInformation::GetIonPolarity ( ) {
    enum IonPolarity _result;
    HRESULT _hr = get_IonPolarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDAMSScanFileInformation::GetScanTypesInformationCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ScanTypesInformationCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAMSScanFileInformation::GetMRMTransitions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MRMTransitions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAMSScanFileInformation::GetSIMIons ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SIMIons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAMSScanFileInformation::GetScanMethodNumbers ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ScanMethodNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline __int64 IBDAMSScanFileInformation::GetTotalScansPresent ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_TotalScansPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAMSScanFileInformation::IsFixedCycleLengthDataPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFixedCycleLengthDataPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAMSScanFileInformation::IsMultipleSpectraPerScanPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMultipleSpectraPerScanPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDAMSScanTypeInformationPtr IBDAMSScanFileInformation::GetMSScanTypeInformation ( enum MSScanType scanType ) {
    struct IBDAMSScanTypeInformation * _result = 0;
    HRESULT _hr = raw_GetMSScanTypeInformation(scanType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAMSScanTypeInformationPtr(_result, false);
}

inline SAFEARRAY * IBDAMSScanFileInformation::GetMSScanTypeInformation_2 ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetMSScanTypeInformation_2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAMSScanFileInformation::Contains ( enum MSScanType key ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Contains(key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDAMSScanFileInformationPtr IBDAMSScanFileInformation::Clone ( ) {
    struct IBDAMSScanFileInformation * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAMSScanFileInformationPtr(_result, false);
}

//
// interface IBDAFileInformation wrapper method implementations
//

inline _bstr_t IBDAFileInformation::GetDataFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IBDAFileInformation::GetAcquisitionTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_AcquisitionTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAFileInformation::IsStoredDataTypePresent ( _bstr_t deviceNameOrdinalNumber, enum StoredDataType desiredType ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsStoredDataTypePresent(deviceNameOrdinalNumber, desiredType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IBDAFileInformation::GetDeviceName ( enum DeviceType devType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDeviceName(devType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IBDAFileInformation::IsNonMSDataPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsNonMSDataPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAFileInformation::IsUVSpectralDataPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsUVSpectralDataPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum SeparationTechnique IBDAFileInformation::GetSeparationTechnique ( ) {
    enum SeparationTechnique _result;
    HRESULT _hr = get_SeparationTechnique(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAFileInformation::IsUVSignalPresent ( enum DeviceType devType, _bstr_t signalName, BSTR * devName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsUVSignalPresent(devType, signalName, devName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAFileInformation::IsMSDataPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMSDataPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDAMSScanFileInformationPtr IBDAFileInformation::GetMSScanFileInformation ( ) {
    struct IBDAMSScanFileInformation * _result = 0;
    HRESULT _hr = get_MSScanFileInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAMSScanFileInformationPtr(_result, false);
}

inline enum MeasurementType IBDAFileInformation::GetMeasurementType ( ) {
    enum MeasurementType _result;
    HRESULT _hr = get_MeasurementType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IRMStatus IBDAFileInformation::GetIRMStatus ( ) {
    enum IRMStatus _result;
    HRESULT _hr = get_IRMStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDAFileInformationPtr IBDAFileInformation::Clone ( ) {
    struct IBDAFileInformation * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAFileInformationPtr(_result, false);
}

inline HRESULT IBDAFileInformation::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBDASampleData wrapper method implementations
//

inline enum SampleCategory IBDASampleData::GetCategory ( ) {
    enum SampleCategory _result;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASampleData::PutCategory ( enum SampleCategory pRetVal ) {
    HRESULT _hr = put_Category(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IBDASampleData::GetDataValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DataValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IBDASampleData::PutRefDataValue ( const _variant_t & pRetVal ) {
    HRESULT _hr = putref_DataValue(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDASampleData::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDASampleData::PutDisplayName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_DisplayName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDASampleData::GetDisplayValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDASampleData::PutDisplayValue ( _bstr_t pRetVal ) {
    HRESULT _hr = put_DisplayValue(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDASampleData::GetInternalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InternalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDASampleData::PutInternalName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_InternalName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBDAEvents wrapper method implementations
//

inline IUnknownPtr IBDAEvents::GetCancelIndicator ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_CancelIndicator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline void IBDAEvents::PutRefCancelIndicator ( IUnknown * pRetVal ) {
    HRESULT _hr = putref_CancelIndicator(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IBDAEvents::add_ProgressEvent ( IUnknown * value ) {
    HRESULT _hr = raw_add_ProgressEvent(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBDAEvents::remove_ProgressEvent ( IUnknown * value ) {
    HRESULT _hr = raw_remove_ProgressEvent(value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBDASample wrapper method implementations
//

inline _bstr_t IBDASample::GetSampleValue ( _bstr_t InternalName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSampleValue(InternalName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline SAFEARRAY * IBDASample::GetSampleCollection ( enum SampleCategory Category ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSampleCollection(Category, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDASample::GetSampleInfo ( _bstr_t internalNamePrefix ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetSampleInfo(internalNamePrefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBDAActuals wrapper method implementations
//

inline VARIANT_BOOL IBDAActuals::IsActualsPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsActualsPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAActuals::GetActualNames ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetActualNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IBDAActuals::GetActualValue ( _bstr_t actualDisplayName, SAFEARRAY * * xArray, SAFEARRAY * * yArray ) {
    HRESULT _hr = raw_GetActualValue(actualDisplayName, xArray, yArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline SAFEARRAY * IBDAActuals::GetActualCollection ( double timeInMins ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetActualCollection(timeInMins, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBDAUserCalibration wrapper method implementations
//

inline VARIANT_BOOL IBDAUserCalibration::IsUserCalibrationPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsUserCalibrationPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IBDAUserCalibration::SaveUserCalibration ( IUnknown * psetTofCalib, enum IonPolarity IonPolarity ) {
    HRESULT _hr = raw_SaveUserCalibration(psetTofCalib, IonPolarity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBDAUserCalibration::SaveUserCalibration_2 ( IUnknown * psetTofCalib, SAFEARRAY * specfilterArray ) {
    HRESULT _hr = raw_SaveUserCalibration_2(psetTofCalib, specfilterArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBDAUserCalibration::ClearUserCalibration ( ) {
    HRESULT _hr = raw_ClearUserCalibration();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBDADataAccess wrapper method implementations
//

inline VARIANT_BOOL IBDADataAccess::OpenDataFile ( _bstr_t filename ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OpenDataFile(filename, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDADataAccess::OpenDataFile_2 ( _bstr_t filename, VARIANT_BOOL bOptimizeFileHandling ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_OpenDataFile_2(filename, bOptimizeFileHandling, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IBDADataAccess::CloseDataFile ( ) {
    HRESULT _hr = raw_CloseDataFile();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IBDADataAccess::RefreshDataFile ( VARIANT_BOOL * isNewDataPresent ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_RefreshDataFile(isNewDataPresent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDADataAccess::IsAcquisitionStatusComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAcquisitionStatusComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDADataAccess::GetTimeSegmentRanges ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetTimeSegmentRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IRangePtr IBDADataAccess::GetMassRangesOverallLimit ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_MassRangesOverallLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline IBDAFileInformationPtr IBDADataAccess::GetFileInformation ( ) {
    struct IBDAFileInformation * _result = 0;
    HRESULT _hr = get_FileInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAFileInformationPtr(_result, false);
}

inline IBDAMSScanFileInformationPtr IBDADataAccess::GetMSScanInformation ( double retentionTime ) {
    struct IBDAMSScanFileInformation * _result = 0;
    HRESULT _hr = raw_GetMSScanInformation(retentionTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAMSScanFileInformationPtr(_result, false);
}

inline _bstr_t IBDADataAccess::GetDataFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IBDAAcquisitionDataPtr IBDADataAccess::GetAcquisitionMetaData ( ) {
    struct IBDAAcquisitionData * _result = 0;
    HRESULT _hr = get_AcquisitionMetaData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAAcquisitionDataPtr(_result, false);
}

inline VARIANT_BOOL IBDADataAccess::IsDataDependentScanInfoPresent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataDependentScanInfoPresent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDADataAccess::IsDataFileOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsDataFileOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr IBDADataAccess::GetScanRejectionFlagValueTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ScanRejectionFlagValueTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline void IBDADataAccess::PutRefScanRejectionFlagValueTable ( IUnknown * pRetVal ) {
    HRESULT _hr = putref_ScanRejectionFlagValueTable(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IBDADataAccess::ClearScanRejectionFlagValueTable ( ) {
    HRESULT _hr = raw_ClearScanRejectionFlagValueTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IBDADataAccess::PersistScanRejectionFlagValueTable ( ) {
    HRESULT _hr = raw_PersistScanRejectionFlagValueTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IRangePtr IBDADataAccess::GetTimeSegmentDetails ( long timesegmentID, long * numOfScans ) {
    struct IRange * _result = 0;
    HRESULT _hr = raw_GetTimeSegmentDetails(timesegmentID, numOfScans, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline _bstr_t IBDADataAccess::GetSchemaDefaultDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SchemaDefaultDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDADataAccess::PutSchemaDefaultDirectory ( _bstr_t pRetVal ) {
    HRESULT _hr = put_SchemaDefaultDirectory(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum DesiredMSStorageType IBDADataAccess::GetDesiredMSStorageTypeToUse ( ) {
    enum DesiredMSStorageType _result;
    HRESULT _hr = get_DesiredMSStorageTypeToUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDADataAccess::PutDesiredMSStorageTypeToUse ( enum DesiredMSStorageType pRetVal ) {
    HRESULT _hr = put_DesiredMSStorageTypeToUse(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBDAChromData wrapper method implementations
//

inline enum ChromType IBDAChromData::GetChromatogramType ( ) {
    enum ChromType _result;
    HRESULT _hr = get_ChromatogramType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDAChromData::GetTotalDataPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalDataPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAChromData::GetxArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_xArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAChromData::GetyArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_yArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAChromData::GetAcquiredTimeRange ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AcquiredTimeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAChromData::GetMeasuredMassRange ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MeasuredMassRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAChromData::GetMzRegionsWereExcluded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MzRegionsWereExcluded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAChromData::GetAbundanceLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_AbundanceLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAChromData::GetCollisionEnergy ( ) {
    double _result = 0;
    HRESULT _hr = get_CollisionEnergy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAChromData::GetFragmentorVoltage ( ) {
    double _result = 0;
    HRESULT _hr = get_FragmentorVoltage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonizationMode IBDAChromData::GetIonizationMode ( ) {
    enum IonizationMode _result;
    HRESULT _hr = get_IonizationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonPolarity IBDAChromData::GetIonPolarity ( ) {
    enum IonPolarity _result;
    HRESULT _hr = get_IonPolarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSScanType IBDAChromData::GetMSScanType ( ) {
    enum MSScanType _result;
    HRESULT _hr = get_MSScanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSLevel IBDAChromData::GetMSLevelInfo ( ) {
    enum MSLevel _result;
    HRESULT _hr = get_MSLevelInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSStorageMode IBDAChromData::GetMSStorageMode ( ) {
    enum MSStorageMode _result;
    HRESULT _hr = get_MSStorageMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAChromData::GetMzOfInterest ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MzOfInterest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAChromData::GetThreshold ( ) {
    double _result = 0;
    HRESULT _hr = get_Threshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDAChromData::GetSamplingPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_SamplingPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IBDAChromData::GetDeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum DeviceType IBDAChromData::GetDeviceType ( ) {
    enum DeviceType _result;
    HRESULT _hr = get_DeviceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDAChromData::GetOrdinalNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_OrdinalNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDAChromData::GetIsCycleSummed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCycleSummed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IBDAChromData::GetsignalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_signalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IBDAChromData::GetSignalDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignalDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IBDAChromDataPtr IBDAChromData::Clone ( ) {
    struct IBDAChromData * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAChromDataPtr(_result, false);
}

//
// interface IBDASpecData wrapper method implementations
//

inline enum SpecType IBDASpecData::GetSpectrumType ( ) {
    enum SpecType _result;
    HRESULT _hr = get_SpectrumType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDASpecData::GetTotalDataPoints ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalDataPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDASpecData::GetxArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_xArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDASpecData::GetyArray ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_yArray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDASpecData::GetAcquiredTimeRange ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AcquiredTimeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IRangePtr IBDASpecData::GetMeasuredMassRange ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_MeasuredMassRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline long IBDASpecData::GetTotalScanCount ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalScanCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDASpecData::GetAbundanceLimit ( ) {
    double _result = 0;
    HRESULT _hr = get_AbundanceLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDASpecData::GetCollisionEnergy ( ) {
    double _result = 0;
    HRESULT _hr = get_CollisionEnergy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDASpecData::GetFragmentorVoltage ( ) {
    double _result = 0;
    HRESULT _hr = get_FragmentorVoltage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonizationMode IBDASpecData::GetIonizationMode ( ) {
    enum IonizationMode _result;
    HRESULT _hr = get_IonizationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum IonPolarity IBDASpecData::GetIonPolarity ( ) {
    enum IonPolarity _result;
    HRESULT _hr = get_IonPolarity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSScanType IBDASpecData::GetMSScanType ( ) {
    enum MSScanType _result;
    HRESULT _hr = get_MSScanType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSLevel IBDASpecData::GetMSLevelInfo ( ) {
    enum MSLevel _result;
    HRESULT _hr = get_MSLevelInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum MSStorageMode IBDASpecData::GetMSStorageMode ( ) {
    enum MSStorageMode _result;
    HRESULT _hr = get_MSStorageMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDASpecData::GetMzOfInterest ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MzOfInterest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDASpecData::GetThreshold ( ) {
    double _result = 0;
    HRESULT _hr = get_Threshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double IBDASpecData::GetSamplingPeriod ( ) {
    double _result = 0;
    HRESULT _hr = get_SamplingPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IBDASpecData::GetDeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum DeviceType IBDASpecData::GetDeviceType ( ) {
    enum DeviceType _result;
    HRESULT _hr = get_DeviceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDASpecData::GetOrdinalNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_OrdinalNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDASpecData::GetIsDataInMassUnit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDataInMassUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDASpecData::GetPrecursorIon ( long * precursorCount ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetPrecursorIon(precursorCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDASpecDataPtr IBDASpecData::Clone ( ) {
    struct IBDASpecData * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDASpecDataPtr(_result, false);
}

inline HRESULT IBDASpecData::ConvertDataToMassUnits ( ) {
    HRESULT _hr = raw_ConvertDataToMassUnits();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IBDASpecData::GetPrecursorCharge ( long * charge ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPrecursorCharge(charge, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IBDASpecData::GetPrecursorIntensity ( double * precursorIntensity ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPrecursorIntensity(precursorIntensity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDASpecData::GetScanId ( ) {
    long _result = 0;
    HRESULT _hr = get_ScanId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IBDASpecData::GetParentScanId ( ) {
    long _result = 0;
    HRESULT _hr = get_ParentScanId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBDAChromFilter wrapper method implementations
//

inline enum ChromType IBDAChromFilter::GetChromatogramType ( ) {
    enum ChromType _result;
    HRESULT _hr = get_ChromatogramType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutChromatogramType ( enum ChromType pRetVal ) {
    HRESULT _hr = put_ChromatogramType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MSLevel IBDAChromFilter::GetMSLevelFilter ( ) {
    enum MSLevel _result;
    HRESULT _hr = get_MSLevelFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutMSLevelFilter ( enum MSLevel pRetVal ) {
    HRESULT _hr = put_MSLevelFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MSScanType IBDAChromFilter::GetMSScanTypeFilter ( ) {
    enum MSScanType _result;
    HRESULT _hr = get_MSScanTypeFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutMSScanTypeFilter ( enum MSScanType pRetVal ) {
    HRESULT _hr = put_MSScanTypeFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum IonPolarity IBDAChromFilter::GetIonPolarityFilter ( ) {
    enum IonPolarity _result;
    HRESULT _hr = get_IonPolarityFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutIonPolarityFilter ( enum IonPolarity pRetVal ) {
    HRESULT _hr = put_IonPolarityFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IBDAChromFilter::GetMzOfInterestFilter ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MzOfInterestFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutMzOfInterestFilter ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_MzOfInterestFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IBDAChromFilter::GetIncludeMassRanges ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_IncludeMassRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutIncludeMassRanges ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_IncludeMassRanges(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetScanRange ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_ScanRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefScanRange ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_ScanRange(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetFragmentorVoltage ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_FragmentorVoltage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefFragmentorVoltage ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_FragmentorVoltage(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetCollisionEnergy ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_CollisionEnergy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefCollisionEnergy ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_CollisionEnergy(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum IonizationMode IBDAChromFilter::GetIonizationMode ( ) {
    enum IonizationMode _result;
    HRESULT _hr = get_IonizationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutIonizationMode ( enum IonizationMode pRetVal ) {
    HRESULT _hr = put_IonizationMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAChromFilter::GetSingleChromatogramForAllMasses ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SingleChromatogramForAllMasses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutSingleChromatogramForAllMasses ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_SingleChromatogramForAllMasses(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAChromFilter::GetDoCycleSum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DoCycleSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutDoCycleSum ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_DoCycleSum(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAChromFilter::GetExtractOneChromatogramPerScanSegment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractOneChromatogramPerScanSegment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutExtractOneChromatogramPerScanSegment ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ExtractOneChromatogramPerScanSegment(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetScanSegmentNumber ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_ScanSegmentNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefScanSegmentNumber ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_ScanSegmentNumber(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAChromFilter::GetYValueInCounts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_YValueInCounts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutYValueInCounts ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_YValueInCounts(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum DesiredMSStorageType IBDAChromFilter::GetDesiredMSStorageType ( ) {
    enum DesiredMSStorageType _result;
    HRESULT _hr = get_DesiredMSStorageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutDesiredMSStorageType ( enum DesiredMSStorageType pRetVal ) {
    HRESULT _hr = put_DesiredMSStorageType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetChargeStateLimits ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_ChargeStateLimits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefChargeStateLimits ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_ChargeStateLimits(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAChromFilter::GetDeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAChromFilter::PutDeviceName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_DeviceName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline __int64 IBDAChromFilter::GetOrdinalNumber ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_OrdinalNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutOrdinalNumber ( __int64 pRetVal ) {
    HRESULT _hr = put_OrdinalNumber(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAChromFilter::GetsignalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_signalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAChromFilter::PutsignalName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_signalName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetSignalWavelength ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_SignalWavelength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefSignalWavelength ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_SignalWavelength(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAChromFilter::GetUseReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAChromFilter::PutUseReference ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseReference(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDAChromFilter::GetReferenceWavelength ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_ReferenceWavelength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDAChromFilter::PutRefReferenceWavelength ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_ReferenceWavelength(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IBDAChromFilter::GetSignalDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignalDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDAChromFilter::PutSignalDescription ( _bstr_t pRetVal ) {
    HRESULT _hr = put_SignalDescription(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IBDAChromFilterPtr IBDAChromFilter::Clone ( ) {
    struct IBDAChromFilter * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDAChromFilterPtr(_result, false);
}

//
// interface IBDAReadChromatogram wrapper method implementations
//

inline SAFEARRAY * IBDAReadChromatogram::GetChromatogram ( struct IBDAChromFilter * extractParamSet ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetChromatogram(extractParamSet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAReadChromatogram::GetChromatogram_2 ( struct IBDAChromFilter * extractParamSet, SAFEARRAY * excludeMassArray ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetChromatogram_2(extractParamSet, excludeMassArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBDAPeak wrapper method implementations
//

inline double IBDAPeak::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutHeight ( double pRetVal ) {
    HRESULT _hr = put_Height(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeak::GetStartBaselineY ( ) {
    double _result = 0;
    HRESULT _hr = get_StartBaselineY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutStartBaselineY ( double pRetVal ) {
    HRESULT _hr = put_StartBaselineY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeak::GetEndBaselineY ( ) {
    double _result = 0;
    HRESULT _hr = get_EndBaselineY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutEndBaselineY ( double pRetVal ) {
    HRESULT _hr = put_EndBaselineY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeak::GetCenterX ( ) {
    double _result = 0;
    HRESULT _hr = get_CenterX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutCenterX ( double pRetVal ) {
    HRESULT _hr = put_CenterX(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeak::GetCenterY ( ) {
    double _result = 0;
    HRESULT _hr = get_CenterY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutCenterY ( double pRetVal ) {
    HRESULT _hr = put_CenterY(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeak::GetBasePeakMass ( ) {
    double _result = 0;
    HRESULT _hr = get_BasePeakMass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutBasePeakMass ( double pRetVal ) {
    HRESULT _hr = put_BasePeakMass(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IBDAPeak::GetChargeState ( ) {
    long _result = 0;
    HRESULT _hr = get_ChargeState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeak::PutChargeState ( long pRetVal ) {
    HRESULT _hr = put_ChargeState(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBDAPeakSpecFilter wrapper method implementations
//

inline VARIANT_BOOL IBDAPeakSpecFilter::GetUseApexScan ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseApexScan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeakSpecFilter::PutUseApexScan ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseApexScan(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeakSpecFilter::GetPeakHeightThreshold ( ) {
    double _result = 0;
    HRESULT _hr = get_PeakHeightThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeakSpecFilter::PutPeakHeightThreshold ( double pRetVal ) {
    HRESULT _hr = put_PeakHeightThreshold(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAPeakSpecFilter::GetUseTofSaturationFilter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTofSaturationFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeakSpecFilter::PutUseTofSaturationFilter ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTofSaturationFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDAPeakSpecFilter::GetUseTofSaturationMzRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseTofSaturationMzRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeakSpecFilter::PutUseTofSaturationMzRange ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UseTofSaturationMzRange(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline double IBDAPeakSpecFilter::GetTofSaturationThreshold ( ) {
    double _result = 0;
    HRESULT _hr = get_TofSaturationThreshold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeakSpecFilter::PutTofSaturationThreshold ( double pRetVal ) {
    HRESULT _hr = put_TofSaturationThreshold(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IBDAPeakSpecFilter::GetTofSaturationMzRanges ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_TofSaturationMzRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDAPeakSpecFilter::PutTofSaturationMzRanges ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_TofSaturationMzRanges(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBDASpecFilter wrapper method implementations
//

inline enum SpecType IBDASpecFilter::GetSpectrumType ( ) {
    enum SpecType _result;
    HRESULT _hr = get_SpectrumType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutSpectrumType ( enum SpecType pRetVal ) {
    HRESULT _hr = put_SpectrumType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IBDASpecFilter::GetScanRange ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ScanRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutScanRange ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_ScanRange(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDASpecFilter::GetMassRange ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_MassRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDASpecFilter::PutRefMassRange ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_MassRange(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MSLevel IBDASpecFilter::GetMSLevelFilter ( ) {
    enum MSLevel _result;
    HRESULT _hr = get_MSLevelFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutMSLevelFilter ( enum MSLevel pRetVal ) {
    HRESULT _hr = put_MSLevelFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum MSScanType IBDASpecFilter::GetMSScanTypeFilter ( ) {
    enum MSScanType _result;
    HRESULT _hr = get_MSScanTypeFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutMSScanTypeFilter ( enum MSScanType pRetVal ) {
    HRESULT _hr = put_MSScanTypeFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IBDASpecFilter::GetMzOfInterestFilter ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_MzOfInterestFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutMzOfInterestFilter ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_MzOfInterestFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum IonPolarity IBDASpecFilter::GetIonPolarityFilter ( ) {
    enum IonPolarity _result;
    HRESULT _hr = get_IonPolarityFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutIonPolarityFilter ( enum IonPolarity pRetVal ) {
    HRESULT _hr = put_IonPolarityFilter(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDASpecFilter::GetFragmentorVoltage ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_FragmentorVoltage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDASpecFilter::PutRefFragmentorVoltage ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_FragmentorVoltage(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IRangePtr IBDASpecFilter::GetCollisionEnergy ( ) {
    struct IRange * _result = 0;
    HRESULT _hr = get_CollisionEnergy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRangePtr(_result, false);
}

inline void IBDASpecFilter::PutRefCollisionEnergy ( struct IRange * pRetVal ) {
    HRESULT _hr = putref_CollisionEnergy(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum IonizationMode IBDASpecFilter::GetIonizationMode ( ) {
    enum IonizationMode _result;
    HRESULT _hr = get_IonizationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutIonizationMode ( enum IonizationMode pRetVal ) {
    HRESULT _hr = put_IonizationMode(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum DesiredMSStorageType IBDASpecFilter::GetDesiredMSStorageType ( ) {
    enum DesiredMSStorageType _result;
    HRESULT _hr = get_DesiredMSStorageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutDesiredMSStorageType ( enum DesiredMSStorageType pRetVal ) {
    HRESULT _hr = put_DesiredMSStorageType(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDASpecFilter::GetMassUnits ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MassUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutMassUnits ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_MassUnits(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDASpecFilter::GetExtractByCycle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractByCycle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutExtractByCycle ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ExtractByCycle(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline SAFEARRAY * IBDASpecFilter::GetScanIds ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ScanIds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutScanIds ( SAFEARRAY * pRetVal ) {
    HRESULT _hr = put_ScanIds(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IBDASpecFilter::GetAverageSpectrum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AverageSpectrum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutAverageSpectrum ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AverageSpectrum(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IBDASpecFilterPtr IBDASpecFilter::Clone ( ) {
    struct IBDASpecFilter * _result = 0;
    HRESULT _hr = raw_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDASpecFilterPtr(_result, false);
}

inline _bstr_t IBDASpecFilter::GetDeviceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IBDASpecFilter::PutDeviceName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_DeviceName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline __int64 IBDASpecFilter::GetOrdinalNumber ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_OrdinalNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IBDASpecFilter::PutOrdinalNumber ( __int64 pRetVal ) {
    HRESULT _hr = put_OrdinalNumber(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBDAReadSpectra wrapper method implementations
//

inline SAFEARRAY * IBDAReadSpectra::ReadSpectrum ( struct IBDASpecFilter * specRequest, struct IBDAPeakSpecFilter * apseParameters ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ReadSpectrum(specRequest, apseParameters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAReadSpectra::ReadSpectrum_2 ( struct IBDASpecFilter * spectrumRequest ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ReadSpectrum_2(spectrumRequest, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IBDAReadSpectra::ReadSpectrum_3 ( struct IBDASpecFilter * spectrumRequest, struct IRange * startRange, struct IRange * endRange ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_ReadSpectrum_3(spectrumRequest, startRange, endRange, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IBDASpecDataPtr IBDAReadSpectra::ReadSpectrum_4 ( long rowIndex, VARIANT_BOOL bMassUnits ) {
    struct IBDASpecData * _result = 0;
    HRESULT _hr = raw_ReadSpectrum_4(rowIndex, bMassUnits, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDASpecDataPtr(_result, false);
}

inline IBDASpecDataPtr IBDAReadSpectra::ReadSpectrum_5 ( long rowIndex, VARIANT_BOOL bMassUnits, enum DesiredMSStorageType desiredStorageMode ) {
    struct IBDASpecData * _result = 0;
    HRESULT _hr = raw_ReadSpectrum_5(rowIndex, bMassUnits, desiredStorageMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBDASpecDataPtr(_result, false);
}
