/*
 * Original author: Brian Pratt <bspratt .at. u.washington.edu>,
 *                  MacCoss Lab, Department of Genome Sciences, UW
 *
 * Copyright 2014 University of Washington - Seattle, WA
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;


namespace pwiz.ProteomeDatabase.Fasta
{
    /// <summary>
    /// 
    /// IPI support is going away in most online protein servers,
    /// handle this mapping locally instead.
    /// 
    /// This file is generated by the IpiToUniprotMapCompiler project
    /// in the Skyline\Executables area.  Do not edit it directly.
    /// 
    /// It's based on  
    /// ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/last-UniProtKB2IPI.map.gz.
    /// 
    /// </summary>
    public class IpiToUniprotMap
    {

        // Implementation notes 
        //
        // Parallel arrays for best packing efficiency in 64 bit, per nicksh
        //
        // You might think a dictionary is the way to go, but with nearly 100,000
        // entries it takes quite a while to construct.  Using a presorted array
        // and binary search gives much better overall performance.
        //
        // A simple index instead of this lookup scheme would require a table of 
        // 1,028,485 ints (the largest IPI number) for only  98,650 unique values.

        private readonly int[] _ipi;
        private readonly string[] _accession;
        private int _nAdded;

        // Certainly a static initialization would be better here, but in practice the
        // compiler tips over with this many entries.  So, a dynamic initialization instead.  
        // The cryptic "a()" instead of "add" or somesuch is just to keep filesize down.
        private void a(int ipi, string accession) 
        {
            _ipi[_nAdded] = ipi;
            _accession[_nAdded++] = accession;
        }

        /// <summary>
        /// Map an IPI string to a Uniprot accession id, based on the table taken from
        /// ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/last-UniProtKB2IPI.map.gz.
        /// </summary>
        /// <param name="strIPI">a string like IPI12345678 or ipi_12345678 etc (others just pass through without mapping)</param>
        /// <returns>a string with uniprot mapping, or the input string if no mapping exists</returns>
        public string MapToUniprot(string strIPI)
        {
            if (strIPI.ToUpperInvariant().StartsWith("IPI")) // ipi, IPI, IPI:IPI, iPi_ etc
            {
                strIPI = strIPI.Split('.')[0]; // drop the version number if any
                for (int len = 3; len < strIPI.Length;)
                {
                    int code;
                    if (int.TryParse(strIPI.Substring(len++), out code))
                    {
                        int index = Array.BinarySearch(_ipi,code);
                        if (index >= 0)
                            return _accession[index];
                        break; // it's a number, but not in the table
                    }
                }
            }
            return strIPI; // no mapping
        }

        public IpiToUniprotMap()
        {
            // DECLARE_IPI_COUNT - this gets replaced with table size declaration
            _nAdded = 0;
            _accession = new String[ipiCount];
            _ipi = new int[ipiCount];
            // Add the mappings.  See notes above for why this is done dynamically,
            // and why we use an unhelpful method name like a().
            // ADD MAP. - this gets replaced with the generated map.
        }
    }
}