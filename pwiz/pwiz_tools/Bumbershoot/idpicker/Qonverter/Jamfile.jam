#
# $Id$
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#
# The Original Code is the IDPicker build system.
#
# The Initial Developer of the Original Code is Matt Chambers.
#
# Copyright 2011 Vanderbilt University
#
# Contributor(s): Surendra Dasaris
#

#project Qonverter : requirements <define>QONVERTER_HAS_NATIVEID ;


if --teamcity-test-decoration in [ modules.peek : ARGV ]
{
    TEAMCITY_TEST_DECORATION = <testing.arg>--teamcity-test-decoration ;
}

obj SchemaUpdater : SchemaUpdater.cpp
                  : # requirements
                      <library>../freicore/libraries/SQLite//sqlite3pp
                      <library>$(PWIZ_SOURCE)/pwiz/utility/misc//pwiz_utility_misc
                  : # default-build
                  : # usage-requirements
                      <library>../freicore/libraries/SQLite//sqlite3pp
                      <library>$(PWIZ_SOURCE)/pwiz/utility/misc//pwiz_utility_misc
                      <address-model>64:<define>IDPICKER_SQLITE_64
                  ;

lib Qonverter
    : # sources
        [ glob *Qonverter.cpp ] SchemaUpdater
    : # requirements
        <library>..//svm
        <library>/ext/boost//thread
        <library>waffles//waffles
    : # default-build
    : # usage-requirements
        <library>..//svm
        <library>/ext/boost//thread
        <library>waffles//waffles
    ;

lib Parser
    : # sources
        Parser.cpp Embedder.cpp
    : # requirements
        <library>Qonverter
        <library>$(PWIZ_SOURCE)/pwiz_tools/common//pwiz_tools_common
        <library>$(PWIZ_SOURCE)/pwiz/data/proteome//pwiz_data_proteome
        <library>$(PWIZ_SOURCE)/pwiz/data/identdata//pwiz_data_identdata
        <library>$(PWIZ_SOURCE)/pwiz/analysis/proteome_processing//pwiz_analysis_proteome_processing
    : # default-build
    : # usage-requirements
        <library>Qonverter
        <library>$(PWIZ_SOURCE)/pwiz_tools/common//pwiz_tools_common
        <library>$(PWIZ_SOURCE)/pwiz/data/proteome//pwiz_data_proteome
        <library>$(PWIZ_SOURCE)/pwiz/data/identdata//pwiz_data_identdata
        <library>$(PWIZ_SOURCE)/pwiz/analysis/proteome_processing//pwiz_analysis_proteome_processing
    ;

lib Merger
    : # sources
        Merger.cpp SchemaUpdater
    : # requirements
        <library>Qonverter
    : # default-build
    : # usage-requirements
        <library>Qonverter
    ;

lib Filter
    : # sources
        Filter.cpp TotalCounts.cpp SchemaUpdater
    : # requirements
        <library>Parser
    : # default-build
    : # usage-requirements
        <library>Parser
    ;


import path ;
import generate-version ;

generate-version.cpp $(ROOT_PATH)/Qonverter/CoreVersion.cpp : IDPicker : $(MAJOR) : $(MINOR) : [ path.glob $(ROOT_PATH)/Qonverter : *.?pp *.h : idp*.cpp Version.cpp ] ;
generate-version.cpp $(ROOT_PATH)/Qonverter/idpQonvertVersion.cpp : idpQonvert : $(MAJOR) : $(MINOR) : $(ROOT_PATH)/Qonverter/idpQonvert.cpp ;
generate-version.cpp $(ROOT_PATH)/Qonverter/idpAssembleVersion.cpp : idpAssemble : $(MAJOR) : $(MINOR) : $(ROOT_PATH)/Qonverter/idpAssemble.cpp ;
generate-version.cpp $(ROOT_PATH)/Qonverter/idpQueryVersion.cpp : idpQuery : $(MAJOR) : $(MINOR) : $(ROOT_PATH)/Qonverter/idpQuery.cpp ;

obj CoreVersion : CoreVersion.cpp ;

exe idpQonvert : idpQonvert.cpp CoreVersion idpQonvertVersion.cpp Parser ../freicore ;
exe idpAssemble : idpAssemble.cpp CoreVersion idpAssembleVersion.cpp Merger Filter ;
exe idpQuery : idpQuery.cpp CoreVersion idpQueryVersion.cpp SchemaUpdater /ext/boost//regex ;

import testing ;
unit-test QonverterTest : QonverterTest.cpp Qonverter : $(TEAMCITY_TEST_DECORATION) ;
unit-test EmbedderTest : EmbedderTest.cpp Parser $(PWIZ_SOURCE)/pwiz/data/identdata//pwiz_data_identdata_examples $(PWIZ_SOURCE)/pwiz/data/msdata//pwiz_data_msdata : $(TEAMCITY_TEST_DECORATION) ;
unit-test FilterTest : FilterTest.cpp Filter : $(TEAMCITY_TEST_DECORATION) ;
