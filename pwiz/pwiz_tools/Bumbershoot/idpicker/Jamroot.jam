#
# $Id$
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#
# The Original Code is the IDPicker build system.
#
# The Initial Developer of the Original Code is Matt Chambers.
#
# Copyright 2009 Vanderbilt University
#
# Contributor(s): Surendra Dasaris
#

# Usage:
#
#   bjam [options]
#
#   Builds and installs the IDPicker protein assembly filtering and presentation suite.
#
# Targets and Related Options:
#
#   build                   Build Bumbershoot libraries and applications
#   =====


.os = [ modules.peek : OS ] ; # NT, LINUX, MACOSX
.platform = [ modules.peek : OSPLAT ] ; # X86, X86_64, POWERPC

# set up explicit 32-bit or 64-bit builds
if "address-model=64" in [ modules.peek : ARGV ] || $(.platform:L) = "x86_64"
{
    constant PROCESSOR_ARCHITECTURE : "AMD64" ;
    constant PLATFORM : "x64" ;
}
else if "address-model=32" in [ modules.peek : ARGV ] || $(.platform:L) = "x86"
{
    constant PROCESSOR_ARCHITECTURE : "x86" ;
    constant PLATFORM : "x86" ;
}
else
{
    echo "Unable to determine address-model for platform $(.platform:L). The only supported platforms are x86 and x86_64." ;
    exit ;
}

constant BOOST_VERSION : 1 54 0 ;

local default_libraries_path = "./freicore/libraries" ;
local libraries_path = [ MATCH --libraries-path=(.*) : [ modules.peek : ARGV ] ] ;
libraries_path ?= $(default_libraries_path) ; # set default path in absence of command-line path

local default_boost_src = "$(libraries_path)/boost_$(BOOST_VERSION:J=_)" ;
local boost_src = [ MATCH --boost-src=(.*) : [ modules.peek : ARGV ] ] ;
boost_src ?= $(default_boost_src) ; # set default path in absence of command-line path

local default_zlib_src = "$(libraries_path)/zlib-1.2.3" ;
local zlib_src = [ MATCH --zlib-src=(.*) : [ modules.peek : ARGV ] ] ;
zlib_src ?= $(default_zlib_src) ; # set default path in absence of command-line path

local default_png_src = "$(libraries_path)/libpng-1.5.6" ;
local png_src = [ MATCH --png-src=(.*) : [ modules.peek : ARGV ] ] ;
png_src ?= $(default_png_src) ; # set default path in absence of command-line path


path-constant ROOT_PATH : . ;
path-constant BUILD_PATH : build-$(.os:L)-$(.platform:L) ;
path-constant LIBRARIES_PATH : $(libraries_path) ;
path-constant PWIZ_SOURCE : ./freicore/pwiz_src ;


# this makes pwiz use freicore's libraries directory
local argv = [ modules.peek : ARGV ] ;
modules.poke : ARGV : $(argv) --libraries-path="$(LIBRARIES_PATH)" ;


import os ;
import modules ;
import common ;
import package ;
import errors : error ;
import feature ;
import path ;


project idpicker
	: requirements
	  <include>$(PWIZ_SOURCE)
	  <include>$(LIBRARIES_PATH)/boost_aux
	  <include>$(LIBRARIES_PATH)/boost_$(BOOST_VERSION:J=_)
	  <include>$(LIBRARIES_PATH)/libsvm-3.0

      <toolset>gcc,<link>shared:<runtime-link>shared
      
      # any module which links with .NET (either dynamically or statically) must use the shared runtime
      <toolset>msvc:<runtime-link>shared

      # SEH exceptions crossing native/managed boundaries are problematic with this set to off;
      # also, catch(...) will catch SEH exceptions with this on
      <toolset>msvc:<asynch-exceptions>on
        
      # special msvc hacks
      <toolset>msvc:<define>WIN32                     # windows
      <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE  # don't deprecate the standard library 
      <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE  # don't deprecate the standard library 
      <toolset>msvc:<define>_SECURE_SCL_THROWS=1      # checked iterators throw instead of crash  
      <toolset>msvc:<define>_USE_MATH_DEFINES         # for M_PI in <cmath>
      <toolset>msvc:<cxxflags>/wd4100                 # warning: unreferenced formal parameter
      <toolset>msvc:<cxxflags>/wd4512                 # warning: assignment operator could not be generated
      <toolset>msvc:<cxxflags>/wd4127                 # warning: conditional expression is constant (boost::lexical_cast)
      <toolset>msvc:<cxxflags>/wd4701                 # warning: potentially uninitialized local variable 'result' used (boost::lexical_cast, debug)
      <toolset>msvc:<cxxflags>/wd4245                 # warning: conversion from 'type1' to 'type2', signed/unsigned mismatch (boost/filesystem/convenience.hpp)
      <toolset>msvc:<cxxflags>/wd4251                 # warning: class needs to have dll-interface to be used by clients of class
      <toolset>msvc:<cxxflags>/wd4267	                # warning: conversion from 'type1' to 'type2', possible loss of data (boost::lexical_cast)
      <toolset>msvc:<cxxflags>/wd4244                 # warning: conversion from 'int' to 'unsigned short', possible loss of data (boost/date_time/microsec_time_clock.hpp)
      <toolset>msvc:<cxxflags>/wd4275                 # warning: non dll-interface class 'base' used as base for dll-interface class 'derived'
      <toolset>msvc,<debug-symbols>off:<linkflags>/OPT:REF,ICF

      # warning: _SECURE_SCL_THROWS is deprecated
      <toolset>msvc:<define>_SILENCE_DEPRECATION_OF_SECURE_SCL_THROWS
        
      # special gcc hack - Cygwin gcc 3.4.4, Ubuntu gcc 4.1.2 
      # warning: '__cur' might be used uninitialized in this function 
      <toolset>gcc:<cxxflags>-Wno-uninitialized

      # starting with gcc 4.8, gcc is extremely verbose about unused typedefs; heavily used in Boost concept checks
      <toolset>gcc:<cxxflags>-Wno-unused-local-typedefs

      # special Cygwin gcc-3.4.4 hack
      # linker "multiple definition" error on inclusion of boost-1.34.1 filesystem headers  
      <toolset>gcc-3.4.4:<linkflags>-Wl,--allow-multiple-definition
      <toolset>gcc-mingw-3.4.5:<linkflags>-Wl,--allow-multiple-definition

      # allow "long long" even with -pedantic
      <toolset>gcc:<cxxflags>-Wno-long-long
      <toolset>darwin:<cxxflags>-Wno-long-long

      # any GCC executable that uses shared libraries must have all its code built with -fPIC
      <conditional>@static-with-fpic

      # don't call 'strip' -- causes 'Bus error' in some cases
      #  e.g. find_if with inline predicate
      <toolset>darwin:<debug-symbols>on

      <threading>multi

  : build-dir $(BUILD_PATH)
  : default-build
      <variant>release
      <link>static
      <runtime-link>static
	;

alias svm : $(LIBRARIES_PATH)/libsvm-3.0//svm ;

tmp = [ modules.peek : BOOST_BUILD_PATH ] ;
tmp += freicore/ext freicore/libraries ;
modules.poke : BOOST_BUILD_PATH : $(tmp) ;


local application-name = "IDPicker" ;


# set version info (used for tarball filenames)
import svnrev sequence numbers string ;

constant MAJOR : 3 ;
constant MINOR : 0 ;

# rule for generating a C++/CLI or C# AssemblyInfo file
rule generate-AssemblyInfo ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? : cpp-cli ? :
                             AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    local extension = "cs" ;
    local using-namespace = "using" ;
    local namespace-delimiter = "." ;
    local attribute-suffix = "" ;
    local attribute-line-terminator = "" ;
    if $(cpp-cli)
    {
        extension = "cpp" ;
        using-namespace = "using namespace" ;
        namespace-delimiter = "::" ;
        attribute-suffix = "Attribute" ;
        attribute-line-terminator = ";" ;
    }

    # default filepath is "Properties/AssemblyInfo" in the current directory
    filepath ?= Properties/AssemblyInfo.$(extension) ;

    if $(print-revision-info) { echo Generating/updating version in $(filepath) ; }

    local existing-revision-info ;
    if [ path.exists $(filepath) ]
    {
        existing-revision-info = [ svnrev.get-revision-info $(filepath) ] ;
        if $(print-revision-info) { echo Existing maximum revision: $(existing-revision-info) ; }
    }

    sources-with-rcs-keywords = [ sequence.transform path.native : $(sources-with-rcs-keywords) ] ;
    local revision-info = [ svnrev.get-revision-info $(sources-with-rcs-keywords)
                                : $(warn-on-missing) : $(print-revision-info) ] ;

    if $(print-revision-info) { echo Current maximum revision: $(revision-info) ; }

    if ! $(existing-revision-info) ||
       $(existing-revision-info[1]) != $(revision-info[1])
    {
        if [ path.exists $(filepath) ]
        {
            local rm = [ common.rm-command ] ;
            rm = $(rm:J=" ") ;
            SHELL "$(rm) \"$(filepath)\"" ;
        }

        local AssemblyCopyright = "Copyright © $(AssemblyCompany) $(revision-info[2])" ;

        local header-text =
"// This file was generated by the \"svnrev\" utility
// You should not modify it manually, as it may be re-generated.
//
// $Revision: $(revision-info[1]) $
// $Date: $(revision-info[2])-$(revision-info[3])-$(revision-info[4]) $
//

$(using-namespace) System$(namespace-delimiter)Reflection;
$(using-namespace) System$(namespace-delimiter)Runtime$(namespace-delimiter)CompilerServices;
$(using-namespace) System$(namespace-delimiter)Runtime$(namespace-delimiter)InteropServices;

[assembly: AssemblyTitle$(attribute-suffix)(\"$(AssemblyTitle)\")]$(attribute-line-terminator)
[assembly: AssemblyDescription$(attribute-suffix)(\"$(AssemblyDescription)\")]$(attribute-line-terminator)
[assembly: AssemblyCompany$(attribute-suffix)(\"$(AssemblyCompany)\")]$(attribute-line-terminator)
[assembly: AssemblyProduct$(attribute-suffix)(\"$(AssemblyProduct)\")]$(attribute-line-terminator)
[assembly: AssemblyCopyright$(attribute-suffix)(\"$(AssemblyCopyright)\")]$(attribute-line-terminator)
[assembly: AssemblyVersion$(attribute-suffix)(\"$(MAJOR).$(MINOR).$(revision-info[1])\")]$(attribute-line-terminator)
[assembly: AssemblyFileVersion$(attribute-suffix)(\"$(MAJOR).$(MINOR).$(revision-info[1])\")]$(attribute-line-terminator)
[assembly: ComVisible$(attribute-suffix)(false)]$(attribute-line-terminator)
" ;

        header-text = @($(filepath):E=$(header-text)) ;
    }

    return $(revision-info) ;
}

# rule for generating a C# AssemblyInfo file
rule generate-AssemblyInfo.cs ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? :
                                AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    generate-AssemblyInfo $(filepath) : $(sources-with-rcs-keywords) : $(warn-on-missing) : $(print-revision-info) : :
                          "$(AssemblyTitle)" "$(AssemblyDescription)" "$(AssemblyCompany)" "$(AssemblyProduct)" ;
}

# rule for generating a C++/CLI AssemblyInfo file
rule generate-AssemblyInfo.cpp ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? :
                                 AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    generate-AssemblyInfo $(filepath) : $(sources-with-rcs-keywords) : $(warn-on-missing) : $(print-revision-info) : cpp-cli :
                          "$(AssemblyTitle)" "$(AssemblyDescription)" "$(AssemblyCompany)" "$(AssemblyProduct)" ;
}

# rule for generating a native rc file with version info and optional icons
rule generate-rc ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? : 
                   Title Description Company Product : Icons * )
{
    # default filepath is "Properties/Resources.rc" in the current directory
    filepath ?= Properties/Resources.rc ;

    if $(print-revision-info) { echo Generating/updating version in $(filepath) ; }

    local existing-revision-info ;
    if [ path.exists $(filepath) ]
    {
        existing-revision-info = [ svnrev.get-revision-info $(filepath) ] ;
        if $(print-revision-info) { echo Existing maximum revision: $(existing-revision-info) ; }
    }

    sources-with-rcs-keywords = [ sequence.transform path.native : $(sources-with-rcs-keywords) ] ;
    local revision-info = [ svnrev.get-revision-info $(sources-with-rcs-keywords)
                                : $(warn-on-missing) : $(print-revision-info) ] ;

    if $(print-revision-info) { echo Current maximum revision: $(revision-info) ; }

    if ! $(existing-revision-info) ||
       $(existing-revision-info[1]) != $(revision-info[1])
    {
        if [ path.exists $(filepath) ]
        {
            local rm = [ common.rm-command ] ;
            rm = $(rm:J=" ") ;
            SHELL "$(rm) \"$(filepath)\"" ;
        }

        local copyright = "Copyright © $(Company) $(revision-info[2])" ;

        local icons-text = "" ;
        local resourceId = 101 ;
        for icon in $(Icons)
        {
            icons-text += "$(resourceId) ICON \"$(icon)\"\n" ;
            resourceId = [ numbers.increment $(resourceId) ] ;
        }
        icons-text = [ string.join $(icons-text) ] ;

        local header-text =
"// This file was generated by the \"svnrev\" utility
// You should not modify it manually, as it may be re-generated.
//
// $Revision: $(revision-info[1]) $
// $Date: $(revision-info[2])-$(revision-info[3])-$(revision-info[4]) $
//

#include <windows.h>

//1 RT_MANIFEST \"App.manifest\"

$(icons-text)

VS_VERSION_INFO VERSIONINFO
FILEVERSION     $(MAJOR),$(MINOR),$(revision-info[1]),0
PRODUCTVERSION  $(MAJOR),$(MINOR),$(revision-info[1]),0
FILEFLAGSMASK   VS_FFI_FILEFLAGSMASK
FILEFLAGS       0
FILEOS          VOS__WINDOWS32
FILETYPE        VFT_APP
FILESUBTYPE     VFT2_UNKNOWN
BEGIN
    BLOCK \"StringFileInfo\"
    BEGIN
        BLOCK \"040904E4\" // en-US/cp-1252
        BEGIN
            VALUE \"CompanyName\",      \"$(Company)\"
            VALUE \"ProductName\",      \"$(Product)\"
            VALUE \"ProductVersion\",   \"$(MAJOR).$(MINOR).$(revision-info[1])\"
            VALUE \"FileVersion\",      \"$(MAJOR).$(MINOR).$(revision-info[1])\"
            VALUE \"FileDescription\",  \"$(Description)\"
            VALUE \"LegalCopyright\",   \"$(copyright)\"
        END
    END
        BLOCK \"VarFileInfo\"
        BEGIN
            VALUE \"Translation\", 0x409, 1252 // en-US in ANSI (cp-1252)
        END
    END
END
" ;

        header-text = @($(filepath):E=$(header-text)) ;
    }

    return $(revision-info) ;
}

constant COMPANY_AND_PRODUCT : "Vanderbilt University" "IDPicker" ;

generate-AssemblyInfo.cs Util/Properties/AssemblyInfo.cs : [ path.glob-tree Util : *.jam *.?pp *.h *.cs ] App.config : : : "IDPicker.Util" "IDPicker utilities." $(COMPANY_AND_PRODUCT) ;
generate-AssemblyInfo.cs Model/Properties/AssemblyInfo.cs : [ path.glob-tree Model : *.jam *.?pp *.h *.cs ] : : : "IDPicker.DataModel" "IDPicker data model." $(COMPANY_AND_PRODUCT) ;
generate-AssemblyInfo.cs Controls/Properties/AssemblyInfo.cs : [ path.glob-tree Controls : *.jam *.?pp *.h *.cs ] : : : "IDPicker.Controls" "IDPicker custom controls." $(COMPANY_AND_PRODUCT) ;
generate-AssemblyInfo.cs CustomDataSourceDialog/Properties/AssemblyInfo.cs : [ path.glob-tree CustomDataSourceDialog : *.jam *.?pp *.h *.cs ] : : : "IDPicker.CustomDataSourceDialog" "IDPicker custom open file dialog." $(COMPANY_AND_PRODUCT) ;

generate-rc Resources/Resources.rc :
        [ path.glob-tree . : *.jam
                             *.?pp *.h
                             *.cs
                             *.R
                             #*.html
                             #*.vdproj
            : freicore* build-*-* _Resharper.* Version.cpp Resources.Designer.cs Settings.Designer.cs AssemblyInfo.cs waffles* ]
        App.config
    : warn-on-missing : : "IDPicker" "IDPicker" $(COMPANY_AND_PRODUCT)
    : IDPicker.ico IDPickerDatabase.ico IDPickerInputFile.ico
      BlankIcon.ico PeptideViewIcon.ico ProteinViewIcon.ico SpectrumViewIcon.ico ;

# generate IDPicker version header
local revision-info = [ generate-AssemblyInfo.cs Properties/AssemblyInfo.cs :
        [ path.glob-tree . : *.jam
                             *.?pp *.h
                             *.cs
                             *.R
                             #*.html
                             #*.vdproj
            : freicore* build-*-* _Resharper.* Version.cpp Resources.Designer.cs Settings.Designer.cs AssemblyInfo.cs waffles* ]
        App.config
    : : : "IDPicker" "Filtering, assembling, and reporting of parsimonious protein identifications." $(COMPANY_AND_PRODUCT) ] ;

# revision-info is a sequence: <max revision> <max year> <max month> <max day> <number of modified files in working copy>

local year = $(revision-info[2]) ;
local month = $(revision-info[3]) ;
local day = $(revision-info[4]) ;

constant SVNREV : $(revision-info[1]) ;
constant SVNREVDATE : "(last modified $(year)-$(month)-$(day))" ;
constant version-tag : $(MAJOR) $(MINOR) $(SVNREV) ;

if $(revision-info[5]) > 0
{
    version-tag += "modified" ;
    echo NOTICE: WORKING COPY HAS $(revision-info[5]) MODIFIED FILES. ;
}

echo $(application-name) $(version-tag:J=.) $(SVNREVDATE:J=) ;


# create a VERSION file which can be used by TC to parse the canonical pwiz version
make VERSION : : @make_VERSION : <location>$(BUILD_PATH) ;
actions make_VERSION { @($(STDOUT):E=$(version-tag:J=.)) > "$(<)" }


path-constant BOOST_SOURCE : $(boost_src) ;
path-constant ZLIB_SOURCE : $(zlib_src) ;
path-constant PNG_SOURCE : $(png_src) ;
local .has-boost = [ MATCH "(.+)" : [ modules.peek : BOOST_VERSION ] ] ;
if ! $(.has-boost)
{
    modules.poke : BOOST_VERSION : $(BOOST_VERSION) ;
    using ext-boost : $(BOOST_VERSION:J=.) : $(BOOST_SOURCE) : <zlib-src-location>$(ZLIB_SOURCE) ;
}

rule install-location ( properties * )
{
    local toolsets = [ feature.get-values <toolset> : $(properties) ] ;
    local variants = [ feature.get-values <variant> : $(properties) ] ;
    local location = [ path.make $(BUILD_PATH)/$(toolsets[1])-$(variants[1]) ] ;
    if <link>shared in $(properties) { location = $(location)-shared ; }
    if <address-model>64 in $(properties) { location = $(location)-x86_64 ; }

    return <location>$(location) ;
}

rule install-vendor-api-dependencies ( properties * )
{
    local location = [ install-location $(properties) ] ;
    local dependencies ;
    if <toolset>msvc in $(properties)
    {
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI//install_pwiz_vendor_api_abi/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI/T2D ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI/T2D//install_pwiz_vendor_api_abi_t2d/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Agilent ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Agilent//install_pwiz_vendor_api_agilent/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Bruker ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Bruker//install_pwiz_vendor_api_bruker/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/thermo ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/thermo//install_pwiz_vendor_api_thermo/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Waters ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Waters//install_pwiz_vendor_api_waters/$(location) ; }
    }
    return $(dependencies) ;
}


rule pwiz-bindings-dependency ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local variants = [ feature.get-values <variant> : $(properties) ] ;
        local location = <location>$(BUILD_PATH)/obj/$(PLATFORM)/$(variants[1]) ;
        return <assembly>$(PWIZ_SOURCE)/pwiz/utility/bindings/CLI//pwiz_bindings_cli
               <dependency>$(PWIZ_SOURCE)/pwiz/utility/bindings/CLI//pwiz_bindings_cli/$(location)
               <dependency>$(PWIZ_SOURCE)/pwiz/utility/bindings/CLI//pwiz_bindings_cli.xml/$(location) ;
    }
}


# any GCC executable that uses shared libraries must have all its code built with -fPIC
rule static-with-fpic ( properties * )
{
    if ( <toolset>gcc in $(properties) || <toolset>darwin in $(properties) ) &&
       <link>static in $(properties)
    {
        return <cflags>-fPIC <linkflags>-fPIC ;
    }
}


rule msbuild_IDPicker ( targets + : sources * : properties * )
{
    if <variant>debug in $(properties)
    {
        CONFIGURATION on $(<[1]) = "Debug" ;
    }
    else
    {
        CONFIGURATION on $(<[1]) = "Release" ;
    }

    local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
    OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
    INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(BUILD_PATH)/obj/$(PLATFORM)/" ;
    JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
}

actions msbuild_IDPicker
{
	IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
    echo Building IDPicker in $(CONFIGURATION:L) configuration...
    msbuild $(ROOT_PATH)/IDPicker.csproj /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);$(INTERMEDIATE_PATH);OutDir=$(OUTPUT_PATH) /nologo /verbosity:minimal
}


rule build-location ( properties * )
{
    local result ;
    # don't override the location when it's already set
    if ! <location> in $(properties:G)
    {
        if <variant>debug in $(properties)
        {
            result = <location>$(BUILD_PATH)/bin/$(PLATFORM)/Debug ;
        }
        else
        {
            result = <location>$(BUILD_PATH)/bin/$(PLATFORM)/Release ;
        }
        return $(result) ;
    }
    else
    {
        return $(properties) ;
    }
}


import tar ;
using tar ;

local pwiz_src_tarball = [ SORT [ glob $(ROOT_PATH)/freicore/pwiz-src*.tar.bz2 ] ] ;
pwiz_src_tarball = $(pwiz_src_tarball[-1]) ; # take the last (latest) tarball

# extract SeeMS from pwiz tarball
tar.extract
      # tar filepath
        $(pwiz_src_tarball)
    : # include patterns
        quickbuild.* clean.*
        Jamroot.jam
        LICENSE NOTICE
        pwiz
        pwiz_aux/msrc
        pwiz_aux/Jamfile.jam
        pwiz_tools/common
        pwiz_tools/SeeMS
        pwiz_tools/Shared/MSGraph
        pwiz_tools/Shared/zedgraph
        pwiz_tools/Shared/Lib
        pwiz_tools/Shared/Common

    : # requirements
        <location>$(PWIZ_SOURCE)
    : # usage-requirements
    : check-last-file-only
    ;

rule seems-dependency ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        properties = [ build-location $(properties) ] ;
        local location = [ feature.get-values location : $(properties) ] ;
        return <dependency>$(PWIZ_SOURCE)/pwiz_tools/SeeMS//seems.exe/<location>$(location) ;
    }
}

rule qonverter-dependency ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local variants = [ feature.get-values <variant> : $(properties) ] ;
        local location = <location>$(BUILD_PATH)/obj/$(PLATFORM)/$(variants[1]) ;
        return <assembly>Qonverter/CLI//InteropQonverter
               <dependency>Qonverter/CLI//InteropQonverter/$(location) ;
    }
}

# predicate for use as a <conditional> requirement of targets that must only build with MSVC
rule msvc-requirement ( properties * )
{
    if ! <toolset>msvc in $(properties) { return <build>no ; }
}

# predicate for use as a <conditional> requirement of targets that must only build with MSVC and current .NET Framework
rule msvc-dotnet-requirement ( properties * )
{
    # require VS 2010 because of .NET Framework version
    if ! ( <toolset-msvc:version>10.0 in $(properties) ||
           10.0express in $(properties:G=) )
    { return <build>no ; }
}

# predicate for use as a <conditional> requirement of targets that must only build with non-express version of MSVC
rule no-express-requirement ( properties * )
{
    # only the latest, non-express version of MSVC
    if ! <toolset-msvc:version>10.0 in $(properties) { return <build>no ; }
    if 10.0express in $(properties:G=) { return <build>no ; }
}


make IDPicker.exe
    : # sources
        Program.cs
    : # actions
        @msbuild_IDPicker
    : # requirements
        <conditional>@build-location
        <conditional>@seems-dependency
        <conditional>@pwiz-bindings-dependency
        <conditional>@qonverter-dependency
        <conditional>@msvc-requirement
    ;


rule test-properties ( targets + : sources * : properties * )
{
    if <variant>debug in $(properties)
    {
        CONFIGURATION on $(<[1]) = "Debug" ;
    }
    else
    {
        CONFIGURATION on $(<[1]) = "Release" ;
    }

    local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
    OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
    INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(BUILD_PATH)/Test/$(PLATFORM)/" ;
    JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
}

rule do_IDPicker_test ( targets + : sources * : properties * )
{
    return [ test-properties $(targets) : $(sources) : $(properties) ] ;
}

actions do_IDPicker_test
{
    IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" $(PROCESSOR_ARCHITECTURE) >nul
    echo Unit testing Topograph in $(CONFIGURATION:L) configuration...
    set name="IDPicker unit test"
    $(TEST_PRECOMMAND)
    msbuild $(ROOT_PATH)/IDPicker.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:Test /nologo /verbosity:minimal
    msbuild $(ROOT_PATH)/Test/Test.csproj /p:SolutionDir=$(ROOT_PATH);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=Test /nologo /verbosity:minimal
    set status=%ERRORLEVEL%
    $(TEST_POSTCOMMAND)
}

make IDPickerTest.passed
    : # sources
    : # actions
        @do_IDPicker_test
    : # requirements
        <link>shared:<build>no
        <conditional>@no-express-requirement
        <conditional>@msvc-dotnet-requirement
        <conditional>@build-location
        <dependency>.//IDPicker.exe
    ;

rule dotNET-dependencies ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local location = [ install-location $(properties) ] ;
        return <dependency>IDPicker.exe/$(location) ;
    }
}

install install
    : # sources
        Qonverter//idpQonvert
        Qonverter//idpQuery
    : # requirements
        <conditional>@dotNET-dependencies
        <conditional>@install-location
        <conditional>@install-vendor-api-dependencies
        <dependency>.//VERSION
    ;

build-project Deploy ;

# any source tree can build binary tarballs

import modules os sequence property-set ;

bin-tarball-basename = "$(application-name:L)-bin" ;

rule binary-tarball-requirements ( properties * )
{
    local toolsets = [ feature.get-values <toolset> : $(properties) ] ;
    local variants = [ feature.get-values <variant> : $(properties) ] ;
    local location = [ feature.get-values <location> : [ install-location $(properties) ] ] ;

    local non-redistributables = pwiz_bindings_cli.xml ; # .NET documentation

    if $(variants[1]) = "release"
    {
        non-redistributables += *.pdb ; # MSVC debug symbols
    }

    non-redistributables = [ sequence.join $(non-redistributables) : "&&exclude:" ] ;
    local result = <tar-source>path-anchor:$(location)&&exclude:$(non-redistributables)&&$(location) ;
    if ! <architecture> in $(properties:G)
    {
        if $(.platform:L) = "x86_64" && <address-model>32 in $(properties) { properties += <architecture>x86 ; }
        else if $(.platform:L) = "x86" && <address-model>64 in $(properties) { properties += <architecture>x86_64 ; } 
        else { properties += <architecture>$(.platform:L) ; }
    }
    local name = [ common.format-name <base> <property:target-os> <property:architecture> <toolset> <property:variant> -$(version-tag:J=_)
                                      : $(bin-tarball-basename) : TBZ2 : [ property-set.create $(properties) ] ] ;
    result += <name>$(name) <dependency>install <location>$(BUILD_PATH) <dependency>VERSION ;
    return $(result) ;
}


tar.create $(bin-tarball-basename).tar.bz2
  : # sources are handled by the conditional

  : # requirements
      <conditional>@binary-tarball-requirements
  ;


# full source trees automatically build source tarballs

if ! [ path.exists $(ROOT_PATH)/SUBSET ]
{

import bcp ;
using bcp : $(BOOST_SOURCE) : $(BUILD_PATH)/bcp : release ;

path-constant BOOST_SUBSET_PATH : $(BUILD_PATH)/boost-subset ;

bcp.copy-boost-dependencies copy_boost_subset
  : # sources

    # scan all source files for boost dependencies
    [ path.glob-tree Qonverter : *.cpp *.h ]
    [ glob freicore/*.cpp freicore/*.h ]
    [ path.glob-tree $(PWIZ_SOURCE)/pwiz : *.cpp *.hpp ]
    [ path.glob-tree $(PWIZ_SOURCE)/pwiz_aux : *.cpp *.hpp ]
    [ path.glob-tree $(PWIZ_SOURCE)/pwiz_tools/common : *.cpp *.hpp ]
    [ path.glob-tree $(LIBRARIES_PATH)/boost_aux : *.cpp *.hpp ]

    $(LIBRARIES_PATH)/hdf5-1.8.7/src/init_once_workaround.cpp

  : # requirements
    <location>$(BOOST_SUBSET_PATH)/boost_$(BOOST_VERSION:J=_)
  ;


tar.create boost_$(BOOST_VERSION:J=_).tar.bz2
  : # sources

      path-anchor:$(BOOST_SUBSET_PATH)
      $(BOOST_SUBSET_PATH)/boost_$(BOOST_VERSION:J=_)

  : # requirements
    <location>$(BOOST_SUBSET_PATH)/freicore/libraries
    <dependency>.//copy_boost_subset
  ;

.exclusion-list =
  exclude:.svn
  exclude:*.bak
  exclude:svnrev.hpp
  exclude:*Version.cpp
  exclude:Reader_*_Test.data*
  exclude:site-config.jam exclude:user-config.jam # user should provide these
  exclude:bootstrap exclude:bin.* # boost-build intermediate directories
  exclude:bin exclude:obj # C#.NET intermediate directories
  exclude:Deploy/*.dll exclude:Deploy/*.pdb exclude:Deploy/*.exe exclude:Deploy/*.xml
  exclude:tar.excluded # a place to put any files in these directories that shouldn't be tarballed
;

# the SUBSET file acts as flag so that building a subset tarball doesn't build a source tarball
make SUBSET : : @make_SUBSET : <location>$(BUILD_PATH) ;
actions make_SUBSET
{
@($(STDOUT):E=
This $(application-name) source tree uses a subset of the full Boost tarball.
) > "$(<)"
}

.common-sources =
;

tar.create $(application-name:L)-src.tar.bz2
  : # sources

    path-anchor:$(ROOT_PATH)

    $(.exclusion-list)

    $(ROOT_PATH)/Properties
    #$(ROOT_PATH)/Resources
    $(ROOT_PATH)/Deploy
    $(ROOT_PATH)/Controls
    $(ROOT_PATH)/Forms
    $(ROOT_PATH)/Util

    [ path.glob $(ROOT_PATH)/freicore : *.cpp *.hpp *.h *.tar.bz2 ]
    [ glob $(ROOT_PATH)/freicore/percolator/*.h ]
    [ glob $(ROOT_PATH)/freicore/percolator/*.cpp ]
    $(ROOT_PATH)/freicore/Jamfile.jam
    $(ROOT_PATH)/freicore/ext

    $(ROOT_PATH)/Jamroot.jam
    $(ROOT_PATH)/quickbuild.bat
    $(ROOT_PATH)/quickbuild.sh
    $(ROOT_PATH)/clean.bat
    $(ROOT_PATH)/clean.sh
    #$(ROOT_PATH)/LICENSE

    $(LIBRARIES_PATH)/boost-build
    $(LIBRARIES_PATH)/boost_aux
    $(LIBRARIES_PATH)/libsvm-3.0
    $(LIBRARIES_PATH)/SQLite
    [ path.glob $(LIBRARIES_PATH) : *.bat *.sh *.jam *.dll *.lib *.exe *.cpp libgd*.tar.bz2 libpng*.tar.bz2 freetype*.tar.bz2 zlib*.tar.bz2 hdf5*.tar.bz2 ]

    path-anchor:$(BUILD_PATH)
    $(BUILD_PATH)/SUBSET

    # include the bcp'd boost tarball as if it was really located at "libraries/boost_*.tar.bz2"
    path-anchor:$(BOOST_SUBSET_PATH)
    $(BOOST_SUBSET_PATH)/freicore/libraries

  : # requirements
    <name>$(application-name:L)-src-$(version-tag:J=_).tar.bz2
    <location>$(BUILD_PATH)
    <dependency>.//boost_$(BOOST_VERSION:J=_).tar.bz2
  ;

} # if SUBSET
