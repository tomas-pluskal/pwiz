#
# $Id$
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the DirecTag build system.
#
# The Initial Developer of the Original Code is Matt Chambers.
#
# Copyright 2009 Vanderbilt University
#
# Contributor(s): Surendra Dasaris
#

# Usage:
#
#   bjam [options] [install]
#
#   Builds and installs DirecTag, a sequence tagging engine.
#
# Targets and Related Options:
#
#   build                   Build Bumbershoot libraries and applications
#   =====
#
#   --expat-src=<DIR>       Find Expat 2.0+ source distribution here.
#                           Default: "ext/src/expat*"
#
#
#   --with-mpi              For MPI-enabled applications, compile with
#                           support for running the application in parallel
#                           across multiple nodes. This support depends on
#                           a working MPI implementation being available
#                           at compile-time (and if using shared linkage,
#                           at run-time as well).
#
#
#   install                 Install executable files to certain locations
#   =======
#
#   --prefix=<PREFIX>       Install architecture independent files here.
#                           Default: "C:\Program Files\Bumbershoot" for Windows
#                           Default: "/usr/local/bumbershoot" for Linux
#
#   --exec-prefix=<EPREFIX> Install architecture dependent files here.
#                           Default: <PREFIX>
#


.os = [ modules.peek : OS ] ; # NT, LINUX, MACOSX
.platform = [ modules.peek : OSPLAT ] ; # X86, X86_64, POWERPC

constant BOOST_VERSION : 1 43 0 ;

local default_libraries_path = "./freicore/libraries" ;
local libraries_path = [ MATCH --libraries-path=(.*) : [ modules.peek : ARGV ] ] ;
libraries_path ?= $(default_libraries_path) ; # set default path in absence of command-line path

local default_boost_src = "$(libraries_path)/boost_$(BOOST_VERSION:J=_)" ;
local boost_src = [ MATCH --boost-src=(.*) : [ modules.peek : ARGV ] ] ;
boost_src ?= $(default_boost_src) ; # set default path in absence of command-line path

local default_zlib_src = "$(libraries_path)/zlib-1.2.3" ;
local zlib_src = [ MATCH --zlib-src=(.*) : [ modules.peek : ARGV ] ] ;
zlib_src ?= $(default_zlib_src) ; # set default path in absence of command-line path

local expat_src = [ MATCH --expat-src=(.*) : [ modules.peek : ARGV ] ] ;
expat_src ?= [ glob "freicore/ext/src/expat*" : "freicore/ext/src/*.tar.gz" ] ;
expat_src = $(expat_src[0]) ;

if ! $(expat_src)
{
     error "This build requires the Expat source code. Specify the path to the Expat source distribution with '--expat-src=<path>'" ;
}


path-constant ROOT_PATH : . ;
path-constant BUILD_PATH : build-$(.os:L)-$(.platform:L) ;
path-constant LIBRARIES_PATH : $(libraries_path) ;
path-constant PWIZ_SOURCE : ./freicore/pwiz_src ;


# this makes pwiz use freicore's libraries directory
local argv = [ modules.peek : ARGV ] ;
modules.poke : ARGV : $(argv) --libraries-path="$(LIBRARIES_PATH)" ;


import os ;
import modules ;
import common ;
import package ;
import errors : error ;
import feature ;
import mpi ;


project bumbershoot
	: requirements
	    <include>freicore/pwiz_src
	    <include>$(libraries_path)/boost_aux

        <toolset>gcc,<link>shared:<runtime-link>shared
        <toolset>darwin,<link>shared:<runtime-link>shared

        # any module which links with .NET (either dynamically or statically) must use the shared runtime
        <toolset>msvc:<runtime-link>shared

        # special msvc hacks
        <toolset>msvc:<define>WIN32                     # windows
        <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE  # don't deprecate the standard library 
        <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE  # don't deprecate the standard library 
        <toolset>msvc:<define>_SECURE_SCL_THROWS=1      # checked iterators throw instead of crash  
        <toolset>msvc:<define>_USE_MATH_DEFINES         # for M_PI in <cmath>
        <toolset>msvc:<cxxflags>/wd4100                 # warning: unreferenced formal parameter
        <toolset>msvc:<cxxflags>/wd4512                 # warning: assignment operator could not be generated
        <toolset>msvc:<cxxflags>/wd4127                 # warning: conditional expression is constant (boost::lexical_cast)
        <toolset>msvc:<cxxflags>/wd4701                 # warning: potentially uninitialized local variable 'result' used (boost::lexical_cast, debug)
        <toolset>msvc:<cxxflags>/wd4245                 # warning: conversion from 'type1' to 'type2', signed/unsigned mismatch (boost/filesystem/convenience.hpp)
        <toolset>msvc:<cxxflags>/wd4251                 # warning: class needs to have dll-interface to be used by clients of class
        <toolset>msvc:<cxxflags>/wd4267	                # warning: conversion from 'type1' to 'type2', possible loss of data (boost::lexical_cast)
        <toolset>msvc:<cxxflags>/wd4244                 # warning: conversion from 'int' to 'unsigned short', possible loss of data (boost/date_time/microsec_time_clock.hpp)
        <toolset>msvc:<cxxflags>/wd4275                 # warning: non dll-interface class 'base' used as base for dll-interface class 'derived'
        <toolset>msvc:<linkflags>/OPT:REF,ICF

        # special gcc hack - Cygwin gcc 3.4.4, Ubuntu gcc 4.1.2 
        # warning: '__cur' might be used uninitialized in this function 
        <toolset>gcc:<cxxflags>-Wno-uninitialized   

        # special Cygwin gcc-3.4.4 hack
        # linker "multiple definition" error on inclusion of boost-1.34.1 filesystem headers  
        <toolset>gcc-3.4.4:<linkflags>-Wl,--allow-multiple-definition
        <toolset>gcc-mingw-3.4.5:<linkflags>-Wl,--allow-multiple-definition

        # allow "long long" even with -pedantic
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>darwin:<cxxflags>-Wno-long-long

        # any GCC executable that uses shared libraries must have all its code built with -fPIC
        <conditional>@static-with-fpic

        # don't call 'strip' -- causes 'Bus error' in some cases
        #  e.g. find_if with inline predicate
        <toolset>darwin:<debug-symbols>on

        # use of boost::thread requires multithreaded runtime
        <threading>multi

  : build-dir $(BUILD_PATH)
  : default-build
      <variant>release
      <link>static
      <runtime-link>static
	;


local expat_src = [ MATCH --expat-src=(.*) : [ modules.peek : ARGV ] ] ;
expat_src ?= [ glob "freicore/ext/src/expat*" : "freicore/ext/src/*.tar.gz" ] ;
expat_src = $(expat_src[0]) ;

if ! $(expat_src)
{
     error "This build requires the Expat source code. Specify the path to the Expat source distribution with '--expat-src=<path>'" ;
}


tmp = [ modules.peek : BOOST_BUILD_PATH ] ;
tmp += freicore/ext $(libraries_path) ;
modules.poke : BOOST_BUILD_PATH : $(tmp) ;


local application-name = "DirecTag" ;

constant MAJOR : 1 ;
constant MINOR : 3 ;

# set version info (used for tarball filenames)
import generate-version ;
local version-file = $(application-name:L)Version.cpp ;
local revision-info = [ generate-version.cpp $(ROOT_PATH)/$(version-file) : freicore $(application-name:L) : $(MAJOR) : $(MINOR) :
                                             [ path.glob . : *.?pp *.h Jamroot.jam : $(version-file) ] :
                                             warn-on-missing ] ;

# revision-info is a sequence: <max revision> <max year> <max month> <max day> <number of modified files in working copy>

local year = $(revision-info[2]) ;
local month = $(revision-info[3]) ;
local day = $(revision-info[4]) ;

constant SVNREV : $(revision-info[1]) ;
constant SVNREVDATE : "(last modified $(year)-$(month)-$(day))" ;


version-tag = $(MAJOR) $(MINOR) $(SVNREV) ;

if $(revision-info[5]) > 0
{
    version-tag += "modified" ;
    echo NOTICE: WORKING COPY HAS $(revision-info[5]) MODIFIED FILES. ;
}

echo $(application-name) $(version-tag:J=.) $(SVNREVDATE:J=) ;


path-constant EXPAT_SOURCE : $(expat_src) ;
path-constant BOOST_SOURCE : $(boost_src) ;
path-constant ZLIB_SOURCE : $(zlib_src) ;

using expat : 2.0 : $(EXPAT_SOURCE) ;

local .has-boost = [ MATCH "(.+)" : [ modules.peek : BOOST_VERSION ] ] ;
if ! $(.has-boost)
{
    modules.poke : BOOST_VERSION : $(BOOST_VERSION) ;
    using ext-boost : $(BOOST_VERSION:J=.) : $(BOOST_SOURCE) : <zlib-src-location>$(ZLIB_SOURCE) ;
}


rule install-location ( properties * )
{
    local toolsets = [ feature.get-values <toolset> : $(properties) ] ;
    local variants = [ feature.get-values <variant> : $(properties) ] ;
    if <link>shared in $(properties)
    {
        return <location>$(BUILD_PATH)/$(toolsets[1])-$(variants[1])-shared ;
    }
    else
    {
        return <location>$(BUILD_PATH)/$(toolsets[1])-$(variants[1]) ;
    }
}

rule install-vendor-api-dependencies ( properties * )
{
    local location = [ install-location $(properties) ] ;
    local dependencies ;
    if <toolset>msvc in $(properties) && <link>static in $(properties)
    {
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/thermo ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/thermo//install_pwiz_vendor_api_thermo/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Agilent ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Agilent//install_pwiz_vendor_api_agilent/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI//install_pwiz_vendor_api_abi/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI/T2D ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/ABI/T2D//install_pwiz_vendor_api_abi_t2d/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Bruker ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Bruker//install_pwiz_vendor_api_bruker/$(location) ; }
        if [ path.exists $(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Waters ] { dependencies += <dependency>$(PWIZ_SOURCE)/pwiz_aux/msrc/utility/vendor_api/Waters//install_pwiz_vendor_api_waters/$(location) ; }
    }
    return $(dependencies) ;
}

rule with-mpi ( properties * )
{
    if --with-mpi in [ modules.peek : ARGV ]
    {
        return <location-prefix>with-mpi <library>/mpi//mpi <define>USE_MPI ;
    }
}

rule gcc-install-dll-path ( properties * )
{
    if <toolset>gcc in $(properties) && <link>shared in $(properties) && <target-os>linux in $(properties)
    {
        return <dll-path>'$ORIGIN' ;
    }
}


exe $(application-name:L)
  : # sources
    directag.cpp directagMPI.cpp directagSpectrum.cpp directagVersion.cpp writeHighQualSpectra.cpp
  : # requirements
      <conditional>@with-mpi
      <conditional>@gcc-install-dll-path
      <library>freicore
  ;
  
exe adjustScanRankerScoreByGroup
   : # sources
     adjustScanRankerScoreByGroup.cpp
   : # requirements
		<use>freicore
   ;

install install
    : $(application-name:L) adjustScanRankerScoreByGroup
    : <install-type>EXE
      <conditional>@install-location
      <conditional>@install-vendor-api-dependencies
    ;
    
# any GCC executable that uses shared libraries must have all its code built with -fPIC
rule static-with-fpic ( properties * )
{
    if ( <toolset>gcc in $(properties) || <toolset>darwin in $(properties) ) &&
       <link>static in $(properties)
    {
        return <cflags>-fPIC <linkflags>-fPIC ;
    }
}

# any source tree can build binary tarballs

import modules os ;

if [ os.on-windows ]
{
    using tar : bsdtar.exe ;
}
else
{
    using tar ;
}
import tar sequence property-set ;

bin-tarball-basename = "$(application-name:L)-bin" ;

rule binary-tarball-requirements ( properties * )
{
    local toolsets = [ feature.get-values <toolset> : $(properties) ] ;
    local variants = [ feature.get-values <variant> : $(properties) ] ;
    local location = [ install-location $(properties) ] ;
    location = $(location:G=) ;

    local non-redistributables = pwiz_bindings_cli.xml ; # .NET documentation

    if $(variants[1]) = "release"
    {
        non-redistributables += *.pdb ; # MSVC debug symbols
    }

    non-redistributables = [ sequence.join $(non-redistributables) : "&&exclude:" ] ;
    local result = <tar-source>path-anchor:$(location)&&exclude:$(non-redistributables)&&$(location) ;
    if ! <architecture> in $(properties:G) { properties += <architecture>$(.platform:L) ; }
    local linkage ;
    if <link>shared in $(properties) { linkage = "-shared" ; }
    local name = [ common.format-name <base> <property:target-os> <property:architecture> <toolset> <property:variant> $(linkage) -$(version-tag:J=_)
                                      : $(bin-tarball-basename) : TBZ2 : [ property-set.create $(properties) ] ] ;
    result += <name>$(name) <dependency>install <location>$(BUILD_PATH) ;
    return $(result) ;
}


tar.create $(bin-tarball-basename).tar.bz2
  : # sources are handled by the conditional

  : # requirements
      <conditional>@binary-tarball-requirements
  ;


# full source trees automatically build source tarballs

if ! [ path.exists $(ROOT_PATH)/SUBSET ]
{

import bcp ;
using bcp : $(BOOST_SOURCE) : $(BUILD_PATH)/bcp : release ;

path-constant BOOST_SUBSET_PATH : $(BUILD_PATH)/boost-subset ;

bcp.copy-boost-dependencies copy_boost_subset
  : # sources

    # scan all source files for boost dependencies
    [ glob *.cpp *.h ]
    [ glob freicore/*.cpp freicore/*.h ]
    [ path.glob-tree $(PWIZ_SOURCE)/pwiz : *.cpp *.hpp ]
    [ path.glob-tree $(PWIZ_SOURCE)/pwiz_aux : *.cpp *.hpp ]
    [ path.glob-tree $(PWIZ_SOURCE)/pwiz_tools/common : *.cpp *.hpp ]
    [ path.glob-tree $(LIBRARIES_PATH)/boost_aux : *.cpp *.hpp ]

    $(LIBRARIES_PATH)/hdf5-1.8.7/src/init_once_workaround.cpp

    # scan all targets and their dependencies
    $(ROOT_PATH)//$(application-name:L)

  : # requirements
    <location>$(BOOST_SUBSET_PATH)/boost_$(BOOST_VERSION:J=_)
  ;


tar.create boost_$(BOOST_VERSION:J=_).tar.bz2
  : # sources

      path-anchor:$(BOOST_SUBSET_PATH)
      $(BOOST_SUBSET_PATH)/boost_$(BOOST_VERSION:J=_)

  : # requirements
    <location>$(BOOST_SUBSET_PATH)/freicore/libraries
    <dependency>copy_boost_subset
  ;

.exclusion-list =
  exclude:.svn
  exclude:*.bak
  exclude:svnrev.hpp
  exclude:Version.cpp
  exclude:Reader_*_Test.data*
  exclude:site-config.jam exclude:user-config.jam # user should provide these
  exclude:bootstrap exclude:bin.* # boost-build intermediate directories
  exclude:bin exclude:obj # C#.NET intermediate directories
  exclude:tar.excluded # a place to put any files in these directories that shouldn't be tarballed
;

# the SUBSET file acts as flag so that building a subset tarball doesn't build a source tarball
make SUBSET : : @make_SUBSET : <location>$(BUILD_PATH) ;
actions make_SUBSET
{
@($(STDOUT):E=
This $(application-name) source tree uses a subset of the full Boost tarball.
) > "$(<)"
}

.common-sources =
  $(ROOT_PATH)/Jamroot.jam
  $(ROOT_PATH)/quickbuild.bat
  $(ROOT_PATH)/quickbuild.sh
  $(ROOT_PATH)/clean.bat
  $(ROOT_PATH)/clean.sh

  $(LIBRARIES_PATH)/boost-build
  $(LIBRARIES_PATH)/boost_aux
  [ path.glob $(PWIZ_LIBRARIES_PATH) : *.bat *.sh *.jam *.dll *.lib *.exe *.cpp gd*.tar.bz2 zlib*.tar.bz2 hdf5*.tar.bz2 ]

  path-anchor:$(BUILD_PATH)
  $(BUILD_PATH)/SUBSET

  # include the bcp'd boost tarball as if it was really located at "libraries/boost_*.tar.bz2"
  path-anchor:$(BOOST_SUBSET_PATH)
  $(BOOST_SUBSET_PATH)/freicore/libraries
;

tar.create $(application-name:L)-src.tar.bz2
  : # sources

    path-anchor:$(ROOT_PATH)

    $(.exclusion-list)

    [ path.glob $(ROOT_PATH) : *.cpp *.h ]
    [ glob $(ROOT_PATH)/freicore/*.h ]
    [ glob $(ROOT_PATH)/freicore/*.cpp ]
    [ glob $(ROOT_PATH)/freicore/*.tar.bz2 ]
    $(ROOT_PATH)/freicore/Jamfile.jam
    $(ROOT_PATH)/freicore/ext

    $(.common-sources)

  : # requirements
    <name>$(application-name:L)-src-$(version-tag:J=_).tar.bz2
    <location>$(BUILD_PATH)
    <dependency>boost_$(BOOST_VERSION:J=_).tar.bz2
    <dependency>SUBSET
  ;

} # if SUBSET
