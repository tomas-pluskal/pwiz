#
# $Id$
#

#~ Copyright Redshift Software, Inc. 2006.
#~ Distributed under the Boost Software License, Version 1.0.
#~ (See accompanying file LICENSE_1_0.txt or copy at
#~ http://www.boost.org/LICENSE_1_0.txt)

### Support for building Boost <http://www.boost.org/> externally.
### Targets:
###     /ext/boost//boost
###     /ext/boost//thread
###     /ext/boost//regex
###     /ext/boost//interprocess
###     /ext/boost//filesystem
###     /ext/boost//iostreams
###     /ext/boost//program_options
###     /ext/boost//serialization


import extension ;

import property ;
import project ;
import feature ;
import set ;
import stage ;
import common ;
import path ;
import type ;
import targets ;
import generators ;
import "class" : new ;
import os ;
import tar ;
import regex ;


extension.declare boost ;


feature.feature boost-iostreams-zlib : on off : composite link-incompatible propagated ;
feature.feature boost-iostreams-bzip2 : off on : composite link-incompatible propagated ;
feature.feature zlib-src-location : : free path ;

feature.feature boost-interprocess : : free ;
feature.feature boost-asio : : free ;


rule boost-tag ( name : type ? : property-set )
{
    return [ common.format-name
        boost_ <base> <toolset> <threading> <runtime> <version:boost-version>
        : $(name) : $(type) : $(property-set) ] ;
}


# warning: _SECURE_SCL_THROWS is deprecated
# checked iterators throw instead of crash  
rule secure-scl-throws ( properties * )
{
    if <toolset>msvc in $(properties) &&
       ! ( <toolset-msvc:version>11.0 in $(properties) )
    {
        return <define>_SILENCE_DEPRECATION_OF_SECURE_SCL_THROWS
               <define>_SECURE_SCL_THROWS=1 ;
    }
}


rule init ( version : location : options * )
{
    if ! $(.initialized)
    {
        .initialized = true ;

        local version-tokens = [ regex.split $(version) \\. ] ;
        local boost-basename = "boost_$(version-tokens:J=_)" ;

        # extract boost tarball
        tar.extract
              # tar filepath
                $(boost-basename).tar.bz2
            : # include patterns
                $(boost-basename)/boost*.?pp
                $(boost-basename)/libs*.?pp
                $(boost-basename)/libs/*timeconv.inl
            : # requirements
                <location>.
            : # usage-requirements
            : check-last-file-only   
            ;

        local zlib-src-location = [ feature.get-values <zlib-src-location> : $(options) ] ;
        zlib-src-location ?= $(location)/../zlib-1.2.3 ;
        path-constant ZLIB_SOURCE : $(zlib-src-location[1]) ;
        using zlib : 1.2.3 : $(ZLIB_SOURCE) ;

        local requirements =
            [ extension.refine boost $(version) : <tag>@boost-tag $(options) ]
            $(options)
            <toolset>msvc:<define>WIN32
            <toolset>msvc:<define>BOOST_WINDOWS_API
            <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
            <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
            <toolset>msvc,<toolset-msvc:version>11.0:<define>_HAS_TR1
            <link>shared:<define>BOOST_ALL_DYN_LINK=1
            <link>static:<define>BOOST_ALL_STATIC_LINK=1
            <define>BOOST_ALL_NO_LIB=1
            <warnings>off

            <conditional>@secure-scl-throws
            ;

        lib pthread : : <name>pthread <link>shared : 
            : <toolset>gcc:<linkflags>-pthread # sometimes segfaults when not defined -- dk
            ;

        explicit pthread ;
        local regex_pthread_requirement ;
        if [ modules.peek : UNIX ]
        {
            regex_pthread_requirement = <toolset>gcc:<library>pthread/<link>shared ;
        }

        #requirements = [ extension.refine boost $(version) : <tag>@boost-tag ] ;
        local common-requirements =
            <include>$(location)
            ;
        alias boost
            :
            :   $(common-requirements)
                $(requirements)
            :
            :   $(common-requirements)
            ;


        lib filesystem
            :   [ glob $(location)/libs/filesystem/src/*.cpp ]
            :   $(requirements)
                <location-prefix>filesystem
                <use>boost
                <threading>multi
                <link>shared:<define>BOOST_FILESYSTEM_DYN_LINK=1
                <link>static:<define>BOOST_FILESYSTEM_STATIC_LINK=1
                <define>BOOST_FILESYSTEM_NO_LIB=1
                <library>system
            :
            :   <define>BOOST_FILESYSTEM_NO_LIB=1
                <link>shared:<define>BOOST_FILESYSTEM_DYN_LINK=1
                <link>static:<define>BOOST_FILESYSTEM_STATIC_LINK=1
                <link>shared:<define>BOOST_ALL_DYN_LINK=1
                <library>system
            ;

        lib program_options
            :   [ glob $(location)/libs/program_options/src/*.cpp ]
            :   $(requirements)
                <location-prefix>program_options
                <use>boost
                <threading>multi
                <link>shared:<define>BOOST_PROGRAM_OPTIONS_DYN_LINK=1
                <define>BOOST_PROGRAM_OPTIONS_NO_LIB=1
            :
            :   <define>BOOST_PROGRAM_OPTIONS_NO_LIB=1
                <link>shared:<define>BOOST_PROGRAM_OPTIONS_DYN_LINK=1
            ;

        lib iostreams
            :   [ glob $(location)/libs/iostreams/src/*.cpp : $(location)/libs/iostreams/src/zlib.cpp $(location)/libs/iostreams/src/gzip.cpp $(location)/libs/iostreams/src/bzip2.cpp ]
            :   $(requirements)
                <location-prefix>iostreams
                <use>boost
                <threading>multi
                <link>shared:<define>BOOST_IOSTREAMS_DYN_LINK=1
                <boost-iostreams-zlib>on:<source>$(location)/libs/iostreams/src/zlib.cpp
                <boost-iostreams-zlib>on:<source>$(location)/libs/iostreams/src/gzip.cpp
                <boost-iostreams-zlib>on:<library>/ext/zlib//z
                #<toolset>msvc,<boost-iostreams-zlib>on:<link>static
                <boost-iostreams-bzip2>on:<source>$(location)/libs/iostreams/src/bzip2.cpp
                #<toolset>msvc,<boost-iostreams-bzip2>on:<link>static
                <define>BOOST_IOSTREAMS_NO_LIB=1
            :
            :   <define>BOOST_IOSTREAMS_NO_LIB=1
                <link>shared:<define>BOOST_IOSTREAMS_DYN_LINK=1
                <boost-iostreams-zlib>on:<library>/ext/zlib//z
            ;

        local tmp = [ modules.peek : BOOST_BUILD_PATH ] ;
        tmp += $(location)/libs/serialization/build ;
        modules.poke : BOOST_BUILD_PATH : $(tmp) ;

        local serialization_sources =
          basic_archive
          basic_iarchive
          basic_iserializer
          basic_oarchive
          basic_oserializer
          basic_pointer_iserializer
          basic_pointer_oserializer
          basic_serializer_map
          basic_text_iprimitive
          basic_text_oprimitive
          basic_xml_archive
          binary_iarchive
          binary_oarchive
          extended_type_info
          extended_type_info_typeid
          extended_type_info_no_rtti
          polymorphic_iarchive
          polymorphic_oarchive
          stl_port
          text_iarchive
          text_oarchive
          void_cast
          archive_exception
          xml_grammar
          xml_iarchive
          xml_oarchive
          xml_archive_exception
          shared_ptr_helper
        ;

        local wserialization_sources = 
          basic_text_wiprimitive
          basic_text_woprimitive
          text_wiarchive
          text_woarchive
          utf8_codecvt_facet
          xml_wgrammar
          xml_wiarchive
          xml_woarchive
          codecvt_null
        ;

        lib serialization
            :   $(location)/libs/serialization/src/$(serialization_sources).cpp
            :   $(requirements) <toolset>msvc:<cxxflags>/Gy
                <location-prefix>serialization
                <use>boost
                #<threading>multi
                <link>shared:<define>BOOST_SERIALIZATION_DYN_LINK=1
                <define>BOOST_SERIALIZATION_NO_LIB=1
            :
            :   <link>shared:<define>BOOST_SERIALIZATION_DYN_LINK=1
                <define>BOOST_SERIALIZATION_NO_LIB=1
            ;

        lib wserialization
            :   $(location)/libs/serialization/src/$(wserialization_sources).cpp serialization
            :   $(requirements) <toolset>msvc:<cxxflags>/Gy 
                <location-prefix>wserialization
                <use>boost
                #<threading>multi
                <link>shared:<define>BOOST_WSERIALIZATION_DYN_LINK=1
                <define>BOOST_SERIALIZATION_NO_LIB=1
            :
            :   <link>shared:<define>BOOST_WSERIALIZATION_DYN_LINK=1
                <define>BOOST_SERIALIZATION_NO_LIB=1
            ;

        local thread_sources ;
        if [ modules.peek : NT ]
        {
          thread_sources =
                win32/thread
                win32/tss_dll
                ../../../../boost_aux/libs/thread/src/win32/tss_pe
              ;
        } else
        {
          thread_sources =
                pthread/thread
                pthread/once
              ;
        }

        lib thread
            :   $(location)/libs/thread/src/$(thread_sources).cpp
            :   $(requirements)
                <location-prefix>thread
                <use>boost
                <link>shared:<define>BOOST_THREAD_DYN_LINK=1
                <link>shared:<define>BOOST_THREAD_BUILD_DLL=1
                <link>static:<define>BOOST_THREAD_BUILD_LIB=1
                <define>BOOST_THREAD_NO_LIB=1
                <link>static:<source>$(location)/../tss_workaround.cpp
                <library>date_time
            :
            :   <threading>multi
                <link>shared:<define>BOOST_THREAD_DYN_LINK=1
                <link>static:<define>BOOST_THREAD_USE_LIB=1
                <define>BOOST_THREAD_NO_LIB=1
                <library>date_time
            ;

        local date_time_sources =
            greg_month
            greg_weekday
            date_generators
          ;

        lib date_time
            :   $(location)/libs/date_time/src/gregorian/$(date_time_sources).cpp
            :   $(requirements)
                <location-prefix>date_time
                <use>boost
                <link>shared:<define>BOOST_DATE_TIME_DYN_LINK=1
                <link>static:<define>BOOST_DATE_TIME_STATIC_LINK
                <define>DATE_TIME_INLINE
                <define>BOOST_DATE_TIME_NO_LIB=1
            :
            :   <link>shared:<define>BOOST_DATE_TIME_DYN_LINK=1
                <define>DATE_TIME_INLINE
                <define>BOOST_DATE_TIME_NO_LIB=1
            ;

        lib regex
            :   [ glob $(location)/libs/regex/src/*.cpp ]
            :   $(requirements)
                $(regex_pthread_requirement)
                <location-prefix>regex
                <use>boost
                <link>shared:<define>BOOST_REGEX_DYN_LINK=1
                <define>BOOST_REGEX_NO_LIB=1
                <toolset>msvc:<cxxflags>/wd4309
                <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
            :
            :   <define>BOOST_REGEX_NO_LIB=1
                <link>shared:<define>BOOST_REGEX_DYN_LINK=1
            ;

        lib system
            :   $(location)/libs/system/src/error_code.cpp
            :   $(requirements)
                <location-prefix>system
                <use>boost
                <define>BOOST_SYSTEM_NO_LIB=1
                <link>shared:<define>BOOST_SYSTEM_DYN_LINK=1
                <link>static:<define>BOOST_SYSTEM_STATIC_LINK=1
            :
            :   <define>BOOST_SYSTEM_NO_LIB=1
                <link>shared:<define>BOOST_SYSTEM_DYN_LINK=1
                <link>static:<define>BOOST_SYSTEM_STATIC_LINK=1
            ;

        local PRG_EXEC_MON_SOURCES =
            execution_monitor
            debug
            cpp_main
        ;

        local TEST_EXEC_MON_SOURCES =
            compiler_log_formatter
            debug
            execution_monitor
            framework
            plain_report_formatter
            progress_monitor
            results_collector
            results_reporter
            test_main
            test_tools
            unit_test_log
            unit_test_main
            unit_test_monitor
            unit_test_parameters
            unit_test_suite
            xml_log_formatter
            xml_report_formatter
        ;

        local UTF_SOURCES =
            compiler_log_formatter
            debug
            exception_safety
            execution_monitor
            framework
            interaction_based
            logged_expectations
            plain_report_formatter
            progress_monitor
            results_collector
            results_reporter
            test_tools
            unit_test_log
            unit_test_main
            unit_test_monitor
            unit_test_parameters
            unit_test_suite
            xml_log_formatter
            xml_report_formatter
        ;

        lib prg_exec_monitor
            : # sources
                $(location)/libs/test/src/$(PRG_EXEC_MON_SOURCES).cpp
            : # requirements
                $(requirements)
                <location-prefix>prg_exec_monitor
                <use>boost
            ;

        lib test_exec_monitor
            : # sources
                $(location)/libs/test/src/$(TEST_EXEC_MON_SOURCES).cpp
            : # requirements
                $(requirements)
                <location-prefix>test_exec_monitor
                <use>boost
                <link>static
            ;

        lib unit_test_framework
            : # sources
                $(location)/libs/test/src/$(UTF_SOURCES).cpp
            : # requirements
                $(requirements)
                <location-prefix>unit_test_framework
                <use>boost
            ;

        if <boost-interprocess> in $(requirements:G)
        {
            local i = [ property.select <boost-interprocess> : $(requirements) ] ;
            if ! ( $(i:G=) in enable disable )
            {
                local i-location = [ path.make $(i:G=) ] ;
                local i-files = [ path.glob-tree $(i-location)/boost/interprocess : *.hpp ] ;
                local custom-files ;
                for local i-file in $(i-files)
                {
                    local custom-file = [ path.relative $(i-file) $(i-location) ] ;
                    make $(custom-file) : $(i-file) : common.copy
                        :   $(requirements)
                            <location-prefix>interprocess
                        ;
                    custom-files += $(custom-file) ;
                }
                alias interprocess
                    :
                    :   $(requirements)
                        <use>boost
                        <dependency>$(custom-files)
                    :
                    :   $(common-requirements)
                        <dependency>$(custom-files)
                        <implicit-dependency>$(custom-files)
                    ;
            }
            else if $(i:G=) = enable
            {
                alias interprocess
                    :
                    :   $(requirements)
                        <use>boost
                    :
                    :
                    ;
            }
        }
        
        if <boost-asio> in $(requirements:G)
        {
            local i = [ property.select <boost-asio> : $(requirements) ] ;
            if ! ( $(i:G=) in enable disable )
            {
                local i-location = [ path.make $(i:G=) ] ;
                local i-files = [ path.glob-tree $(i-location)/boost/asio : *.hpp ] ;
                local custom-files ;
                for local i-file in $(i-files)
                {
                    local custom-file = [ path.relative $(i-file) $(i-location) ] ;
                    make $(custom-file) : $(i-file) : common.copy
                        :   $(requirements)
                            <location-prefix>asio
                        ;
                    custom-files += $(custom-file) ;
                }
                alias asio
                    :
                    :   $(requirements)
                        <use>boost
                        <dependency>$(custom-files)
                    :
                    :   $(common-requirements)
                        <dependency>$(custom-files)
                        <implicit-dependency>$(custom-files)
                    ;
            }
            else if $(i:G=) = enable
            {
                alias asio
                    :
                    :   $(requirements)
                        <use>boost
                    :
                    :
                    ;
            }
        }
    }
}